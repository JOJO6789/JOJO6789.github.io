<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue2的学习笔记</title>
      <link href="/2023/02/21/Vue2%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/21/Vue2%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2-学习笔记"><a href="#Vue2-学习笔记" class="headerlink" title="Vue2 学习笔记"></a>Vue2 学习笔记</h1><hr><h2 id="1-Vue核心"><a href="#1-Vue核心" class="headerlink" title="1 Vue核心"></a>1 Vue核心</h2><h3 id="1-1-Vue简介"><a href="#1-1-Vue简介" class="headerlink" title="1.1 Vue简介"></a>1.1 Vue简介</h3><h4 id="1-1-1-官网"><a href="#1-1-1-官网" class="headerlink" title="1.1.1 官网"></a>1.1.1 官网</h4><ul><li>英文官网：<a href="https://vuejs.org/">https://vuejs.org/</a></li><li>中文官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li></ul><h4 id="1-1-2-简介"><a href="#1-1-2-简介" class="headerlink" title="1.1.2 简介"></a>1.1.2 简介</h4><ul><li>动态构建用户界面的渐进式<code>JavaScript</code>框架</li></ul><h4 id="1-1-3-Vue特点"><a href="#1-1-3-Vue特点" class="headerlink" title="1.1.3 Vue特点"></a>1.1.3 Vue特点</h4><ol><li><p>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护</p><p><img src="Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%89%B9%E7%82%B9.png"></p></li><li><p><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率</p><p><img src="Vue%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A0%81%E7%89%B9%E7%82%B9.png"></p></li><li><p>使用<strong>虚拟DOM</strong>+优秀的<strong>Diff算法</strong>,京可能复用节点</p><p><img src="Vue%E8%99%9A%E6%8B%9FDom.png"></p></li></ol><h3 id="1-2-初始Vue"><a href="#1-2-初始Vue" class="headerlink" title="1.2 初始Vue"></a>1.2 初始Vue</h3><h4 id="1-2-1-小结"><a href="#1-2-1-小结" class="headerlink" title="1.2.1 小结"></a>1.2.1 小结</h4><ul><li><p>使用<code>Vue</code> </p><ul><li>创建<code>Vue</code>实例，传入配置对象</li><li>容器内代码符合<code>html</code>规范</li><li>容器内代码称之为【Vue模板】</li></ul></li><li><p>注意事项</p><ul><li>Vue实例和容器一一对应</li><li>开发中Vue和组件配合使用</li><li><code>&#123;&#123;XXX&#125;&#125;</code>中<code>XXX</code>写的是<strong>Js表达式</strong>，且<code>XXX</code>可以自动读取到<code>data</code>中的所有属性</li><li><code>data</code>中的数据发生改变，页面中使用该数据的地方会自动更新</li></ul><blockquote><p><strong>区分Js代码 &amp;&amp; Js表达式</strong></p><blockquote><ol><li>Js表达式：</li><li>一个表达式会产生一个值，可以放在任何一个需要值的地方</li><li>示例<ol><li>a </li><li>a + b</li><li>demo(a)</li><li>x &#x3D;&#x3D;&#x3D; y ?  ‘a’  :  ‘b’</li></ol></li><li>Js代码（语句）</li><li>if(){}</li><li>for(){}</li></ol></blockquote></blockquote></li></ul><h4 id="1-2-2-代码实例"><a href="#1-2-2-代码实例" class="headerlink" title="1.2.2 代码实例"></a>1.2.2 代码实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初始Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例 =&gt; 传入配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//el =&gt; 指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data =&gt; 存储数据，数据供el所指定的容器使用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-模板语法"><a href="#1-3-模板语法" class="headerlink" title="1.3 模板语法"></a>1.3 模板语法</h3><h4 id="1-3-1-分类"><a href="#1-3-1-分类" class="headerlink" title="1.3.1 分类"></a>1.3.1 分类</h4><ol><li><p>插值语法</p><ol><li>功能：用于解析<strong>标签体</strong>内容</li><li>写法：<code>&#123;&#123;XXX&#125;&#125;</code>,<code>XXX</code>写的是<strong>Js表达式</strong>，且<code>XXX</code>可以自动读取到<code>data</code>中的所有属性</li></ol></li><li><p>指令语法</p><ol><li><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件）</p></li><li><p>举例 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等价于--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">xxx写js表达式，且可以读取data中的所有属性</span></span><br><span class="line"><span class="comment">Vue将xxx当成js表达式执行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>代码实例</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 标签体内 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 标签属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url.toUpperCase()&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习啦1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习啦2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">school</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;bilibili&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;https://www.bilibili.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-数据绑定"><a href="#1-4-数据绑定" class="headerlink" title="1.4 数据绑定"></a>1.4 数据绑定</h3><ol><li><p>分类</p><ol><li>单向绑定（v-bind）:数据只能从data流向页面</li><li>双向绑定（v-model):数据不仅能从data流向页面，还可以从页面流向data。</li></ol></li><li><p>注意事项</p><ol><li>双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value可以简写为v-model,因为v-model默认收集的就是value值。</li></ol></li><li><p>代码实例</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通写法 --&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-model只能应用在表单类元素上（输入类元素上） --&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>el 和 data的两种写法</p></blockquote><ol><li><p>el的两种写法</p><ol><li><code>new Vue()</code>的时候配置el属性</li><li>先创建Vue实例，随后通过<code>vm.$mount(’挂载的容器‘)</code>指定el的值</li></ol></li><li><p>data的两种写法</p><ol><li>对象式</li><li>函数式（写成<strong>普通函数</strong> &#x3D;&gt; this对象是当前的Vue实例）</li></ol></li><li><p>代码实例</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器准备 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// el的两种写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* const v = new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        //更换写法使用Vue自身的属性$mount()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        // 写法一：el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    //   el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        name:&#x27;Jack&#x27;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    // 写法二：$mount()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    // $mount()写法更灵活</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    v.$mount(&quot;#root&quot;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//data的两种写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   第一种写法：对象式写法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     name:&#x27;jack&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第二种写法：函数式写法(写成普通函数)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data:function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;Jack&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>小插曲（tip)</p><ul><li><p>VsCode自定义代码片段</p></li><li><p>步骤：左下角设置 &#x3D;&gt; 配置用户代码片段 &#x3D;&gt; 创建代码片段 &#x3D;&gt; 根据提供的注释创建代码片段</p></li><li><p>示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Place your VueBasic 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and </span></span><br><span class="line"><span class="comment">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope </span></span><br><span class="line"><span class="comment">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is </span></span><br><span class="line"><span class="comment">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: </span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. </span></span><br><span class="line"><span class="comment">// Placeholders with the same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;scope&quot;: &quot;javascript,typescript&quot;,</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javascript,typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;new Vue(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  el:&#x27;#root&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  data:&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;    name:&#x27;$0&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;)&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><h3 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h3><ol><li><p>MVVM模型解释</p><ol><li>M: 模型（Model）&#x3D;&gt; data中的数据</li><li>V: 视图（View) &#x3D;&gt; 模板</li><li>VM: 视图模型（ViewModel) &#x3D;&gt; Vue实例对象</li></ol><p><img src="MVVM%E6%A8%A1%E5%9E%8B.png"></p></li><li><p>注意事项</p><ol><li>data中的所有属性，最后都出现在vm上</li><li>vm上的所有属性及Vue原型上的所有属性，在Vue模板中都可以直接使用</li></ol></li></ol><h3 id="1-6-数据代理"><a href="#1-6-数据代理" class="headerlink" title="1.6 数据代理"></a>1.6 数据代理</h3><ol><li><p>理解：通过一个对象代理对拎一个对象中的属性的操作（读&#x2F;写）</p></li><li><p>原理解析图</p><p><img src="Vue%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86.png"></p></li><li><p>Vm中的数据代理</p><ol><li>通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li></ol></li><li><p>Vue中数据代理的好处</p><ol><li>更加方便的操作data中的数据</li></ol></li><li><p>基本原理</p><ol><li>通过<code>Object.definePorperty()</code>把data对象中所有属性添加到vm上</li><li>为每一个添加到vm上的属性指定一个<code>getter/setter</code></li><li>在<code>getter/setter</code>内部去操作（读&#x2F;写）data中对应的属性</li></ol></li></ol><h3 id="1-7-事件处理"><a href="#1-7-事件处理" class="headerlink" title="1.7 事件处理"></a>1.7 事件处理</h3><h4 id="1-7-1-事件的基本使用"><a href="#1-7-1-事件的基本使用" class="headerlink" title="1.7.1 事件的基本使用"></a>1.7.1 事件的基本使用</h4><ol><li><p>使用<code>v-on:XXX</code> 或者<code>@XXX</code>绑定事件，其中<code>XXX</code>是事件名</p></li><li><p>事件的回调需要配置在<strong>methods</strong>对象中，最终会在<strong>vm</strong>上</p></li><li><p>methods中配置的函数，使用普通函数，若使用箭头函数 &#x3D;&gt; this 不再是vm</p></li><li><p>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象</p></li><li><p><code>@click=&quot;demo&quot;</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但是后者可以传参</p></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2(666,$event)&quot;</span>&gt;</span>点我提示信息(传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//阻止 vue 在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//此处普通函数的this是vm</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;Hello Student!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo2</span>(<span class="params">number,event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(number)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;Hello Student!!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-7-2-事件修饰符"><a href="#1-7-2-事件修饰符" class="headerlink" title="1.7.2 事件修饰符"></a>1.7.2 事件修饰符</h4><ol><li><p><code>prevent</code>: 阻止默认事件</p></li><li><p><code>stop</code>: 阻止事件冒泡</p></li><li><p><code>once</code>: 事件只触发一次</p></li><li><p><code>capture</code>: 使用事件的捕获模式</p></li><li><p><code>self</code>: 只有<code>event.target</code>是当前操作元素时才触发事件</p></li><li><p><code>passive</code>: 事件的默认行为立即执行，无需等待事件回调执行完毕</p></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.prevent：阻止默认事件（常用）；</span></span><br><span class="line"><span class="comment">2.stop：阻止事件冒泡（常用）；</span></span><br><span class="line"><span class="comment">3.once：事件只触发一次（常用）；</span></span><br><span class="line"><span class="comment">4.capture：使用事件的捕获模式；</span></span><br><span class="line"><span class="comment">5.self：只有event.target是当前操作的元素时才触发事件；</span></span><br><span class="line"><span class="comment">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.bilibili.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;Hello Student！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-7-3-键盘事件"><a href="#1-7-3-键盘事件" class="headerlink" title="1.7.3 键盘事件"></a>1.7.3 键盘事件</h4><ol><li><p>Vue中常用的案件别名</p><ol><li>回车 &#x3D;&gt; <code>enter</code></li><li>删除 &#x3D;&gt; <code>delete </code>(捕获“删除”和“退格”键)</li><li>退出 &#x3D;&gt; <code>esc</code></li><li>空格 &#x3D;&gt; <code>space</code></li><li>换行 &#x3D;&gt; <code>tab </code>(特殊，必须配合keydown去使用)</li><li>上 &#x3D;&gt; <code>up</code></li><li>下 &#x3D;&gt; <code>down</code></li><li>左 &#x3D;&gt; <code>left</code></li><li>右 &#x3D;&gt; <code>right</code></li></ol></li><li><p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p></li><li><p>系统修饰键（用法特殊）：<code>ctrl</code>、<code>alt</code>、<code>shift</code>、<code>meta</code></p><ol><li>配合<code>keyup</code>使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合<code>keydown</code>使用：正常触发事件</li></ol></li><li><p>可以使用keyCode去指定具体的按键（不推荐）</p></li><li><p><code>Vue.config.keyCodes.自定义键名 = 键码</code>  &#x3D;&gt; 定制按键别名</p></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.huiche</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">huiche</span> = <span class="number">13</span> <span class="comment">//定义一个别名按键</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.key,e.keyCode)</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><ul><li><p>修饰符可以连续写</p></li><li><p>系统修饰符后可以接其他按键 &#x3D;&gt; 按下特定案件才能触发事件</p></li></ul></blockquote><h3 id="1-8-计算属性与监视"><a href="#1-8-计算属性与监视" class="headerlink" title="1.8 计算属性与监视"></a>1.8 计算属性与监视</h3><h4 id="1-8-1-计算属性-computed"><a href="#1-8-1-计算属性-computed" class="headerlink" title="1.8.1 计算属性-computed"></a>1.8.1 计算属性-computed</h4><blockquote><p>姓名案例实现</p></blockquote><ol><li><p>插值语法实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（插值语法实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; lastName.slice(0,3) &#125;&#125;-&#123;&#123; firstName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>methods实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（methods实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>计算属性实现</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例（计算属性实现）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">first name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">whole name: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//get作用：当读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//get调用时机：</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//1、初次读取fullName时</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//2、所依赖的数据发生变化时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//set调用时机： fullName被修改时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                        lastName = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">                        firstName = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>计算属性简写(<strong>只考虑读取计算属性时</strong>)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">lastName</span>:<span class="string">&#x27;张&#x27;</span>,</span><br><span class="line"><span class="attr">firstName</span>:<span class="string">&#x27;三&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">            <span class="attr">computed</span>: &#123;</span><br><span class="line">                <span class="comment">//完整写法</span></span><br><span class="line">                <span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">                    get()&#123;</span></span><br><span class="line"><span class="comment">                        return this.lastName + &#x27;-&#x27; + this.firstName</span></span><br><span class="line"><span class="comment">                    &#125;,</span></span><br><span class="line"><span class="comment">                    set(value) &#123;</span></span><br><span class="line"><span class="comment">                        const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">                        lastName = arr[0]</span></span><br><span class="line"><span class="comment">                        firstName = arr[1]</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125; */</span></span><br><span class="line">                <span class="comment">//简写形式</span></span><br><span class="line">                <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>计算属性</p></blockquote><ol><li>定义：要用的属性不存在，要通过<strong>已有属性</strong>计算得来</li><li>原理：底层借助了<code>Object.defineProperty()</code> 方法提供的<code>getter</code>和<code>setter</code></li><li><code>get()</code>函数执行时机<ol><li>初次读取数据时</li><li>当依赖的数据发生改变时会被再次调用</li></ol></li><li>优势：与<code>methods</code>实现相比，内部有缓存机制（复用），效率更高，调试方便</li><li>注意事项<ol><li>计算属性最终会出现在vm上，<strong>直接读取</strong>即可</li><li>如果计算属性要被修改，必须要写<code>set()</code>函数去响应修改，并且<code>set()</code>中要引起计算时所依赖的数据发生改变</li></ol></li></ol><h4 id="1-8-2-监视属性-watch"><a href="#1-8-2-监视属性-watch" class="headerlink" title="1.8.2 监视属性-watch"></a>1.8.2 监视属性-watch</h4><blockquote><p>天气案例</p></blockquote><ol><li>天气案例（methods实现）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">isHot</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;寒冷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>天气案例（监视属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例(监视属性)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;寒冷&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   watch: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     isHot: &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       immediate: true, //初始化时让handler调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(&quot;isHot被修改了&quot;, newValue, oldValue);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&quot;isHot&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>监视属性watch</p></blockquote><ol><li><p>当被监视的属性变化时，回调函数自动调用，进行相关操作</p></li><li><p>监事的属性必须存在，才能进行监视</p></li><li><p>监视的两种写法</p><ol><li><code>new Vue</code>时传入<code>watch</code>配置</li><li>通过<code>vm.$watch()</code> 监视</li></ol></li><li><p>深度监视</p><ol><li>Vue中的watch默认不监测对象内部值的改变</li><li>配置<code>deep:true</code>可以监测对象内部值的改变</li></ol></li><li><p>简写形式（<strong>只有handler()函数时</strong>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例(监视简写)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>; <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&quot;炎热&quot;</span> : <span class="string">&quot;寒冷&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* isHot: &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          immediate: true, //初始化时让handler调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          deep:true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          handler(newValue, oldValue) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            console.log(&quot;isHot被修改了&quot;, newValue, oldValue);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">          &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;, */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被修改了&quot;</span>, newValue, oldValue);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">deep:true,//深度监视</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">handler(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;) */</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong><code>computed</code>和<code>watch</code>的区别</strong></p><ol><li><code>computed</code>能完成的功能，<code>watch</code>也可以完成</li><li><code>watch</code>能完成的功能，<code>computed</code>不一定能完成。例如：<code>watch</code>可以进行异步操作</li></ol></li><li><p><strong>两个重要的小原则</strong></p><ol><li>所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或者 组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、Ajax的回调函数、Promise的回调函数等）最好写成箭头函数，这样this的指向才是vm 或者 组件实例对象</li></ol></li></ol><h3 id="1-9-绑定样式"><a href="#1-9-绑定样式" class="headerlink" title="1.9 绑定样式"></a>1.9 绑定样式</h3><ol><li><p><code>class</code>样式</p><ol><li>写法<code>:class=&quot;xxx&quot;</code>,xxx可以是字符串、对象、数组<ol><li>字符串写法适用于：类名不确定，需要动态获取</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</li></ol></li></ol></li><li><p><code>style</code>样式</p><ol><li><code>:style=&quot;&#123;fontSize:xxx&#125;&quot;</code>，其中xxx是动态值</li><li><code>:style=[a,b]</code>，其中a、b都是样式对象</li></ol></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.atguigu3</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">绑定样式：</span></span><br><span class="line"><span class="comment">1. class样式</span></span><br><span class="line"><span class="comment">写法:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</span></span><br><span class="line"><span class="comment">字符串写法适用于：类名不确定，要动态获取。</span></span><br><span class="line"><span class="comment">对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span></span><br><span class="line"><span class="comment">数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span></span><br><span class="line"><span class="comment">2. style样式</span></span><br><span class="line"><span class="comment">:style=&quot;&#123;fontSize: xxx&#125;&quot;其中xxx是动态值。</span></span><br><span class="line"><span class="comment">:style=&quot;[a,b]&quot;其中a、b是样式对象。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-10-条件渲染"><a href="#1-10-条件渲染" class="headerlink" title="1.10 条件渲染"></a>1.10 条件渲染</h3><ol><li><p><code>v-if</code></p><ol><li>写法：<ol><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else=&quot;表达式&quot;</code></li></ol></li><li>使用场景：切换频率较低的场景</li><li>特点：不展示的DOM元素直接被移除</li><li>注意事项<ol><li><code>v-if</code>可以和<code>v-else-if</code>、<code>v-else</code>一起使用，但要求结构不能被“打断”</li></ol></li></ol></li><li><p><code>v-show</code></p><ol><li>写法：<code>v-show=&quot;表达式&quot;</code></li><li>使用场景：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅使用样式隐藏掉</li></ol></li><li><p>注意事项</p><ol><li>使用<code>v-if</code>的时候，元素可能无法获取到，而使用<code>v-show</code>一定可以获取到</li></ol></li><li><p>代码案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">条件渲染：</span></span><br><span class="line"><span class="comment">1.v-if</span></span><br><span class="line"><span class="comment">写法：</span></span><br><span class="line"><span class="comment">(1).v-if=&quot;表达式&quot; </span></span><br><span class="line"><span class="comment">(2).v-else-if=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">(3).v-else=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">适用于：切换频率较低的场景。</span></span><br><span class="line"><span class="comment">特点：不展示的DOM元素直接被移除。</span></span><br><span class="line"><span class="comment">注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.v-show</span></span><br><span class="line"><span class="comment">写法：v-show=&quot;表达式&quot;</span></span><br><span class="line"><span class="comment">适用于：切换频率较高的场景。</span></span><br><span class="line"><span class="comment">特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>hhu<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hhu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-11-列表渲染"><a href="#1-11-列表渲染" class="headerlink" title="1.11 列表渲染"></a>1.11 列表渲染</h3><h4 id="1-11-1-基本列表"><a href="#1-11-1-基本列表" class="headerlink" title="1.11.1 基本列表"></a>1.11.1 基本列表</h4><ol><li><p><code>v-for</code>指令</p><ol><li>用于展示列表数据</li><li>语法：<code>v-for=&quot;(item,index) in xxx&quot; :key=&quot;yyy&quot;</code></li><li>可遍历：数组、对象、字符串（少）、指定次数（少）</li></ol></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in personList&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span>&#123;&#123;k&#125;&#125; - &#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&quot;奥迪A8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">price</span>: <span class="string">&quot;70万&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;黑色&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-11-2-key的原理"><a href="#1-11-2-key的原理" class="headerlink" title="1.11.2 key的原理"></a>1.11.2 key的原理</h4><ol><li><p>虚拟DOM中Key的作用 &#x3D;&gt; Key是虚拟DOM对象的<strong>标识</strong>，当数据发生变化时，VUe会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】和【旧虚拟DOM】的差异比较，<strong>比较规则</strong>如下</p><ol><li>旧虚拟DOM中找到与新虚拟DOM相同的Key<ol><li>若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ol></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的Key<ol><li>创建新的真实DOM，随后渲染到页面</li></ol></li></ol></li><li><p>用<code>index</code>作为Key可能会引发的问题</p><ol><li>若对数据进行“逆序添加、逆序删除等”破坏顺序的操作 &#x3D;&gt; 会产生没有必要的真实DOM的更新 &#x3D;&gt; 界面渲染没有问题，但是效率低下</li><li>如果结构中还包含输入类DOM &#x3D;&gt; 会产生错误DOM更新 &#x3D;&gt; 界面有问题</li></ol></li><li><p>开发中选择Key</p><ol><li>使用每条数据的唯一标识作为Key，比如id、手机号、身份证号等</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表展示，使用index作为Key是没有问题的</li></ol></li><li><p>示意图</p><p><img src="Key%E7%9A%84%E5%8E%9F%E7%90%86-16769122794327.png"></p></li></ol><h4 id="1-11-3-列表过滤"><a href="#1-11-3-列表过滤" class="headerlink" title="1.11.3 列表过滤"></a>1.11.3 列表过滤</h4><ol><li><p>案例展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in filPerson&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">keywords</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// filPerson:[]</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            keywords:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                immediate: true,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                handler(val) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    this.filPerson = this.personList.filter((person)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                        return person.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#125;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;   </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125; */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">filPerson</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">personList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">person</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> person.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keywords</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-11-4-列表排序"><a href="#1-11-4-列表排序" class="headerlink" title="1.11.4 列表排序"></a>1.11.4 列表排序</h4><ol><li><p>代码案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keywords&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=1&quot;</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=2&quot;</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType=0&quot;</span>&gt;</span>原序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person,index) in filPerson&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;person.id&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;person.name&#125;&#125; - &#123;&#123;person.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">keywords</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sortType</span>: <span class="number">0</span>, <span class="comment">//排序类型 0=&gt;原顺序  1=&gt;降序  2=&gt;升序</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">personList</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;001&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;马冬梅&quot;</span>, <span class="attr">age</span>: <span class="number">39</span>, <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;002&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;周冬雨&quot;</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;003&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;周杰伦&quot;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="string">&quot;004&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;温兆伦&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">filPerson</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">personList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> person.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keywords</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p2.<span class="property">age</span> - p1.<span class="property">age</span> : p1.<span class="property">age</span> - p2.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="1-11-5-Vue监视数据的原理"><a href="#1-11-5-Vue监视数据的原理" class="headerlink" title="1.11.5 Vue监视数据的原理"></a>1.11.5 Vue监视数据的原理</h4><ol><li><p>Vue会监视<code>data</code>中所有层次的数据</p></li><li><p>监视对象中的数据 &#x3D;&gt; 通过<code>setter</code>实现监视，且要在创建Vue示例时就要传入要监视的数据</p><ol><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式 &#x3D;&gt; 使用API<ol><li><code>Vue.set(target,propertyName/index,value)</code></li><li><code>vm.$set(target,propertyName/index,value)</code></li></ol></li></ol></li><li><p>监视数组中的数据 &#x3D;&gt; 通过包裹数组更新元素的方法实现，本质做了两件事</p><ol><li>调用Js原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol></li><li><p>在Vue修改数组中的某个元素的方法</p><ol><li>API:<code>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code></li><li><code>Vue.set()</code> or <code>vm.$set()</code></li></ol></li><li><p>注意事项</p><ol><li><code>Vue.set()</code> 和 <code>vm.$set()</code>不能给<strong>vm</strong>或者<strong>vm的根数据对象</strong>添加属性</li></ol></li><li><p>代码案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据监测<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.sex = &#x27;none&#x27;&quot;</span>&gt;</span>修改性别<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>name:&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>age:&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>sex:&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>hobby:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;h&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>friends:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">              &#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">              &#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;man&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;man&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;study&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.student.hobby.splice(0,1,&#x27;Drive&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Vue.set(this.student.hobby,0,&#x27;Drive&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>,<span class="number">0</span>,<span class="string">&#x27;Drive&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">removeSmoke</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-12-收集表单数据"><a href="#1-12-收集表单数据" class="headerlink" title="1.12 收集表单数据"></a>1.12 收集表单数据</h3><ol><li><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则<code>v-model</code>收集的是<code>value</code>值，用户输入的就是<code>value</code>值</p></li><li><p>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则<code>v-model</code>收集的是<code>value</code>值，且要给标签配置<code>value</code>值</p></li><li><p>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><ol><li>没有配置<code>input</code>的<code>value</code>属性，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）</li><li>配置<code>input</code>的<code>value</code>属性<ol><li><code>v-model</code>的初始值是非数组，那么收集的就是<code>checked</code>（勾选 or 未勾选，是布尔值）</li><li><code>v-model</code>的初始值是数组，那么收集的的就是<code>value</code>组成的数组</li></ol></li></ol></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>收集表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">            账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.userAccount&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.userPassword&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            性别：</span><br><span class="line">            男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">            女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;famale&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            爱好：</span><br><span class="line">            学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">            跑步<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">            吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            所在城市：</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;jiangsu&quot;</span>&gt;</span>江苏<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;anhui&quot;</span>&gt;</span>安徽<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;zhejiang&quot;</span>&gt;</span>浙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            其他信息：</span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https:www.github.com/CodingJuzi&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userAccount</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">userPassword</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">sex</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">city</span>:<span class="string">&#x27;jiangsu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-13-过滤器"><a href="#1-13-过滤器" class="headerlink" title="1.13 过滤器"></a>1.13 过滤器</h3><ol><li><p>定义：对要显示的数据进行特定格式化后再显示</p></li><li><p>语法：</p><ol><li>注册过滤器：<code>Vue.filter(name,callback)</code>或者<code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code> 或者<code>v-bind:属性=&quot;xxx | 过滤器名&quot;</code></li></ol></li><li><p>备注</p><ol><li>过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>过滤器并未改变原本的数据，而是产生了新的对应的数据</li></ol></li><li><p>代码案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>hhu<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;Hello,hhu&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">getFmtTime</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(<span class="variable language_">this</span>.<span class="property">time</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-14-内置指令"><a href="#1-14-内置指令" class="headerlink" title="1.14 内置指令"></a>1.14 内置指令</h3><blockquote><p>已经学过的指令</p><ol><li>v-bind   : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for  : 遍历数组&#x2F;对象&#x2F;字符串</li><li>v-on   : 绑定事件监听, 可简写为@</li><li>v-if     : 条件渲染（动态控制节点是否存存在）</li><li>v-else  : 条件渲染（动态控制节点是否存存在）</li><li>v-show  : 条件渲染 (动态控制节点是否展示)</li></ol></blockquote><h4 id="1-14-1-v-text"><a href="#1-14-1-v-text" class="headerlink" title="1.14.1 v-text"></a>1.14.1 v-text</h4><ol><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：<code>v-text</code>会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>不会</li></ol><h4 id="1-14-2-v-html"><a href="#1-14-2-v-html" class="headerlink" title="1.14.2 v-html"></a>1.14.2 v-html</h4><ol><li>作用：向指定节点中渲染包含html结构的内容</li><li>与插值语法的区别<ol><li><code>v-html</code>会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>不会</li><li><code>v-html</code>可以识别html结构</li></ol></li><li>注意事项<ol><li><strong>v-html有安全性问题</strong><ol><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li><li>一定要在可信的内容上使用<code>v-html</code>，永远不要使用在用户提交的内容上</li></ol></li></ol></li></ol><h4 id="1-14-3-v-cloak"><a href="#1-14-3-v-cloak" class="headerlink" title="1.14.3 v-cloak"></a>1.14.3 v-cloak</h4><ol><li>没有值</li><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉<code>v-vloak</code>属性</li><li>使用css配合<code>v-cloak</code>可以解决网速慢时页面展示出现<code>&#123;&#123;XXX&#125;&#125;</code>的问题</li></ol><h4 id="1-14-4-v-once"><a href="#1-14-4-v-once" class="headerlink" title="1.14.4 v-once"></a>1.14.4 v-once</h4><ol><li><code>v-once</code>所在的节点在初次动态渲染后，就被视为静态内容</li><li>以后数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能</li></ol><h4 id="1-14-5-v-pre"><a href="#1-14-5-v-pre" class="headerlink" title="1.14.5 v-pre"></a>1.14.5 v-pre</h4><ol><li>跳过其所在节点的编译过程</li><li>可利用他跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ol><h3 id="1-15-自定义指令"><a href="#1-15-自定义指令" class="headerlink" title="1.15 自定义指令"></a>1.15 自定义指令</h3><ol><li><p>定义语法</p><ol><li><p>局部指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;指令名：配置对象&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;指令名：回调函数&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>全局指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(指令名,配置对象)</span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line">Vue.directive(指令名,回调函数)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>配置对象中常用的3个回调</p><ol><li><code>bind</code>:指定与元素成功绑定时调用</li><li><code>inserted</code>:指令所在的元素被插入页面时调用</li><li><code>update</code>:指令所在的模板被重新解析时调用</li></ol></li><li><p>备注</p><ol><li>指令定义时不加v-，但是使用时要在v-</li><li>指令名如果是多个单词，要使用<code>kabab-case</code>命名方式，不要使用<code>camelCase</code>命名</li></ol></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//全局指令</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令与元素成功绑定时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                bind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.innerText = binding.value;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                inserted(element,binding) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.focus()</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                //指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                update(element,binding) &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    element.innerText = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            &#125;) */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* Vue.directive(&#x27;big&#x27;,function(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        &#125;) */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//big函数调用时机 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                1.指令与元素成功绑定时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                2.指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令与元素成功绑定时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">innerText</span> = binding.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">inserted</span>(<span class="params">element,binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">update</span>(<span class="params">element,binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    element.<span class="property">innerText</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="1-16-生命周期"><a href="#1-16-生命周期" class="headerlink" title="1.16 生命周期"></a>1.16 生命周期</h3><ol><li><p>别名：生命周期回调函数、生命周期函数、生命周期钩子</p></li><li><p>&#x3D;&gt; Vue在关键时刻调用的一些特殊名称的函数</p></li><li><p>生命周期函数的名称不可更改，但是函数的具体内容是根据需求编写的</p></li><li><p>生命周期函数中this指向是vm或者组件实例对象</p></li><li><p><strong>示意图</strong></p><p><img src="%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p></li><li><p>常用的生命周期钩子</p><ol><li><code>mounted</code>：发送Ajax请求、启动定时器、绑定自定义事件、订阅信息等【初始化操作】</li><li><code>beforeDestroy</code>：清除定时器、解除自定义事件、取消订阅消息等【收尾工作】</li></ol></li><li><p>关于销毁Vue实例的几点说明</p><ol><li>销毁后借助Vue开发者工具看不到任何消息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在<code>beforeDestroy</code>操作数据，因为即便操作数据，也不会再出发更新流程</li></ol></li></ol><h2 id="2-Vue组件化编程"><a href="#2-Vue组件化编程" class="headerlink" title="2 Vue组件化编程"></a>2 Vue组件化编程</h2><h3 id="2-1-模块与组件、模块化与组件化"><a href="#2-1-模块与组件、模块化与组件化" class="headerlink" title="2.1 模块与组件、模块化与组件化"></a>2.1 模块与组件、模块化与组件化</h3><h4 id="2-1-1-模块"><a href="#2-1-1-模块" class="headerlink" title="2.1.1 模块"></a>2.1.1 模块</h4><ol><li>理解: 向外提供特定功能的 js 程序, 一般就是一个 js 文件 </li><li>为什么: js 文件很多很复杂 </li><li>作用: 复用 js, 简化 js 的编写, 提高 js 运行效率</li></ol><h4 id="2-1-2-组件"><a href="#2-1-2-组件" class="headerlink" title="2.1.2 组件"></a>2.1.2 组件</h4><ol><li>理解: 用来实现局部(特定)功能效果的代码集合(html&#x2F;css&#x2F;js&#x2F;image…..) </li><li>为什么: 一个界面的功能很复杂</li><li>作用：复用编码、简化项目编码、提高运行效率</li></ol><h4 id="2-1-3-模块化"><a href="#2-1-3-模块化" class="headerlink" title="2.1.3 模块化"></a>2.1.3 模块化</h4><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p><h4 id="2-1-4-组件化"><a href="#2-1-4-组件化" class="headerlink" title="2.1.4 组件化"></a>2.1.4 组件化</h4><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p><p><img src="%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8.png"><br><img src="Vue%E5%AE%98%E7%BD%91%E7%9A%84%E7%BB%84%E4%BB%B6%E7%90%86%E8%A7%A3.png"></p><h3 id="2-2-非单文件组件"><a href="#2-2-非单文件组件" class="headerlink" title="2.2 非单文件组件"></a>2.2 非单文件组件</h3><h4 id="2-2-1-基本使用"><a href="#2-2-1-基本使用" class="headerlink" title="2.2.1 基本使用"></a>2.2.1 基本使用</h4><ol><li><p>Vue中使用组件的三大步骤</p><ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件（写组件标签）</li></ol></li><li><p>定义组件</p><ol><li>使用<code>Vue.extend(options)</code>创建，其中<code>options</code>和<code>new Vue(options)</code>时传入的<code>options</code>几乎一样</li><li>区别：<ol><li>不写<code>el</code> &#x3D;&gt; 最终所有的组件都要经过一个vm的管理，由vm中的el决定</li><li>函数式<code>data</code> &#x3D;&gt; 避免组件被复用时，数据存在引用关系</li></ol></li><li>备注<ol><li>使用<code>template</code>可以配置组件结构</li></ol></li></ol></li><li><p>注册组件</p><ol><li>局部注册：靠<code>new Vue()</code>的时候传入<code>components</code>选项</li><li>全局注册：靠<code>Vue.component(&#39;组件名&#39;,组件)</code></li></ol></li><li><p>编写组件标签</p><ol><li><code>&lt;组件名&gt;&lt;/组件名&gt;</code></li></ol></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编写组件标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//① 创建组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//学校组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div class=&quot;demo&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      `</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">schoolName</span>: <span class="string">&quot;hhu&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&quot;江苏&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">schoolName</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//学生组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">studentName</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//hello组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hello = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//全局注册</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>,hello)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">msg</span>: <span class="string">&quot;Hello&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//② 注册组件(局部注册)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        school,</span></span><br><span class="line"><span class="language-javascript">        student</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-2-注意事项"><a href="#2-2-2-注意事项" class="headerlink" title="2.2.2 注意事项"></a>2.2.2 注意事项</h4><ol><li><p>关于组件名:</p><ol><li><p>一个单词组成</p><ol><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ol></li><li><p>多个单词组成：</p><ol><li><p>第一种写法(kebab-case命名)：my-school</p></li><li><p>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</p></li></ol></li><li><p>备注：</p><ol><li><p>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p></li><li><p>可以使用name配置项指定组件在开发者工具中呈现的名字</p></li></ol></li></ol></li><li><p>关于组件标签:</p><ol><li><p>第一种写法：<school></school></p></li><li><p>第二种写法：<school></school></p></li><li><p>备注：不用使用脚手架时，<school>会导致后续组件不能渲染。</school></p></li></ol></li><li><p>一个简写方式</p><ol><li><code>const school = Vue.extend(options) </code> &#x3D;&gt; <code>const school = options</code></li></ol></li></ol><h4 id="2-2-3-组件的嵌套"><a href="#2-2-3-组件的嵌套" class="headerlink" title="2.2.3 组件的嵌套"></a>2.2.3 组件的嵌套</h4><ol><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.config.productionTip = false;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //① 创建组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //学生组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          studentName: &quot;张三&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          age: 18,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //学校组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          schoolName: &quot;hhu&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          address: &quot;江苏&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        student,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to </span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          msg: &quot;hhu&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //定义App组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const app = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span>    </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        hello,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    //全局注册</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&quot;hello&quot;, hello);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      el: &quot;#root&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //② 注册组件(局部注册)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        app,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>嵌套示意图</p><p><img src="%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B5%8C%E5%A5%97.png"></p></li></ol><h4 id="2-2-4-VueComponent"><a href="#2-2-4-VueComponent" class="headerlink" title="2.2.4 VueComponent"></a>2.2.4 VueComponent</h4><ol><li><p>组件的本质是一个名为<code>VueComponent</code>的构造函数，不是由程序员定义，是<code>Vue.extend</code>生成的 </p></li><li><p>编写组件标签时，<code>Vue</code>解析时会帮我们创建组件的实例对象，即<code>Vue</code>帮我们执行的：<code>new VueComponent(options)</code></p></li><li><p>特别注意：每次调用<code>Vue.extend</code>，返回的都是一个全新的<code>VueComponent</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">extendOptions</span>) &#123;</span><br><span class="line">          <span class="comment">/*………………*/</span></span><br><span class="line">          <span class="keyword">var</span> <span class="title class_">Sub</span> = <span class="keyword">function</span> <span class="title function_">VueComponent</span>(<span class="params">options</span>) &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">_init</span>(options);</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="comment">/*………………*/</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Sub</span>;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure></li><li><p>关于this指向</p><ol><li><p>组件配置中</p><p>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【<strong>VueComponent实例对象</strong>】</p></li><li><p><code>new Vue(options)</code>配置中</p><p>data函数、methods中的函数、watch中的函数、computed中的函数，它们的this均是【<strong>Vue实例对象</strong>】</p></li></ol></li><li><p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）</p><p>Vue的实例对象，以后简称vm</p></li></ol><h4 id="2-2-5-一个重要的内置关系"><a href="#2-2-5-一个重要的内置关系" class="headerlink" title="2.2.5 一个重要的内置关系"></a>2.2.5 一个重要的内置关系</h4><ol><li><code>VueComponent.prototype.__proto__ === Vue.prototype</code></li><li>作用 &#x3D;&gt; 让组件实例对象能够访问到Vue原型上的属性、方法</li><li>分析示意图</li></ol><p><img src="%E5%88%86%E6%9E%90Vue%E5%92%8CVueComponent%E7%9A%84%E5%85%B3%E7%B3%BB.png"></p><h3 id="2-3-单文件组件"><a href="#2-3-单文件组件" class="headerlink" title="2.3 单文件组件"></a>2.3 单文件组件</h3><ol><li><p><code>xxx.vue</code>文件 &#x3D;&gt; 内部书写组件 </p><ol><li><code>template</code> &#x3D;&gt; 组件的结构</li><li><code>script</code> &#x3D;&gt; 组件相关交互的代码</li><li><code>style</code> &#x3D;&gt; 组件的样式</li></ol></li><li><p>代码示例 （练习下格式  没有脚手架，不能运行）</p><p><strong>School.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 组件的结构 --&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //组件相关交互的代码</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;hhu&#x27;,</span><br><span class="line">                address:&#x27;江苏&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    /*  组件的样式  */</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Student.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;jack&#x27;,</span><br><span class="line">                age:18</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School&gt;&lt;/School&gt;</span><br><span class="line">        &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 引入组件</span><br><span class="line">    import School from &#x27;./School&#x27;</span><br><span class="line">    import Student from &#x27;./Student&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        School,</span><br><span class="line">        Student</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习单文件组件的语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-使用Vue脚手架"><a href="#3-使用Vue脚手架" class="headerlink" title="3 使用Vue脚手架"></a>3 使用Vue脚手架</h2><h3 id="3-1-初始化脚手架"><a href="#3-1-初始化脚手架" class="headerlink" title="3.1 初始化脚手架"></a>3.1 初始化脚手架</h3><h4 id="3-1-1-说明"><a href="#3-1-1-说明" class="headerlink" title="3.1.1 说明"></a>3.1.1 说明</h4><ol><li>Vue脚手架是Vue官方提供的标准化开发工具（开发平台）</li><li>最新的版本是4.x</li><li>文档地址：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li></ol><h4 id="3-1-2-具体步骤"><a href="#3-1-2-具体步骤" class="headerlink" title="3.1.2 具体步骤"></a>3.1.2 具体步骤</h4><ul><li>官方文档：<a href="https://cli.vuejs.org/zh/">Home | Vue CLI (vuejs.org)</a></li></ul><ol><li><p>安装&#x3D;&#x3D;nodejs&#x3D;&#x3D; 环境</p><p>参考文档：<a href="https://www.cnblogs.com/netcore5/p/15259499.html">https://www.cnblogs.com/netcore5/p/15259499.html</a></p></li><li><p>（仅第一次执行）：全局安装<code>@vue/cli</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure></li><li><p><strong>切换到要创建项目的目录</strong>，执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>示意图</p><p><img src="%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAvue%E9%A1%B9%E7%9B%AE.png"></p></li><li><p>备注</p><ul><li><p>创建项目过程如果报错，使用管理员权限打开<code>cmd</code></p></li><li><p>运行过程出现名称错误</p><ul><li>解决方案一： <code>ctrl + p</code> &#x3D;&gt; <code>vue.config.js</code> &#x3D;&gt; 添加配置 <code>lintOnSave:false</code></li></ul></li><li><p>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpack配置，执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-1-3-脚手架文件结构"><a href="#3-1-3-脚手架文件结构" class="headerlink" title="3.1.3 脚手架文件结构"></a>3.1.3 脚手架文件结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h4 id="3-1-4-render-函数"><a href="#3-1-4-render-函数" class="headerlink" title="3.1.4 render()函数"></a>3.1.4 render()函数</h4><p><em>特殊的函数</em></p><p>关于不同版本的Vue</p><ol><li><p><code>vue.js</code>与<code>vue.runtime.xxx.js</code>的区别：</p><ol><li><p><code>vue.js</code>是完整版的Vue，包含：<strong>核心功能</strong>+<strong>模板解析器</strong></p></li><li><p><code>vue.runtime.xxx.js</code>是运行版的Vue，<strong>只</strong>包含：核心功能；没有模板解析器</p></li></ol></li><li><p>因为<code>vue.runtime.xxx.js</code>没有模板解析器，所以不能使用template配置项，需要使用</p></li></ol><p>​      <code>render</code>函数接收到的<code>createElement</code>函数去指定具体内容</p><h4 id="3-1-5-脚手架默认配置"><a href="#3-1-5-脚手架默认配置" class="headerlink" title="3.1.5 脚手架默认配置"></a>3.1.5 脚手架默认配置</h4><ul><li><p>官方文档：<a href="https://cli.vuejs.org/zh/config/">配置参考 | Vue CLI (vuejs.org)</a></p></li><li><p>查看Vue脚手架默认配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-ref-和-props"><a href="#3-2-ref-和-props" class="headerlink" title="3.2 ref 和 props"></a>3.2 ref 和 props</h3><h4 id="3-2-1-ref属性"><a href="#3-2-1-ref属性" class="headerlink" title="3.2.1 ref属性"></a>3.2.1 ref属性</h4><ol><li><p>作用：给元素或者子组件注册引用信息（id的替代）</p></li><li><p>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象</p></li><li><p>使用方式</p><ol><li>标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;...&lt;/h1&gt;</code>或者<code>&lt;School ref=&quot;xxx&gt;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h4 id="3-2-2-props配置项"><a href="#3-2-2-props配置项" class="headerlink" title="3.2.2 props配置项"></a>3.2.2 props配置项</h4><ol><li><p>作用：让组件接收外部传入的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;XXX&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>方式一（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>方式二（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>方式三（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</p></blockquote></li></ol><h3 id="3-3-mixin（混入）"><a href="#3-3-mixin（混入）" class="headerlink" title="3.3 mixin（混入）"></a>3.3 mixin（混入）</h3><ol><li><p>作用：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：<em>需要导出和引入</em></p><ol><li><p>定义混合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用混入</p><ol><li>全局混入：<code>Vue.mixin(XXX)</code></li><li>局部混入：<code>mixins:[&#39;XXX&#39;]</code></li></ol></li></ol></li></ol><h3 id="3-4-插件"><a href="#3-4-插件" class="headerlink" title="3.4 插件"></a>3.4 插件</h3><ol><li><p>作用：增强Vue</p></li><li><p>本质：包含<code>install()</code> 方法的一个对象，<code>install</code>的第一个参数是Vue原型对象，第二个以后的参数是插件使用者传递的数据</p></li><li><p>定义插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">Vue,options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1.添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(...)</span><br><span class="line">               </span><br><span class="line"><span class="comment">// 2.添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(...)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.配置全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use(..)</code></p></li></ol><h3 id="3-5-scoped样式"><a href="#3-5-scoped样式" class="headerlink" title="3.5 scoped样式"></a>3.5 scoped样式</h3><ol><li>作用：让样式在局部生效，防止冲突</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><hr><h3 id="总结TODOList案例"><a href="#总结TODOList案例" class="headerlink" title="总结TODOList案例"></a>总结TODOList案例</h3><ol><li><p>组件化编码流程：</p></li><li><p>拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p></li><li><p>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p></li><li><p>一个组件在用：放在组件自身即可</p></li><li><p>一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）</p></li><li><p>实现交互：从绑定事件开始</p></li><li><p>props适用于：</p><ol><li>父组件 &#x3D;&#x3D;&gt; 子组件 通信</li><li>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</li></ol></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><hr><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ol><li>存储内容大小一般支持5MB左右（依照浏览器）</li><li>浏览器端通过<code>Window.sessionStorage</code>和<code>window.localStorage</code>属性来实现本地存储机制</li><li>相关API<ol><li><code>xxxStorage.setItem(&#39;key&#39;,&#39;value&#39;)</code> &#x3D;&gt; 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li><li><code>xxxStorage.getItem(&#39;key&#39;)</code> &#x3D;&gt; 该方法接受一个键名作为参数，返回键名对应的值</li><li><code>xxxStorage.removeItem(&#39;key&#39;)</code> &#x3D;&gt; 该方法接受一个键名作为参数，并把该键名从存储中删除</li><li><code>xxxStorage.clear()</code> &#x3D;&gt; 该方法会清空存储中的所有数据</li></ol></li><li>备注<ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失</li><li>LocalStorage的存储的内容需要手动清除才会消失</li><li><code>xxxStorage.getItem(&#39;key&#39;)</code>如果key对应的Value获取不到，则此方法的返回值为null</li><li><code>Json.parse(null)</code>的结果依然是null</li></ol></li></ol><hr><h3 id="3-6-组件的自定义事件"><a href="#3-6-组件的自定义事件" class="headerlink" title="3.6 组件的自定义事件"></a>3.6 组件的自定义事件</h3><ol><li><p>一种组件间的通信方式，适用于: <strong style="color:red">子组件&#x3D;&#x3D;&#x3D;&gt;父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）</p></li><li><p>绑定自定义事件</p><ol><li><p>方式一：在父组件中：<code>&lt;Demo @mystyle=&quot;test&quot;/&gt;</code> 或者 <code>&lt;Demo v-on:mystyle=&quot;test&quot;/&gt;</code></p></li><li><p>方式二：在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">.......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;mystyle&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>​若想让自定义事件只触发一次，可以使用<code>once</code>修饰符或者<code>$once</code>方法</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;mystyle&#39;,数据)</code></p></li><li><p>解绑自定义事件：<code>this.$off(&#39;mystyle&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;mystyle&#39;,回调)</code>绑定自定义事件时，<strong>回调</strong><span style="color:red">要么配置在methods中，要么用箭头函数</span>，否则this指向会有问题</p></li></ol><h3 id="3-7-全局事件总线-GlobalEventBus"><a href="#3-7-全局事件总线-GlobalEventBus" class="headerlink" title="3.7 全局事件总线(GlobalEventBus)"></a>3.7 全局事件总线(GlobalEventBus)</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间的通信</span></p></li><li><p>安装全局事件总线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">// 安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    .....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想要接收数据，则在A组件中给<code>$bus</code>绑定自定义事件，事件的<span style="color:red">回调留在A组件自身</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">demo</span>(<span class="params">data</span>) &#123;.......&#125;,</span><br><span class="line">    .......</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxx&#39;,数据)</code></p></li></ol></li><li><p>注意事项</p><ol><li>最好在<code>beforeDestroy</code>钩子中，用<code>$off</code>去解绑<span style="color:red">当前组件所用到的</span>事件</li></ol></li></ol><hr><h3 id="消息订阅与发布（pubsub"><a href="#消息订阅与发布（pubsub" class="headerlink" title="消息订阅与发布（pubsub)"></a>消息订阅与发布（pubsub)</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间的通信</span></p></li><li><p>使用步骤</p><ol><li><p>安装pubsub:<code>npm i pubsub-js</code></p></li><li><p>引入： <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想要接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A中</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="title function_">demo</span>(<span class="params">data</span>) &#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>注意事项</p><ol><li>最好在<code>beforeDestroy</code>钩子中，用<code>pubsub.unsubscribe(pid)</code>去<span style="color:red">取消订阅</span></li></ol></li></ol></li></ol><hr><h3 id="3-8-nextTick"><a href="#3-8-nextTick" class="headerlink" title="3.8 nextTick"></a>3.8 nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次DOM更新结束后执行其制定的回调</li><li>使用时机：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</li></ol><h3 id="3-9-Vue封装的过渡和动画"><a href="#3-9-Vue封装的过渡和动画" class="headerlink" title="3.9 Vue封装的过渡和动画"></a>3.9 Vue封装的过渡和动画</h3><ol><li><p>作用：在插入、更新或者移除DOM元素时，在合适的时候给元素添加样式类名</p></li><li><p>图示：</p><p><img src="Vue%E5%B0%81%E8%A3%85%E7%9A%84%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB.png"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式<ol><li><code>v-enter</code>:进入的起点</li><li><code>v-enter-active</code>:进入过程中</li><li><code>v-enter-to</code>:进入的终点</li></ol></li><li>元素离开的样式<ol><li><code>v-leave</code>:离开的起点</li><li><code>v-leave-active</code>:离开过程中</li><li><code>v-leave-to</code>:离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过渡的元素，并配置name属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过渡，则需要使用:<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p></li></ol></li></ol><h2 id="4-Vue中的Ajax"><a href="#4-Vue中的Ajax" class="headerlink" title="4 Vue中的Ajax"></a>4 Vue中的Ajax</h2><h3 id="4-1-Vue脚手架配置代理-x3D-gt-解决跨域问题"><a href="#4-1-Vue脚手架配置代理-x3D-gt-解决跨域问题" class="headerlink" title="4.1 Vue脚手架配置代理 &#x3D;&gt; 解决跨域问题"></a>4.1 Vue脚手架配置代理 &#x3D;&gt; 解决跨域问题</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>​在<code>vue.config.js</code>中添加如下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>优点：配置简单，请求资源时直接发送给前端即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配服务器）</li></ul><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>​编写<code>vue.config.js</code>配置具体代理规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:port&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:port&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ul><p>###4.2 slot插槽</p><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于<strong style="color:red">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件</strong></p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>具名插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>作用域插槽</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定</span>(game数据在Category组件中，但使用数据所遍历出来的结构有App组件决定)</p></li><li><p>具体编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是ul列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scopeData&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成的是h4标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;g in scopeData.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;g&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子组件中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;Category&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//数据在子组件自身</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">games</span>:[<span class="string">&#x27;红色警戒&#x27;</span>,<span class="string">&#x27;穿越火线&#x27;</span>,<span class="string">&#x27;劲舞团&#x27;</span>,<span class="string">&#x27;超级玛丽&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="5-Vuex"><a href="#5-Vuex" class="headerlink" title="5 Vuex"></a>5 Vuex</h2><h3 id="5-1-Vuex理解"><a href="#5-1-Vuex理解" class="headerlink" title="5.1 Vuex理解"></a>5.1 Vuex理解</h3><ol><li><p>是什么？专门在 Vue 中实现集中式状态（数据）管理的一个 Vue <strong>插件</strong>，对 vue 应 用中多个组件的<strong>共享</strong>状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方 式，且适用于任意组件间通信</p></li><li><p>工作原理图</p><p><img src="Vuex%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p></li></ol><h3 id="5-2-搭建Vuex环境"><a href="#5-2-搭建Vuex环境" class="headerlink" title="5.2 搭建Vuex环境"></a>5.2 搭建Vuex环境</h3><ol><li><p>安装Vuex</p><ol><li><p>Vue2 &#x3D;&gt; Vuex3 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex@3</span><br></pre></td></tr></table></figure></li></ol></li><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions对象 =&gt; 响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备mutations对象 =&gt; 修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备state对象 =&gt; 保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">.......</span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-3-基本使用"><a href="#5-3-基本使用" class="headerlink" title="5.3 基本使用"></a>5.3 基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>、操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.xxx</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;actions中的方法名&#39;,数据)</code>或者<code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或者其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-4-getters的使用"><a href="#5-4-getters的使用" class="headerlink" title="5.4 getters的使用"></a>5.4 getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="5-5-map方法使用"><a href="#5-5-map方法使用" class="headerlink" title="5.5 map方法使用"></a>5.5 map方法使用</h3><ol><li><p><strong>mapState方法</strong>  &#x3D;&gt; 用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法</strong> &#x3D;&gt; 用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法</strong> &#x3D;&gt; 用于帮助我们生成与<code>actions</code>对话的方法，即包含<code>$state.dispatch(xxx)的函数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法</strong> &#x3D;&gt; 用于帮助我们生成与<code>mutations</code>对话的方法，即包含<code>$state.commit(xxx)的函数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象</p></blockquote><h3 id="5-6-模块化-命名空间"><a href="#5-6-模块化-命名空间" class="headerlink" title="5.6 模块化 + 命名空间"></a>5.6 模块化 + 命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确</p></li><li><p>修改<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取<code>state</code>数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取<code>getters</code>数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用<code>dispatch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用<code>commit</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-vue-router"><a href="#6-vue-router" class="headerlink" title="6 vue-router"></a>6 vue-router</h2><ol><li><p>理解：一个路由(route)就是一组映射关系(key - value)，多个路由需要路由器(router)进行管理</p></li><li><p>前端路由：key是路径，value是组件</p><p><img src="%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%90%86%E8%A7%A3%E6%A1%88%E4%BE%8B.png"></p></li></ol><h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><ol><li><p>安装vue-router（Vue2 &#x3D;&gt; vue-router3)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@3</span><br></pre></td></tr></table></figure></li><li><p>应用插件：<code>Vue.user(VueRouter)</code></p></li><li><p>编写router配置项:<code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>实现切换(<code>active-class</code>可以配置高亮样式)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li></ol><h3 id="6-3-多级路由（嵌套路由）"><a href="#6-3-多级路由（嵌套路由）" class="headerlink" title="6.3 多级路由（嵌套路由）"></a>6.3 多级路由（嵌套路由）</h3><ol><li><p>配置路由规则，使用<code>children</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>跳转（<strong>完整路径</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-4-路由的query参数"><a href="#6-4-路由的query参数" class="headerlink" title="6.4 路由的query参数"></a>6.4 路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-5-命名路由"><a href="#6-5-命名路由" class="headerlink" title="6.5 命名路由"></a>6.5 命名路由</h3><ol><li><p>作用：可以简化路由的跳转</p></li><li><p>使用方法：</p><ol><li><p>给路由命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-6-路由的params参数"><a href="#6-6-路由的params参数" class="headerlink" title="6.6 路由的params参数"></a>6.6 路由的params参数</h3><ol><li><p>配置路由，声明接收<code>params</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote><ol start="3"><li><p>接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-7-路由的props参数"><a href="#6-7-路由的props参数" class="headerlink" title="6.7 路由的props参数"></a>6.7 路由的props参数</h3><ul><li><p>作用：让路由组件更方便的接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-8-lt-router-link-gt-的replace属性"><a href="#6-8-lt-router-link-gt-的replace属性" class="headerlink" title="6.8 &lt;router-link&gt;的replace属性"></a>6.8 <code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录的写入模式：<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录，路由跳转时候默认是<code>push</code></li><li>开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="6-9-编程式路由导航"><a href="#6-9-编程式路由导航" class="headerlink" title="6.9 编程式路由导航"></a>6.9 编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">id</span>:xxx,</span><br><span class="line"><span class="attr">title</span>:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退(传入正数前进，负数后退)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-10-缓存路由组件"><a href="#6-10-缓存路由组件" class="headerlink" title="6.10 缓存路由组件"></a>6.10 缓存路由组件</h3><ol><li><p>组件：让不展示的路由组件保持挂载，不被销毁(在展示组件的地方挂载)</p></li><li><p>代码示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">  &lt;!-- </span><br><span class="line">缓存多个</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt;</span><br><span class="line">--&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><strong>include</strong> &#x3D;&gt; 组件名</p></li></ol><h3 id="6-11-两个新的生命周期钩子"><a href="#6-11-两个新的生命周期钩子" class="headerlink" title="6.11 两个新的生命周期钩子"></a>6.11 两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体名字：<ol><li><code>activated</code> &#x3D;&gt; 路由组件被激活时触发</li><li><code>deactivated</code> &#x3D;&gt; 路由组件失活时触发</li></ol></li></ol><h3 id="6-12-路由守卫"><a href="#6-12-路由守卫" class="headerlink" title="6.12 路由守卫"></a>6.12 路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类</p><ul><li>全局守卫</li><li>独享守卫</li><li>组件内守卫</li></ul></li><li><p>代码示例</p><ul><li><p>全局守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-13-路由器的两种工作方式"><a href="#6-13-路由器的两种工作方式" class="headerlink" title="6.13 路由器的两种工作方式"></a>6.13 路由器的两种工作方式</h3></li><li><p>对于一个<code>url</code>，<code>hash</code> &#x3D;&gt; #及其之后的内容</p></li><li><p><code>hash</code>值不会包含在HTTP请求中，即<code>hash</code>值不会带给服务器</p></li><li><p><code>hash</code>模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p><code>history</code>模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和<code>hash</code>模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li><li><p>开启方式：创建路由器时配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mode:&#x27;history&#x27;</span><br><span class="line">mode:&#x27;hash&#x27;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法基础课</title>
      <link href="/2023/02/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
      <url>/2023/02/16/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="算法基础课"><a href="#算法基础课" class="headerlink" title="算法基础课"></a>算法基础课</h1><h4 id="一-位运算与进制基础："><a href="#一-位运算与进制基础：" class="headerlink" title="一.位运算与进制基础："></a>一.位运算与进制基础：</h4><p><img src="image-20230217011339085.png" alt="image-20230217011339085"></p><p><img src="image-20230217011416003.png" alt="image-20230217011416003"></p><p><strong>判断奇数偶数：x&amp;（与运算）1，如果等于1，则是奇数，为0则是偶数。</strong></p><p>（与运算：&amp; 符号通常表示按位与（bitwise AND）运算符。按位与运算是一种二进制运算，它对两个二进制数的每一位进行逻辑与操作，输出的结果为一个新的二进制数，其中每一位都是对应位上两个二进制数的与操作结果。例如，对于二进制数 1100 和 1010 进行按位与运算，结果为 1000，即 1100 &amp; 1010 &#x3D; 1000。</p><p>在某些编程语言中，&amp; 符号也可以表示逻辑与（logical AND）运算符，逻辑与是指对两个逻辑表达式进行逻辑运算，只有两个表达式都为真时，输出结果才为真。例如，在C语言中，逻辑与运算符用 &amp;&amp; 符号表示。）</p><p><img src="image-20230217013822327.png" alt="image-20230217013822327"></p><p><img src="image-20230217022230057.png" alt="image-20230217022230057"></p><p><img src="image-20230217022244770.png" alt="image-20230217022244770"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2023/02/11/SpringMVC/"/>
      <url>/2023/02/11/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p><img src="image-20230211014911403.png" alt="image-20230211014911403"></p><p>可以这样理解：</p><p><img src="image-20230211023125067.png" alt="image-20230211023125067"></p><p><img src="image-20230211023319850.png" alt="image-20230211023319850"></p><h4 id="Springmvc的操作大概步骤："><a href="#Springmvc的操作大概步骤：" class="headerlink" title="Springmvc的操作大概步骤："></a>Springmvc的操作大概步骤：</h4><p><img src="image-20230211023501097.png" alt="image-20230211023501097"></p><p><img src="image-20230211023522990.png" alt="image-20230211023522990"></p><p><img src="image-20230211023708212.png" alt="image-20230211023708212"></p><p><img src="image-20230211023723387.png" alt="image-20230211023723387"></p><p><img src="image-20230211025057910.png" alt="image-20230211025057910"></p><p><img src="image-20230211025110339.png"></p><h3 id="请求映射路径：名字一样会冲突，但是可以在controller-的RequestMapping后面补上路径说明。"><a href="#请求映射路径：名字一样会冲突，但是可以在controller-的RequestMapping后面补上路径说明。" class="headerlink" title="请求映射路径：名字一样会冲突，但是可以在controller 的RequestMapping后面补上路径说明。"></a>请求映射路径：名字一样会冲突，但是可以在controller 的RequestMapping后面补上路径说明。</h3><p><img src="image-20230211025133493.png" alt="image-20230211025133493"></p><p><img src="image-20230212004614286.png" alt="image-20230212004614286"></p><h3 id="什么是mvc"><a href="#什么是mvc" class="headerlink" title="什么是mvc"></a>什么是mvc</h3><p><img src="image-20230215142910108.png" alt="image-20230215142910108"></p><h3 id><a href="#" class="headerlink" title></a><img src="image-20230215154345044.png" alt="image-20230215154345044"></h3><h3 id="传递json数据"><a href="#传递json数据" class="headerlink" title="传递json数据"></a>传递json数据</h3><p><img src="image-20230215155549852.png" alt="image-20230215155549852"></p><p><img src="image-20230215155613165.png" alt="image-20230215155613165"></p><p><img src="image-20230215155642478.png" alt="image-20230215155642478"></p><p><img src="image-20230215155701140.png" alt="image-20230215155701140"></p><p><img src="image-20230215155718171.png" alt="image-20230215155718171"></p><p><img src="image-20230215155734205.png" alt="image-20230215155734205"></p><p><img src="image-20230215155756948.png" alt="image-20230215155756948"></p><p><img src="image-20230215160550168.png" alt="image-20230215160550168"></p><p><img src="image-20230215161719882.png" alt="image-20230215161719882"></p><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p><img src="image-20230215162404450.png" alt="image-20230215162404450"></p><p><img src="image-20230215164502114.png" alt="image-20230215164502114"></p><p><img src="image-20230215164518766.png" alt="image-20230215164518766"></p><img src="image-20230215164552026.png" alt="image-20230215164552026" style="zoom:80%;"><img src="image-20230215164618303.png" alt="image-20230215164618303" style="zoom:50%;"><h3 id="RESTful快速开发"><a href="#RESTful快速开发" class="headerlink" title="RESTful快速开发"></a>RESTful快速开发</h3><p>​<img src="image-20230216010151961.png" alt="image-20230216010151961"></p><p>就是写上这个注解的时候就可以不用写作用里的俩个注解，一个注解包含了俩个注解的功能。</p><p><img src="image-20230216010254490.png" alt="image-20230216010254490"></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><img src="image-20230216092112175.png" alt="image-20230216092112175"></p><p><img src="image-20230216092421050.png" alt="image-20230216092421050"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringMVC,SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计师</title>
      <link href="/2023/01/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
      <url>/2023/01/28/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设计师"><a href="#软件设计师" class="headerlink" title="软件设计师"></a>软件设计师</h1><h4 id="考前情况分析："><a href="#考前情况分析：" class="headerlink" title="考前情况分析："></a>考前情况分析：</h4><p><img src="image-20230128011937088-16748399799241.png" alt="image-20230128011937088"></p><p><img src="image-20230128012228091.png" alt="image-20230128012228091"></p><p><img src="image-20230128012345590.png" alt="image-20230128012345590"></p><p><img src="image-20230128012803853.png" alt="image-20230128012803853"></p><p><img src="image-20230128013238412.png" alt="image-20230128013238412"></p><p><img src="image-20230128013830345.png" alt="image-20230128013830345"></p><p><img src="image-20230128100256415.png" alt="image-20230128101054089"></p><p>如上图所示：</p><p>  原码为1时，转换为二进制时为0000 0001  ，原码为-1时，在二进制的符号位（最前面的位数）上取1，为：1000 0001；1加上-1则为1000 0010，则原码是-2（符号位的1代表为负数）；</p><p>  反码：当原码二进制的时候，是正数时，不需要取反，若是负数的时候，（只有符号位不变）剩下的全部取反（就是原来是0变为1，1变0），1-1可以看成1加上-1的二进制码，所以得到1111 1111，代表-0；</p><p>  补码：当原码二进制的时候，是正数时，不需要取反，若是负数的时候，在原码的反码的基础上，个位数进1；</p><p>  移码：就是补码的符号位取反；</p><p><img src="image-20230128102143586.png" alt="image-20230128102143586"></p><p>原码，反码整数范围是一样的，<strong>补码为什么和他们不同，区别就在于0</strong>，反码和原码的0是表示为-0和+0，而补码则就是为0；当然，死记公式就行。</p><p><img src="image-20230128102818859.png" alt="image-20230128102818859"></p><h4 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h4><p><img src="image-20230128103355323.png" alt="image-20230128103355323"></p><p>主存储器为内存（就是内存条）。</p><h5 id="Flynn分类法："><a href="#Flynn分类法：" class="headerlink" title="Flynn分类法："></a>Flynn分类法：</h5><p><img src="image-20230209010022491.png" alt=""></p><h5 id="clsc与rlsc-指令"><a href="#clsc与rlsc-指令" class="headerlink" title="clsc与rlsc(指令)"></a>clsc与rlsc(指令)</h5><p><img src="image-20230209010826824.png" alt="image-20230209010826824"></p><p><img src="image-20230221002032447.png" alt="image-20230221002032447"></p><p><img src="image-20230221003506118.png" alt="image-20230221003506118"></p><p><img src="image-20230221003522784.png" alt="image-20230221003522784"></p><h3 id="计算机整体存储结构："><a href="#计算机整体存储结构：" class="headerlink" title="计算机整体存储结构："></a>计算机整体存储结构：</h3><p><img src="image-20230221003552041.png" alt="image-20230221003552041"></p><p><img src="image-20230221004355950.png" alt="image-20230221004355950"></p><h1 id="上午题：计算机系统"><a href="#上午题：计算机系统" class="headerlink" title="上午题：计算机系统"></a>上午题：计算机系统</h1><p><img src="image-20230306140012127.png" alt="image-20230306140012127"></p><p><img src="image-20230306140224559.png" alt="image-20230306140224559"></p><p><img src="image-20230306141055017.png" alt="image-20230306141055017"></p><p>原码和反码：</p><p><img src="image-20230308162849107.png" alt="image-20230308162849107"></p><p><img src="image-20230308163053466.png" alt="image-20230308163053466"></p><h5 id="浮点数："><a href="#浮点数：" class="headerlink" title="浮点数："></a>浮点数：</h5><p><img src="image-20230308163135083.png" alt="image-20230308163135083"></p><p><img src="image-20230308163257382.png" alt="image-20230308163257382"></p><p><img src="image-20230308164519620.png" alt="image-20230308164519620"></p><h3 id="寻址："><a href="#寻址：" class="headerlink" title="寻址："></a>寻址：</h3><p><img src="image-20230308164551974.png" alt="image-20230308164551974"></p><h1 id="下午大题一：数据流图"><a href="#下午大题一：数据流图" class="headerlink" title="下午大题一：数据流图"></a>下午大题一：数据流图</h1><p>题目形式：<img src="image-20230308234852505.png" alt="image-20230308234852505"></p><p>一个说明，俩张图，<strong>一般前三题答案都在说明里面</strong>。</p><p>1-1被称为父图，1-2被称为子图；子图是父图的细分。</p><h3 id="什么是数据流图？（DFD）"><a href="#什么是数据流图？（DFD）" class="headerlink" title="什么是数据流图？（DFD）"></a>什么是数据流图？（DFD）</h3><p><img src="image-20230308235029990.png" alt="image-20230308235029990"></p><p>外部实体：一般矩形就是实体；用<strong>E</strong>表示；</p><p>数据存储：一般是缺一条边的矩形或者俩条线，用<strong>D</strong>表示；</p><p>数据流：一般是一条箭头，箭头上的名字就是数据流的名字；</p><p>加工：一般是圆角矩形，用<strong>P</strong>表示； </p><p>分不清就牢记英语大写。</p><h4 id="外部实体："><a href="#外部实体：" class="headerlink" title="外部实体："></a>外部实体：</h4><p><img src="image-20230309001040360.png" alt="image-20230309001040360"></p><h4 id="数据存储：负责存储和提供数据"><a href="#数据存储：负责存储和提供数据" class="headerlink" title="数据存储：负责存储和提供数据"></a>数据存储：负责存储和提供数据</h4><p><img src="image-20230309001410236.png" alt="image-20230309001410236"></p><h4 id="加工："><a href="#加工：" class="headerlink" title="加工："></a>加工：</h4><p><img src="image-20230309003822887.png" alt="image-20230309003822887"></p><p><strong>数据A加工后得到数据B</strong>；</p><h4 id="数据流："><a href="#数据流：" class="headerlink" title="数据流："></a>数据流：</h4><p><img src="image-20230309004408262.png" alt="image-20230309004408262"></p><p>重点：</p><p><img src="image-20230309004656263.png" alt="image-20230309004656263"></p><h4 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h4><p>一般都是这些问题：</p><p><img src="image-20230309004820022.png" alt="image-20230309004820022"></p><p>up主方法：不要看<strong>父图</strong>去找对象，看<strong>子图</strong>去找。（不是百分百有用，不过有的题这样都可以提升效率）</p><p>例题：</p><p><img src="image-20230309011546633.png" alt="image-20230309011546633"></p><p><img src="image-20230309011652302.png" alt="image-20230309011652302"></p><h4 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h4><p>一般都是这样：<img src="image-20230309012132471.png" alt="image-20230309012132471"></p><p>有的图的说明不会给的很详细的数据存储，这个时候可以在你找到的词语后面<strong>加上（表&#x2F;文件）</strong>。</p><p>例题：</p><p><img src="image-20230309014715174.png" alt="image-20230309014715174"></p><h4 id="问题三："><a href="#问题三：" class="headerlink" title="问题三："></a>问题三：</h4><p>一般是这些形式：</p><p><img src="image-20230309014830625.png" alt="image-20230309014830625"></p><p>这三种形式有三种不同的方法，后面有讲。</p><h5 id="方法一：父图子图平衡（比较简单）"><a href="#方法一：父图子图平衡（比较简单）" class="headerlink" title="方法一：父图子图平衡（比较简单）"></a>方法一：父图子图平衡（比较简单）</h5><p>​     因为子图是父图的细致分支，所以父图有的外部实体，子图也有，而且子图和父图都有一样的数据流。如果子图和父图一样都有指向同样实体的数据流，那么就可以排除掉。</p><p>通过对比，找到缺失的数据流：（如果找不到缺失，说明这个方法行不通）</p><p><img src="image-20230309020355554.png" alt="image-20230309020355554"></p><h5 id="方法二：加工既有输入数据流也有输出数据流"><a href="#方法二：加工既有输入数据流也有输出数据流" class="headerlink" title="方法二：加工既有输入数据流也有输出数据流"></a>方法二：加工既有输入数据流也有输出数据流</h5><p>需要看<strong>加工是否有输入数据流和输出数据流（缺一不可，加工一定有输入和输出数据流，不然就有问题）</strong></p><p>好像这样：（说明运送5有问题）<img src="image-20230309021254248.png" alt="image-20230309021254248"></p><h5 id="方法三：数据守恒"><a href="#方法三：数据守恒" class="headerlink" title="方法三：数据守恒"></a>方法三：数据守恒</h5><p>（阅读理解）看说明怎么描述的，看看功能的描述是不是和子图加工的图示输入输出数据流一样的，不是一样就有问题。</p><h5 id="问题三答题格式："><a href="#问题三答题格式：" class="headerlink" title="问题三答题格式："></a>问题三答题格式：</h5><h5 id><a href="#" class="headerlink" title></a><img src="image-20230309023326332.png" alt="image-20230309023326332"></h5><h1 id="下午大题二：数据库（15分）"><a href="#下午大题二：数据库（15分）" class="headerlink" title="下午大题二：数据库（15分）"></a>下午大题二：数据库（15分）</h1><h5 id="问题一：补充e-r图中缺失的联系"><a href="#问题一：补充e-r图中缺失的联系" class="headerlink" title="问题一：补充e-r图中缺失的联系"></a>问题一：补充e-r图中缺失的联系</h5><p><img src="image-20230315163235909.png" alt="image-20230315163235909"></p><h6 id="一定要看题目中的说明，不要想太多，说明中说出了一个什么有多个什么的就标记好；"><a href="#一定要看题目中的说明，不要想太多，说明中说出了一个什么有多个什么的就标记好；" class="headerlink" title="一定要看题目中的说明，不要想太多，说明中说出了一个什么有多个什么的就标记好；"></a>一定要看题目中的说明，不要想太多，说明中说出了一个什么有多个什么的就标记好；</h6><p>问题二：关系模式和主键外键</p><p><img src="image-20230315164639035.png" alt="image-20230315164639035"></p><p><img src="image-20230315203955160.png" alt="image-20230315203955160"></p><p><img src="image-20230315212415679.png" alt="image-20230315212415679"></p><h6 id="问题二：补充关系模式的空"><a href="#问题二：补充关系模式的空" class="headerlink" title="问题二：补充关系模式的空"></a>问题二：补充关系模式的空</h6><p>根据联系补充关系模式。</p><h4 id="看er图的联系，如果er图中有关联，那么空缺的关系模式要么说明给出，要么就在er图中填其他实体的主码，也就是外键。"><a href="#看er图的联系，如果er图中有关联，那么空缺的关系模式要么说明给出，要么就在er图中填其他实体的主码，也就是外键。" class="headerlink" title="看er图的联系，如果er图中有关联，那么空缺的关系模式要么说明给出，要么就在er图中填其他实体的主码，也就是外键。"></a>看er图的联系，如果er图中有关联，那么空缺的关系模式要么说明给出，要么就在er图中填其他实体的主码，也就是外键。</h4><h1 id="下午题六：设计模式"><a href="#下午题六：设计模式" class="headerlink" title="下午题六：设计模式"></a>下午题六：设计模式</h1><p>（看懂这些设计模式的应用，做大题时候就会方便不少而且八九不离十那个空）</p><p><img src="image-20230422181650900-16821586127411.png" alt="image-20230422181650900"></p><h3 id="抽象工厂模式："><a href="#抽象工厂模式：" class="headerlink" title="抽象工厂模式："></a>抽象工厂模式：</h3><p><img src="image-20230422181728091-16821586494113.png" alt="image-20230422181728091"></p><p><img src="image-20230422181927340-16821587684755.png" alt="image-20230422181927340"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProductA</span> <span class="variable">productA</span> <span class="operator">=</span> factory1.createProductA();<span class="comment">//等于new ProductA1()</span></span><br><span class="line">        productA.info();</span><br><span class="line"></span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProductB</span> <span class="variable">productB</span> <span class="operator">=</span> factory2.createProductB();<span class="comment">//等于new ProductB2()</span></span><br><span class="line">        productB.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ProductA <span class="title function_">createProductA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> ProductB <span class="title function_">createProductB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory1</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductA <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductB <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory2</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductA <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductB <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span> <span class="keyword">implements</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span> <span class="keyword">implements</span> <span class="title class_">ProductA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span> <span class="keyword">implements</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span> <span class="keyword">implements</span> <span class="title class_">ProductB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器模式："><a href="#生成器模式：" class="headerlink" title="生成器模式："></a>生成器模式：</h3><p><img src="image-20230422190946772-16821617880543.png" alt="image-20230422190946772"></p><p>举例子来理解就是：根据套餐来创造产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Builder</span> <span class="variable">builder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder1</span>();</span><br><span class="line">        director.Construct(builder1);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product1</span> <span class="operator">=</span> builder1.getResult();</span><br><span class="line">        product1.show();</span><br><span class="line"></span><br><span class="line">        <span class="type">Builder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder2</span>();</span><br><span class="line">        director.Construct(builder2);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product2</span> <span class="operator">=</span> builder2.getResult();</span><br><span class="line">        product2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Construct</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        builder.BuildPart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">getResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder1</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span> &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder2</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span> &#123;</span><br><span class="line">        product.Add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        product.Add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    List&lt;String&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Add</span><span class="params">(String part)</span> &#123;</span><br><span class="line">        parts.add(part);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;产品的组成：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : parts)</span><br><span class="line">            System.out.print(s + <span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><img src="img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/image-20230422194235078-16821637572881-16821637605903.png" alt="image-20230422194235078"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">2022</span>, <span class="number">5.28</span>);</span><br><span class="line">        System.out.println(product1.getId() + <span class="string">&quot; &quot;</span> + product1.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Product product2 = new Product(2022, 5.28);</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product2</span> <span class="operator">=</span> (Product) product1.Clone();</span><br><span class="line">        System.out.println(product2.getId() + <span class="string">&quot; &quot;</span> + product2.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product3</span> <span class="operator">=</span> (Product) product1.Clone();</span><br><span class="line">        System.out.println(product3.getId() + <span class="string">&quot; &quot;</span> + product3.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Clone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        object.id = <span class="built_in">this</span>.id;</span><br><span class="line">        object.price = <span class="built_in">this</span>.price;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配器模式："><a href="#适配器模式：" class="headerlink" title="适配器模式："></a>适配器模式：</h3><p><img src="img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/image-20230422195306248-16821643875695.png" alt="image-20230422195306248"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class AdapterPattern &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        USB usb = new Adapter();</span><br><span class="line">        usb.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class USB &#123;</span><br><span class="line">    public void Request() &#123;</span><br><span class="line">        System.out.println(&quot;USB数据线&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Adapter extends USB &#123;</span><br><span class="line">    private TypeC typeC = new TypeC();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void Request() &#123;</span><br><span class="line">        typeC.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TypeC &#123;</span><br><span class="line">    public void SpecificRequest() &#123;</span><br><span class="line">        System.out.println(&quot;Type-C数据线&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译的时候看左边，运行的时候看右边。</strong></p><h3 id="桥接模式："><a href="#桥接模式：" class="headerlink" title="桥接模式："></a>桥接模式：</h3><p><img src="img/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/image-20230422200953721-16821653953797.png" alt="image-20230422200953721"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BridgePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productA1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productA2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        <span class="type">Color</span> <span class="variable">red</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Red</span>();</span><br><span class="line"></span><br><span class="line">        productA1.setName(<span class="string">&quot;产品A1&quot;</span>);</span><br><span class="line">        productA1.setColor(red);</span><br><span class="line">        productA1.Operation();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Blue</span> <span class="variable">blue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line">        productA2.setName(<span class="string">&quot;产品A2&quot;</span>);</span><br><span class="line">        productA2.setColor(blue);</span><br><span class="line">        productA2.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">extends</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span> &#123;</span><br><span class="line">        color.OperationImp(<span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OperationImp</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OperationImp</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：红色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OperationImp</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;：蓝色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/01/21/Spring/"/>
      <url>/2023/01/21/Spring/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Spring-ssm框架基础"><a href="#初识Spring-ssm框架基础" class="headerlink" title="初识Spring(ssm框架基础)"></a>初识Spring(ssm框架基础)</h2><h3 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h3><ul><li>Spring是一个为简化企业级开发而生的<strong>开源框架</strong>。</li><li>Spring是一个<strong>IOC(DI)<strong>和</strong>AOP</strong>容器框架。</li><li>IOC全称：Inversion of Control【控制反转】<ul><li>将对象【万物皆对象】控制权交给Spring</li></ul></li><li>DI全称：(Dependency Injection)：依赖注入</li><li>AOP全称：Aspect-Oriented Programming，面向切面编程</li><li>官网：<a href="https://spring.io/">https://spring.io/</a></li><li><img src="image-20230122000417628-167552769427114.png"></li><li><img src="image-20230122000553274-167552769427115.png" alt="image-20230122000553274"></li></ul><h3 id="搭建Spring框架"><a href="#搭建Spring框架" class="headerlink" title="搭建Spring框架"></a>搭建Spring框架</h3><ul><li><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring-context--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入junit4.12--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写核心配置文件</p><ul><li><p>配置文件名称：<strong>applicationContext.xml【beans.xml或spring.xml】</strong></p></li><li><p>配置文件路径：<strong>src&#x2F;main&#x2F;resources</strong></p></li><li><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将对象装配到IOC容器中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的id是唯一的，不能有重复，不然获取bean对象的时候就会报错--&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuZhenzhong&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhenzhong&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用核心类库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSpring</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//使用spring之前</span></span><br><span class="line">        <span class="comment">//Student student = new Student();</span></span><br><span class="line">        <span class="comment">//使用spring之后</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) ioc.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring特性"><a href="#Spring特性" class="headerlink" title="Spring特性"></a>Spring特性</h3><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API。<ul><li>例如我们使用servlet的时候需要导入servlet需要的类，并且要实现他的方法，而spring则不需要</li></ul></li><li>容器：Spring是一个容器，因为它包含并且管理应用对象的生命周期。</li><li>组件化：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring 自身也提供了表述层的SpringMVC和持久层的JDBCTemplate）。</li></ul><h3 id="SPring中getBean的三种方式"><a href="#SPring中getBean的三种方式" class="headerlink" title="SPring中getBean的三种方式"></a>SPring中getBean的三种方式</h3><ul><li><p>getBean(String beanId): 通过beanId获取对象</p><ul><li><p>不足：需要强制类型转换，不灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//方式一获取</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) ioc.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">        System.out.println(stu);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>getBean(Class clazz)：通过Class方式获取对象</p><ul><li><p>不足：容器中有多个相同类型bean的时候，会报如下错误：</p><p><img src="img/Spring/image-20221228113540763.png" alt="image-20221228113540763"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> ioc.getBean(Student.class);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>getBean(String beanId,Clazz clazz)：通过beanId和Class获取对象</strong></p><ul><li>推荐使用</li></ul></li></ul><blockquote><p>注意：框架默认都是通过无参构造器，帮助我们创建对象。</p><p>所以：如提供对象的构造器时，一定添加无参构造器</p></blockquote><ul><li>属性<ul><li>id：bean的唯一标识</li><li>class：定义bean的类型【class全类名】</li></ul></li><li>子标签<ul><li>property：为对象中属性赋值【set注入】<ul><li>name属性：设置属性名称</li><li>value属性：设置属性数值</li></ul></li></ul></li></ul><h2 id="Spring底层IOC实现"><a href="#Spring底层IOC实现" class="headerlink" title="Spring底层IOC实现"></a>Spring底层IOC实现</h2><p><img src="image-20230122113540589-167552769427116.png" alt="image-20230122113540589"></p><blockquote><p>IOC：将对象的控制器反转给Spring</p><p>底层原理1：</p><p><img src="image-20230122113110387-167552769427120.png" alt="image-20230122113110387"></p><p><img src="image-20230122113450060-167552769427117.png" alt="image-20230122113450060"></p></blockquote><p>底层原理2：</p><p><img src="image-20230122114236295-167552769427118.png" alt="image-20230122114236295"></p><p><img src="image-20230122152655886-167552769427119.png" alt="image-20230122152655886"></p><h4 id="BeanFactory与ApplicationContexet"><a href="#BeanFactory与ApplicationContexet" class="headerlink" title="BeanFactory与ApplicationContexet"></a>BeanFactory与ApplicationContexet</h4><ul><li>BeanFactory：IOC容器的基本实现，是Spring内部的使用接口，是面向Spring本身的，不是提供给开发人员使用的。</li><li>ApplicationContext：BeanFactory的子接口，提供了更多高级特性。面向Spring的使用者，几乎所有场合都使用ApplicationContext而不是底层的BeanFactory。</li></ul><h3 id="图解IOC类的结构"><a href="#图解IOC类的结构" class="headerlink" title="图解IOC类的结构"></a>图解IOC类的结构</h3><p><img src="image-20220326090009379.png" alt="image-20220326090009379"></p><p>BeanFactory：Spring底层IOC实现【面向Spring框架】</p><ul><li><p>…</p><ul><li><p><strong>ApplicationContext</strong>：面向程序员</p><ul><li><p><strong>ConfigurableApplicationContext：提供关闭或刷新容器对象方法</strong></p><ul><li><p>…</p><ul><li><p><strong>ClassPathXmlApplicationContext：基于类路径检索xml文件</strong></p></li><li><p><strong>AnnotationConfigApplicationContext</strong>：基于注解创建容器对象</p></li><li><p>FileSystemXmlApplicationContext：基于文件系统检索xml文件</p></li></ul></li></ul></li></ul></li></ul></li></ul><p><img src="image-20230122205915154-167552769427121.png" alt="image-20230122205915154"></p><p><img src="img/Spring/image-20230122205953437-167552769427122.png" alt="image-20230122205953437"></p><p><img src="image-20230124162531630-167552769427123.png" alt="image-20230124162531630"></p><p>俩种不同方法</p><p><img src="image-20230124163443287-167552769427125.png" alt="image-20230124163443287"></p><p><img src="image-20230124164510625-167552769427124.png" alt="image-20230124164510625"></p><p><img src="image-20230124170448859-167552769427126.png" alt="image-20230124170448859"></p><h2 id="Spring依赖注入数值问题【重点】"><a href="#Spring依赖注入数值问题【重点】" class="headerlink" title="Spring依赖注入数值问题【重点】"></a>Spring依赖注入数值问题【重点】</h2><h3 id="字面量数值"><a href="#字面量数值" class="headerlink" title="字面量数值"></a>字面量数值</h3><ul><li>数据类型：基本数据类型及包装类、String</li><li>语法：value属性或value标签</li></ul><h3 id="CDATA区"><a href="#CDATA区" class="headerlink" title="CDATA区"></a>CDATA区</h3><ul><li>语法：&lt;![CDATA[]]&gt;</li><li>作用：在xml中定义特殊字符时，使用CDATA区</li></ul><h3 id="外部已声明bean及级联属性赋值"><a href="#外部已声明bean及级联属性赋值" class="headerlink" title="外部已声明bean及级联属性赋值"></a>外部已声明bean及级联属性赋值</h3><ul><li><p>语法：ref</p><ul><li>前提要在bean的外部在声明一个外部bean</li></ul></li><li><p>注意：级联属性更改数值会影响外部声明bean【ref赋值的是引用】</p></li><li><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--外部已声明bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;研发部&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试外部bean引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;li&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123@qq&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当我们赋值的对象如果不是基本数据类型，也不是包装类或者String的话这时候就不能使用字面量数值，需要外部声明bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><img src="01/21/Spring/image-20220326102128821.png" class title="image-20220326102128821"><h3 id="内部bean"><a href="#内部bean" class="headerlink" title="内部bean"></a>内部bean</h3><ul><li><p>概述</p><ul><li>内部类：在一个类中完整定义另一个类，当前类称之为内部类</li><li>内部bean：在一个bean中完整定义另外一个bean，当前bean称之为内部bean</li><li>作用：可以不用像外部bean一样因为级联属性的赋值，而导致属性发生更改</li><li>注意：内部bean不能通过ioc容器获得。</li></ul></li><li><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;liu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qq&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1231@qq.com&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;人事部&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul><li><p>List</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    测试集合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;管理部&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;employees&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;li&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;liu&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    测试list及list的提取 注意util的名称空间引入的时候要正确--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;empList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;li&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;liu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;运营部&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;empList&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    测试map--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;采购部门&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;li&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;liu&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试map提取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;li&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;liu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept6&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;后勤部门&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;map&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring依赖注入方式-【基于XML】"><a href="#Spring依赖注入方式-【基于XML】" class="headerlink" title="Spring依赖注入方式 【基于XML】"></a>Spring依赖注入方式 【基于XML】</h2><blockquote><p>为属性赋值的方法</p><ul><li>通过构造器赋值</li><li>通过set方法赋值</li><li>反射</li></ul></blockquote><h3 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵凯诺&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>语法：通过&lt;property&gt;标签</li></ul><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;101&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;超人&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>语法：通过&lt;constructor-arg&gt;标签，这里的参数数量要与构造器定义的数量一致</li></ul><h3 id="p名称空间注入"><a href="#p名称空间注入" class="headerlink" title="p名称空间注入"></a>p名称空间注入</h3><blockquote><p>导入名称空间：xmlns:p&#x3D;”<a href="http://www.springframework.org/schema/p">http://www.springframework.org/schema/p</a>“</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Student&quot;</span> <span class="attr">p:stuId</span>=<span class="string">&quot;11&quot;</span> <span class="attr">p:stuName</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>语法：&lt;bean p:xxx&gt;(他的底层逻辑也是set注入)</p><h2 id="Spring管理第三方的bean"><a href="#Spring管理第三方的bean" class="headerlink" title="Spring管理第三方的bean"></a>Spring管理第三方的bean</h2><h3 id="Spring管理druid步骤"><a href="#Spring管理druid步骤" class="headerlink" title="Spring管理druid步骤"></a>Spring管理druid步骤</h3><ul><li><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入druid的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入mysql的jar包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;8.0.26&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写db.properties配置文件</p></li><li><p>编写applicationContext.xml（来管理druid）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    装配数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext_durid.xml&quot;</span>);</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;dataSource&quot;</span>, DruidDataSource.class);</span><br><span class="line">        <span class="type">DruidPooledConnection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring中FactoryBean"><a href="#Spring中FactoryBean" class="headerlink" title="Spring中FactoryBean"></a>Spring中FactoryBean</h2><h3 id="Spring中两种bean"><a href="#Spring中两种bean" class="headerlink" title="Spring中两种bean"></a>Spring中两种bean</h3><ul><li>一种是普通bean</li><li>另一种是工厂bean【FactoryBean】<ul><li>作用：如需我们程序员参数到bean的创建时，使用FactoryBean</li><li>特点：工厂bean设置的类型可以和返回的类型不一样，其返回的类型是通过该工厂bean的getObject方法指定。</li></ul></li></ul><h3 id="FactoryBean使用步骤"><a href="#FactoryBean使用步骤" class="headerlink" title="FactoryBean使用步骤"></a>FactoryBean使用步骤</h3><ul><li><p>实现FactoryBean接口</p></li><li><p>重写方法【三个】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Dept <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dept</span>(<span class="number">1</span>, <span class="string">&quot;研发部门&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Dept.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>装配工厂bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.FactoryBean.MyFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext_factory.xml&quot;</span>);</span><br><span class="line">        <span class="type">Dept</span> <span class="variable">myFactoryBean</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;myFactoryBean&quot;</span>, Dept.class);</span><br><span class="line">        System.out.println(myFactoryBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring中bean的作用域"><a href="#Spring中bean的作用域" class="headerlink" title="Spring中bean的作用域"></a>Spring中bean的作用域</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>在bean标签中添加属性：scope属性即可</li></ul><h3 id="四个作用域"><a href="#四个作用域" class="headerlink" title="四个作用域"></a>四个作用域</h3><ul><li><p>singleton【默认值】：单例【在容器中只有一个对象，不管从容器中获取几次拿到的都是同一个对象】</p><ul><li><p>创建对象时机：创建容器对象时，创建对象执行</p><p><img src="image-20221229113406701.png" alt="image-20221229113406701"></p></li></ul></li><li><p>prototype：多例【在容器中有多个对象，拿到的都是不同的对象】</p><ul><li><p>对象创建时机：getBean()方法被调用时，创建对象执行</p><p><img src="image-20221229113601940.png" alt="image-20221229113601940"></p></li></ul></li><li><p>request：请求域</p><ul><li>当前请求有效，离开请求域失效</li><li>当前请求：<strong>URL不变即为当前请求</strong></li></ul></li><li><p>session：会话域</p><ul><li>当前会话有效，离开当前会话失效</li><li>当前会话：<strong>当前浏览器不关闭不更换即为当前对话</strong></li></ul></li></ul><h2 id="Spring中bean的生命周期"><a href="#Spring中bean的生命周期" class="headerlink" title="Spring中bean的生命周期"></a>Spring中bean的生命周期</h2><h3 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h3><p>① 通过构造器或工厂方法创建bean实例</p><p>② 为bean的属性设置值和对其他bean的引用</p><p>③ 调用bean的初始化方法</p><p>④  bean可以使用了</p><p>⑤ <strong>当容器关闭时</strong>，调用bean的销毁方法</p><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5.bean被销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.pojo.Student&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initStudent&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stuName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestLife</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext_life.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;4.使用student&quot;</span>+student);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="bean的后置处理器"><a href="#bean的后置处理器" class="headerlink" title="bean的后置处理器"></a>bean的后置处理器</h3><ul><li>作用：在调用初始化方法前后对bean进行额外的处理。</li><li>实现：<ul><li><p>实现BeanPostProcessor接口</p></li><li><p>重写方法</p><ul><li>postProcessBeforeInitialization(Object, String)：在bean的初始化之前执行</li><li>postProcessAfterInitialization(Object, String)：在bean的初始化之后执行</li></ul></li><li><p>在容器中装配后置处理器</p></li><li><p>注意：装配后置处理器会为<strong>当前容器中每个bean</strong>均装配，不能为局部bean装配后置处理器</p></li></ul></li></ul><h3 id="添加后置处理器后bean的生命周期"><a href="#添加后置处理器后bean的生命周期" class="headerlink" title="添加后置处理器后bean的生命周期"></a>添加后置处理器后bean的生命周期</h3><p>① 通过构造器或工厂方法创建bean实例</p><p>② 为bean的属性设置值和对其他bean的引用</p><p>postProcessBeforeInitialization(Object, String)：在bean的初始化之前执行</p><p>③ 调用bean的初始化方法</p><p>postProcessAfterInitialization(Object, String)：在bean的初始化之后执行</p><p>④  bean可以使用了</p><p>⑤ <strong>当容器关闭时</strong>，调用bean的销毁方法</p><h2 id="Spring中的自动装配【基于XML】"><a href="#Spring中的自动装配【基于XML】" class="headerlink" title="Spring中的自动装配【基于XML】"></a>Spring中的自动装配【基于XML】</h2><h3 id="Spring中两种装配方式"><a href="#Spring中两种装配方式" class="headerlink" title="Spring中两种装配方式"></a>Spring中两种装配方式</h3><ul><li>手动装配</li><li>自动装配</li></ul><h3 id="Spring自动装配的语法及规则"><a href="#Spring自动装配的语法及规则" class="headerlink" title="Spring自动装配的语法及规则"></a>Spring自动装配的语法及规则</h3><ul><li><p>在bean标签中添加属性：Autowire即可</p><ul><li><p>byName：对象中属性名称与容器中的beanId进行匹配，如果属性名与beanId数值一致，则自动装配成功</p><p><img src="image-20221230095945853.png" alt="image-20221230095945853"></p></li><li><p>byType：对象中的<strong>属性的类型</strong>与容器中的<strong>class</strong>进行匹配，<strong>如果类型相同且唯一则匹配成功</strong></p><ul><li>匹配0个：未装配</li><li>匹配多个，会报错</li></ul><p><img src="image-20221230100614833.png" alt="image-20221230100614833"></p></li></ul></li><li><p>注意：基于XML方式的自动装配，只能装配非字面量数值</p></li><li><p>总结</p><ul><li>基于xml自动装配，底层使用set注入</li><li>最终：不建议使用byName，byType，<strong>建议使用注解方式自动装配</strong></li></ul></li></ul><h2 id="Spring中注解【非常重要】"><a href="#Spring中注解【非常重要】" class="headerlink" title="Spring中注解【非常重要】"></a>Spring中注解【非常重要】</h2><h3 id="使用注解将对象装配到IOC容器中"><a href="#使用注解将对象装配到IOC容器中" class="headerlink" title="使用注解将对象装配到IOC容器中"></a>使用注解将对象装配到IOC容器中</h3><blockquote><p>约定：约束&gt;配置【<strong>注解&gt;XML</strong>】&gt;代码</p><p>位置：在类上面标识</p><p>注意：</p><ul><li>Spring本身不区分四个注解【四个注解本质是一样的都是@Component】,提供四个注解的目的只有一个：提高代码的可以读性</li><li>只用注解装配对象，默认将类名首字母小写作为beanId</li><li>可以使用value属性，设置beanId;当注解中只使用一个value属性时，value关键字可以省略</li></ul></blockquote><ul><li><p>​装配对象四个注解</p><ul><li>@Component：装配<strong>普通组件</strong>到IOC容器</li><li>@Repository：装配<strong>持久化层组件</strong>到IOC容器</li><li>@Service：装配<strong>业务逻辑层组件</strong>到IOC容器</li><li>@Controller：装配<strong>控制层|表示层组件</strong>到IOC容器</li></ul></li><li><p>使用注解步骤</p><ul><li><p>导入相关jar包【spring-context】</p></li><li><p>开启组件扫描【默认扫描，当钱包及其子包都会扫描】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;spring&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解标识组件</p></li></ul></li></ul><h3 id="使用注解装配对象中属性【自动装配】"><a href="#使用注解装配对象中属性【自动装配】" class="headerlink" title="使用注解装配对象中属性【自动装配】"></a>使用注解装配对象中属性【自动装配】</h3><ul><li><p><strong>@Autowired注解</strong></p><ul><li><p>作用：自动装备对象中属性</p></li><li><p>装配位置：要装配属性的上方</p></li><li><p>装配原理：反射机制</p></li><li><p>装配方式</p><ul><li><p><strong>先按照byType进行匹配</strong></p><ul><li><p>匹配1个：匹配成功，正常使用</p></li><li><p>匹配0个：</p><ul><li><p>默认【@Autowired(<strong>required&#x3D;true</strong>)】报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>@Autowired(<strong>required&#x3D;false</strong>)，不会报错</p></li></ul></li><li><p>匹配多个</p><ul><li><p><strong>再按照byName进行唯一筛选</strong></p><ul><li><p>筛选成功【对象中属性名称&#x3D;&#x3D;beanId】,正常使用</p></li><li><p>筛选失败【对象中属性名称!&#x3D;beanId】,报如下错误:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//expected single matching bean but found 2: deptDao,deptDao2</span></span><br></pre></td></tr></table></figure><p>还是按照类型匹配重复的错误，报错</p></li></ul></li></ul></li></ul></li></ul></li><li><p>@Autowired中required属性</p><ul><li>true：表示被标识的属性<strong>必须装配数值</strong>，如未装配，<strong>会报错</strong>。</li><li>false：表示被标识的属性<strong>不必须装配数值</strong>，如未装配，<strong>不会报错</strong>。</li></ul></li></ul></li><li><p>@Qualifier</p><ul><li>作用：配合@Autowired一起使用，将<strong>设置beanId名称装配到属性中</strong>（指定固定的benaId进行装配）</li><li>注意：不能单独使用，需要与@Autowired一起使用</li></ul></li><li><p>@Value</p><ul><li>作用：装配对象中的属性（只能装配字面量值，为bean对象的字面量属性进行初始化，后面可以改）</li></ul></li></ul><h2 id="Spring中组件扫描"><a href="#Spring中组件扫描" class="headerlink" title="Spring中组件扫描"></a>Spring中组件扫描</h2><h3 id="默认使用情况"><a href="#默认使用情况" class="headerlink" title="默认使用情况"></a>默认使用情况</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启组件扫描</span></span><br><span class="line"><span class="comment">        base-package：设置扫描注解包名【当前包及其子包】</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包含扫描"><a href="#包含扫描" class="headerlink" title="包含扫描"></a>包含扫描</h3><p>注意：</p><ul><li>使用包含扫描之前，必须设置use-default-filters&#x3D;”false”【关闭当前包及其子包的扫描】</li><li>type<ul><li>annotation：设置被扫描<strong>注解</strong>的全类名</li><li>assignable：设置被扫描<strong>实现类</strong>的全类名</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;spring&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;spring.controller.DeptController&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排除扫描"><a href="#排除扫描" class="headerlink" title="排除扫描"></a>排除扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;spring&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;spring.controller,DeptController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring完全注解开发【0配置】"><a href="#Spring完全注解开发【0配置】" class="headerlink" title="Spring完全注解开发【0配置】"></a>Spring完全注解开发【0配置】</h2><h3 id="完全注解开发步骤"><a href="#完全注解开发步骤" class="headerlink" title="完全注解开发步骤"></a>完全注解开发步骤</h3><ol><li><p>创建配置类</p></li><li><p>在class上面添加注解</p><ul><li>@Configuration：标识当前类是一个配置类，作用：代替XML配置文件</li><li>@ComponentScan：设置组件扫描当前包及其子包</li></ul></li><li><p>使用AnnotationConfigApplicationContext容器对象</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;spring&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test0XML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">DeptServiceImp</span> <span class="variable">deptServiceImp</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;deptServiceImp&quot;</span>, DeptServiceImp.class);</span><br><span class="line">        <span class="type">DeptController</span> <span class="variable">deptController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;deptController&quot;</span>, DeptController.class);</span><br><span class="line">        System.out.println(deptController);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Spring集成junit4"><a href="#Spring集成junit4" class="headerlink" title="Spring集成junit4"></a>Spring集成junit4</h2><h3 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h3><ol><li><p>导入jar包</p><ul><li><p>spring-test-5.3.1.jar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>指定Spring的配置文件的路径</p><ul><li>【@ContextConfiguration】</li></ul></li><li><p>指定Spring环境下运行Junit4的运行器</p><ul><li>@RunWith</li></ul></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJunit</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptServiceImp deptServiceImp;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        deptServiceImp.add(<span class="keyword">new</span> <span class="title class_">Dept</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AOP前奏"><a href="#AOP前奏" class="headerlink" title="AOP前奏"></a>AOP前奏</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ul><li><p>代理模式：我们需要做一件事情，又不期望自己亲力亲为，此时，就可以找一个代理【中介】</p></li><li><p>我们【目标对象】与中介【代理对象】不能相互转换，因为是平级的关系</p><p><img src="image-20220328152852821.png" alt="image-20220328152852821"></p></li></ul><h3 id="为什么需要代理【程序中】"><a href="#为什么需要代理【程序中】" class="headerlink" title="为什么需要代理【程序中】"></a>为什么需要代理【程序中】</h3><ul><li><p>需求：实现【加减乘除】计算器类</p></li><li><p>在加减乘除方法中，添加日志功能【在计算之前，记录日志。在计算之后，显示结果。】</p></li><li><p>实现后发现问题如下</p><ul><li><p>日志代码<strong>比较分散</strong>，可以提取日志类</p></li><li><p>日志代码<strong>比较混乱</strong>，日志代码【非核心业务代码】与加减乘除方法【核心业务代码】书写一处</p><p><img src="img/Spring/image-20221231101558720.png" alt="image-20221231101558720"></p></li></ul></li><li><p>总结：在核心业务代码中，<strong>需要添加日志功能，但不期望在核心业务代码中书写日志代码</strong>。</p><ul><li>此时：使用代理模式解决问题【<strong>先将日志代码横向提取到日志类中，再动态织入回到业务代码中</strong>】</li></ul></li></ul><h3 id="手动实现动态代理环境"><a href="#手动实现动态代理环境" class="headerlink" title="手动实现动态代理环境"></a>手动实现动态代理环境</h3><ul><li>实现方式<ul><li>基于接口实现动态代理： <strong>JDK动态代理</strong></li><li>基于继承实现动态代理： <strong>Cglib</strong>、Javassist动态代理</li></ul></li><li>实现动态代理关键步骤<ul><li>一个类：<strong>Proxy</strong><ul><li>概述：Proxy代理类的基类【类似Object】</li><li>作用：newProxyInstance()：创建代理对象</li></ul></li><li>一个接口：InvocationHandler<ul><li>概述：实现【动态织入效果】关键接口</li><li>作用：invoke()，执行invoke()实现动态织入效果</li></ul></li></ul></li></ul><h3 id="手动实现动态代理关键步骤"><a href="#手动实现动态代理关键步骤" class="headerlink" title="手动实现动态代理关键步骤"></a>手动实现动态代理关键步骤</h3><blockquote><p>注意：代理对象与实现类【目标对象】是“兄弟”关系，不能相互转换</p></blockquote><ul><li><p>创建类【为了实现创建代理对象工具类】</p></li><li><p>提供属性【目标对象：实现类】</p></li><li><p>提供方法【创建代理对象】</p></li><li><p>提供有参构造器【避免目标对为空】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标对象【目标客户】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyProxy</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目标对象的，代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyObj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            类加载器【ClassLoader loader】,目标对象类加载器</span></span><br><span class="line"><span class="comment">            目标对象实现接口：Class&lt;?&gt;[] interfaces,目标对象实现所有接口</span></span><br><span class="line"><span class="comment">            InvocationHandler h</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        proxyObj = Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="comment">//执行invoke()实现动态织入效果</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">//获取方法名【目标对象】</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">                <span class="comment">//执行目标方法之前，添加日志</span></span><br><span class="line">                MyLogging.beforeMethod(methodName,args);</span><br><span class="line">                <span class="comment">//触发目标对象目标方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                <span class="comment">//执行目标方法之后，添加日志</span></span><br><span class="line">                MyLogging.afterMethod(methodName,rs);</span><br><span class="line">                <span class="keyword">return</span> rs;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxyObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    class invocationImpl implements InvocationHandler&#123;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeforeAop</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int add = calc.add(1, 2);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;add = &quot; + add);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标对象</span></span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcImpl</span>();</span><br><span class="line">        <span class="comment">//代理工具类</span></span><br><span class="line">        <span class="type">MyProxy</span> <span class="variable">myProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyProxy</span>(calc);</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calcProxy</span> <span class="operator">=</span> (Calc)myProxy.getProxyObject();</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line"><span class="comment">//        int add = calcProxy.add(1, 2);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> calcProxy.div(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring中AOP【重点】"><a href="#Spring中AOP【重点】" class="headerlink" title="Spring中AOP【重点】"></a>Spring中AOP【重点】</h2><h3 id="AspectJ框架【AOP框架】"><a href="#AspectJ框架【AOP框架】" class="headerlink" title="AspectJ框架【AOP框架】"></a>AspectJ框架【AOP框架】</h3><ul><li>AspectJ是Java社区里最完整最流行的AOP框架。</li><li>在Spring2.0以上版本中，可以使用基于AspectJ注解或基于XML配置的AOP。</li></ul><h4 id="使用AspectJ步骤"><a href="#使用AspectJ步骤" class="headerlink" title="使用AspectJ步骤"></a>使用AspectJ步骤</h4><ol><li><p>添加jar包支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        添加AspectJ--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spirng-aspects的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li>开启组件扫描</li><li>开启AspectJ注解支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;AOP&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将日志类上面添加注解</p><ul><li>@Component：将当前类标识为一个组件</li><li>@Aspect：将当前类标识为<strong>切面类</strong>【非核心业务提取类】</li></ul></li><li><p>将日志类中的方法中添加<strong>通知注解</strong></p><ul><li>@Before</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="meta">@Component</span>      <span class="comment">//将当前类标识为一个组件</span></span><br><span class="line"><span class="meta">@Aspect</span>         <span class="comment">//将当前类标识为【切面类】【非核心业务提取类】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogging</span> &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution( public int AOP.imp.CalcImp.add(int , int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;,参数&quot;</span>+ Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(String methodName,Object rs)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;结果:&quot;</span>+rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBefore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calc</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;calc&quot;</span>, Calc.class);</span><br><span class="line">        calc.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spring中AOP概述"><a href="#Spring中AOP概述" class="headerlink" title="Spring中AOP概述"></a>Spring中AOP概述</h3><ul><li>AOP：Aspect-Oriented Programming，面向切面编程【面向对象一种补充】【一种横向的扩展】<ul><li>优势：<ul><li>解决代码<strong>分散问题</strong></li><li>解决代码<strong>混乱问题</strong></li></ul></li></ul></li><li>OOP：Object-Oriented Programming，面向对象编程【一种纵向的扩展】</li></ul><h3 id="Spring中AOP相关术语"><a href="#Spring中AOP相关术语" class="headerlink" title="Spring中AOP相关术语"></a>Spring中AOP相关术语</h3><ol><li>横切关注点：非核心业务代码【日志】，称之为横切关注点</li><li><strong>切面(Aspect)<strong>：将横切关注点提取到类中，这个类称之为</strong>切面类</strong></li><li>**通知(Advice)**：将横切关注点提取到类中之后，横切关注点更名为：通知</li><li>目标(Target)：目标对象，指的是需要被代理的对象【实现类（CalcImpl）】</li><li>代理(Proxy)：代理对象可以理解为：中介</li><li>连接点(Joinpoint)：通知方法需要指定通知位置，这个位置称之为：连接点【通知之前】</li><li>**切入点(pointcut)**：通知方法需要指定通知位置，这个位置称之为：切入点【通知之后】</li></ol><h2 id="AspectJ详解"><a href="#AspectJ详解" class="headerlink" title="AspectJ详解"></a>AspectJ详解</h2><h3 id="AspectJ中切入点表达式"><a href="#AspectJ中切入点表达式" class="headerlink" title="AspectJ中切入点表达式"></a>AspectJ中切入点表达式</h3><ul><li><p>语法：@Before(value&#x3D;“execution(权限修饰符 返回值 包名.类名.方法名（参数类型) ”)</p></li><li><p>通配符</p><ul><li><p>【*】：</p><p>​【*】:可以代表任意权限修饰符&amp;返回值类型</p><p>​【*】：可以代表任意包名、任意类名、任意方法名</p><p><img src="img/Spring/image-20221231150957545.png" alt="image-20221231150957545"></p></li><li><p>【..】：</p><p>​【..】：代表任意参数类型及参数个数</p><p>在实战中一般这样写，起码要知道包名和类名</p><p><img src="img/Spring/image-20221231151240881.png" alt="image-20221231151240881"></p></li></ul></li><li><p>重用切入点表达式</p><ol><li><p>使用@PointCut注解，提出可重用的切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* AOP.imp.CalcImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用方法名()引入切入点表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Before(value = &quot;myPointcut()&quot;)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Aspect中JoinPoint对象"><a href="#Aspect中JoinPoint对象" class="headerlink" title="Aspect中JoinPoint对象"></a>Aspect中JoinPoint对象</h3><ul><li><p>JoinPoint</p></li><li><p>作用：</p><ul><li><p>获取方法名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//joinPoint.getSignature()获取方法签名【方法签名=方法名+方法参数】</span></span><br><span class="line"><span class="comment">//获取方法名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span>joinPoint.getSignature().getName();</span><br></pre></td></tr></table></figure></li><li><p>获取参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] args = joinPoint.getArgs();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="AspectJ中通知"><a href="#AspectJ中通知" class="headerlink" title="AspectJ中通知"></a>AspectJ中通知</h3><ul><li><p>前置通知</p><ul><li><p>语法：@Before</p></li><li><p>执行时机：指定方法<strong>执行之前</strong>执行【如目标方法中有异常也会执行】</p><ul><li><p>指定方法：切入点表达式设置位置</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* AOP.imp.CalcImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Before(value = &quot;myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;,参数&quot;</span>+ Arrays.toString(args));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>后置通知</p><ul><li><p>语法：@After</p></li><li><p>执行时机：指定方法<strong>执行之后</strong>执行【如目标方法中有异常也会执行】</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* AOP.imp.CalcImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@After(&quot;execution(* AOP.imp.CalcImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+name+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回通知</p><ul><li><p>语法：@AfterReturning</p></li><li><p>执行时机：指定方法返回结果时执行【如目标方法中有异常，会执行】</p></li><li><p>注意事项：@AfterReturing中returning属性与入参参数名一致</p></li><li><p>返回通知再后置通知之前执行</p><ul><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;myPointcut()&quot;,returning = &quot;rs&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint,Object rs)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;结果是&quot;</span>+rs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>异常通知</p><ul><li><p>语法：@AfterThrowing</p></li><li><p>执行时机：指定方法出现异常时执行，【如目标方法中无异常，不执行】</p></li><li><p>注意事项：@AfterThrowing中的throwing属性与入参参数名一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;myPointcut()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception ex)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;异常&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>总结</p><ul><li>无异常：前置通知&#x3D;&#x3D;&gt;返回通知&#x3D;&#x3D;&gt;后置通知</li><li>有异常：前置通知&#x3D;&#x3D;&gt;异常通知&#x3D;&#x3D;&gt;后置通知</li></ul></li><li><p>环绕通知【前四个通知整合】</p><ul><li><p>语法：@Around</p></li><li><p>作用：整合前四个通知</p></li><li><p>注意：参数中必须使用ProceedingJoinPoint，因为他是通过proceed（）方法去调度目标方法形成环绕通知</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* AOP.imp.CalcImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Around(value = &quot;myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pre)</span>&#123;</span><br><span class="line">        Object[] args = pre.getArgs();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pre.getSignature().getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//前置通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;,参数&quot;</span>+ Arrays.toString(args));</span><br><span class="line">            rs = pre.proceed();</span><br><span class="line">            <span class="comment">//返回通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;结果是&quot;</span>+rs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line"><span class="comment">//            异常通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法&quot;</span>+<span class="string">&quot;异常&quot;</span>+ex);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//后置通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;===&gt;Calc中&quot;</span>+methodName+<span class="string">&quot;方法执行完毕，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="定义切面优先级"><a href="#定义切面优先级" class="headerlink" title="定义切面优先级"></a>定义切面优先级</h3><ul><li><p>语法:@Order(value&#x3D;index)</p><ul><li><p>index是int类型，默认值是int的最大值</p></li><li><p>数值越小，优先级越高【一般使用正整数】</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyVaildData</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;MyLogging.myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vail</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===&gt;检验数值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="基于XML方式配置AOP"><a href="#基于XML方式配置AOP" class="headerlink" title="基于XML方式配置AOP"></a>基于XML方式配置AOP</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置计算器实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;calculator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Aop.imp.CalImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loggingAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Aop.LoggingAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--AOP配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=<span class="string">&quot;execution(* AOP.imp.CalcImp.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggingAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--前置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--返回通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;returningAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--异常通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;throwingAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--后置通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring中JdbcTemplate"><a href="#Spring中JdbcTemplate" class="headerlink" title="Spring中JdbcTemplate"></a>Spring中JdbcTemplate</h2><h3 id="JdbcTemplate简介"><a href="#JdbcTemplate简介" class="headerlink" title="JdbcTemplate简介"></a>JdbcTemplate简介</h3><ul><li>Spring提供的<strong>JdbcTemplate</strong>是一个小型持久化层框架，简化Jdbc代码。<ul><li>Mybatis是一个半自动化的ORM持久化层框架</li></ul></li></ul><h3 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h3><ul><li><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring-orm--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入druid的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入mysql的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p><ul><li><p>db.properties：设置连接数据库属性</p></li><li><p>applicationContext.xml【spring配置文件】</p><ul><li>加载外部属性文件</li><li>装配数据源【DataSources】</li><li>装配JdbcTemplate</li></ul></li><li><p>示例代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    - 加载外部属性文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    - 装配数据源【DataSources】--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    - 装配JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;db.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="JdbcTemplate的常用API"><a href="#JdbcTemplate的常用API" class="headerlink" title="JdbcTemplate的常用API"></a>JdbcTemplate的常用API</h3><blockquote><p>JdbcTemplate默认：自动提交事务</p></blockquote><ul><li><p>jdbcTemplate.<strong>update</strong>(String sql,Object… args)：通用的<strong>增删改</strong>方法</p></li><li><p>jdbcTemplate.<strong>batchUpdate</strong>(String sql,List&lt;Object[]&gt; args)：通用<strong>批处理增删改</strong>方法</p></li><li><p>jdbcTemplate.<strong>queryForObject</strong>(String sql,Class clazz,Object… args)：查询<strong>单个数值</strong>（Class clazz,，你需要返回的参数类型）</p><ul><li>String sql &#x3D; “select  count(1)  from tbl_xxx”;</li></ul></li><li><p>jdbcTemplate.<strong>queryForObject</strong>(String sql,RowMapper<T> rm,Object… args)：查询<strong>单个对象</strong></T></p><ul><li>String sql &#x3D; “select  col1,col2…  from tbl_xxx”;</li></ul></li><li><p>jdbcTemplate.<strong>query</strong>(String sql,RowMapper<T> rm,Obejct… args)：查询<strong>多个对象</strong></T></p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>, JdbcTemplate.class);</span><br><span class="line">        <span class="comment">//增</span></span><br><span class="line"><span class="comment">//        String sql = &quot;insert into tbl_dept (dept_name) values(?)&quot;;</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update(sql,&quot;人事部2&quot;);</span></span><br><span class="line">        <span class="comment">//删</span></span><br><span class="line"><span class="comment">//        String sql = &quot;delete from tbl_dept where dept_id = ?&quot;;</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update(sql,4);</span></span><br><span class="line">        <span class="comment">//改</span></span><br><span class="line"><span class="comment">//        String sql = &quot;update tbl_dept set dept_name = ? where dept_id = ?&quot;;</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update(sql,&quot;研发部2&quot;,1);</span></span><br><span class="line">        <span class="comment">//批量增</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        String sql = &quot;insert into tbl_employee(last_name,email,salary,dept_id) values(?,?,?,?)&quot;;</span></span><br><span class="line"><span class="comment">        List&lt;Object[]&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        list.add(new Object[]&#123;&quot;li&quot;,&quot;123@&quot;,100.0,1&#125;);</span></span><br><span class="line"><span class="comment">        list.add(new Object[]&#123;&quot;li2&quot;,&quot;123@&quot;,1003.0,12&#125;);</span></span><br><span class="line"><span class="comment">        list.add(new Object[]&#123;&quot;li3&quot;,&quot;123@&quot;,1002.0,12&#125;);</span></span><br><span class="line"><span class="comment">        list.add(new Object[]&#123;&quot;li5&quot;,&quot;123@&quot;,1001.0,13&#125;);</span></span><br><span class="line"><span class="comment">        jdbcTemplate.batchUpdate(sql,list);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//测试查询、</span></span><br><span class="line">        <span class="comment">//查询单个数值</span></span><br><span class="line"><span class="comment">//        String sql = &quot;select count(*) from tbl_employee&quot;;</span></span><br><span class="line"><span class="comment">//        Integer count = jdbcTemplate.queryForObject(sql, Integer.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;员工数量：&quot;+count);</span></span><br><span class="line">        <span class="comment">//查询单个对象</span></span><br><span class="line">        <span class="comment">//要创建RowMapper对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        RowMapper&lt;Employee&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Employee.class);</span></span><br><span class="line"><span class="comment">        String sql = &quot;select id,last_name,email,salary from tbl_employee where id = ?&quot;;</span></span><br><span class="line"><span class="comment">        Employee employee = jdbcTemplate.queryForObject(sql, rowMapper, 1);</span></span><br><span class="line"><span class="comment">        System.out.println(employee);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//查询多个结果返回多个对象</span></span><br><span class="line">        RowMapper&lt;Employee&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Employee.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,last_name,email,salary from tbl_employee&quot;</span>;</span><br><span class="line">        List&lt;Employee&gt; maps = jdbcTemplate.query(sql,rowMapper);</span><br><span class="line">        <span class="keyword">for</span> (Employee map : maps) &#123;</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用JdbcTemplate搭建Service-amp-Dao层"><a href="#使用JdbcTemplate搭建Service-amp-Dao层" class="headerlink" title="使用JdbcTemplate搭建Service&amp;Dao层"></a>使用JdbcTemplate搭建Service&amp;Dao层</h3><ul><li><p>Service层依赖Dao层</p></li><li><p>Dao层依赖JdbcTemplate</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptImp</span> <span class="keyword">implements</span> <span class="title class_">DeptDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select dept_id,dept_name from tbl_dept&quot;</span>;</span><br><span class="line">        RowMapper&lt;Dept&gt; rowMapper = <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Dept.class);</span><br><span class="line">        List&lt;Dept&gt; query = jdbcTemplate.query(sql, rowMapper);</span><br><span class="line">        <span class="keyword">return</span> query;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImp</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;deptImp&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> DeptImp deptImp;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dept&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> deptImp.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring声明式事务管理"><a href="#Spring声明式事务管理" class="headerlink" title="Spring声明式事务管理"></a>Spring声明式事务管理</h2><blockquote><p>回顾事务</p><ol><li>事务四大特征【ACID】<ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul></li><li>事务三种行为<ul><li>开启事务：connection.setAutoCommit(false)</li><li>提交事务：connection.commit()</li><li>回滚事务：connection.rollback()</li></ul></li></ol></blockquote><h3 id="spring中支持事务管理"><a href="#spring中支持事务管理" class="headerlink" title="spring中支持事务管理"></a>spring中支持事务管理</h3><ul><li><p>编程式事务管理【传统事务管理】</p><ol><li><p>获取数据库连接Connection对象</p></li><li><p>取消事务的自动提交【开启事务】</p></li><li><p><strong>执行操作</strong></p></li><li><p>正常完成操作时手动提交事务</p></li><li><p>执行失败时回滚事务</p></li><li><p>关闭相关资源</p></li></ol><ul><li>不足：<ul><li>事务管理代码【非核心业务】与核心业务代码相耦合<ul><li>事务管理代码分散</li><li>事务管理代码混乱</li></ul></li></ul></li></ul></li><li><p><strong>声明式事务管理【使用AOP管理事务】</strong></p><ul><li>先横向提取【事务管理代码】，再动态织入</li></ul></li></ul><h3 id="使用声明式事务管理"><a href="#使用声明式事务管理" class="headerlink" title="使用声明式事务管理"></a>使用声明式事务管理</h3><blockquote><p>不用事务管理代码，发现：同一个业务中，会出现局部成功及局部失败的现象【不正常】</p></blockquote><ul><li><p>添加支持【AspectJ的jar包】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件</p><ul><li><p><strong>配置事务管理器</strong></p></li><li><p><strong>开启事务注解支持</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启事务注解支持</span></span><br><span class="line"><span class="comment">       transaction-manager默认值：transactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在需要事务管理的业务方法上，添加注解**@Transactional**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookShopServiceImp</span> <span class="keyword">implements</span> <span class="title class_">BookShopService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookShopDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookShopDaoImp bookShopDaoImp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">purchase</span><span class="params">(String username, String isbn)</span> &#123;</span><br><span class="line">        <span class="comment">//查看价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">bookPriceByIsbn</span> <span class="operator">=</span> bookShopDaoImp.findBookPriceByIsbn(isbn);</span><br><span class="line">        <span class="comment">//修改库存</span></span><br><span class="line">        bookShopDaoImp.updateBookStock(isbn);</span><br><span class="line">        <span class="comment">//修改价格</span></span><br><span class="line">        bookShopDaoImp.updateUserAccount(username,bookPriceByIsbn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><ul><li>添加声明式事务管理之后，获取是代理对象，代理对象不能转换为目标对象【实现类】</li></ul></li></ul><h3 id="Spring声明式事务管理属性"><a href="#Spring声明式事务管理属性" class="headerlink" title="Spring声明式事务管理属性"></a>Spring声明式事务管理属性</h3><blockquote><p>@Transactional注解属性</p></blockquote><ul><li><p><strong>事务传播行为【Propagation】</strong></p><ul><li><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。</p><ul><li>如：执行事务方法method()1【事务x】之后，调用事务方法method2()【事务y】，此时需要设置method()2方法的事务传播行为。</li></ul></li><li><p>Spring的7种传播行为</p></li></ul><table><thead><tr><th>传播属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>REQUIRED</strong></td><td>如果有事务在运行，当前的方法就在这个事务内运行；否则就启动一个新的事务，并在自己的事务内运行。</td></tr><tr><td><strong>REQUIRES_NEW</strong></td><td>当前的方法<strong>必须</strong>启动新事务，并在自己的事务内运行；如果有事务正在运行，应该将它挂起。</td></tr><tr><td>SUPPORTS</td><td>如果有事务在运行，当前的方法就在这个事务内运行，否则可以不运行在事务中。</td></tr><tr><td>NOT_SUPPORTED</td><td>当前的方法不应该运行在事务中，如果有运行的事务将它挂起</td></tr><tr><td>MANDATORY</td><td>当前的方法必须运行在事务中，如果没有正在运行的事务就抛出异常。</td></tr><tr><td>NEVER</td><td>当前的方法不应该运行在事务中，如果有正在运行的事务就抛出异常。</td></tr><tr><td>NESTED</td><td>如果有事务正在运行，当前的方法就应该在这个事务的嵌套事务内运行，否则就启动一个新的事务，并在它自己的事务内运行。</td></tr></tbody></table></li><li><p>图解事务传播行为</p><ul><li><strong>REQUIRED</strong></li></ul><p><img src="image-20230102125650262.png" alt="image-20230102125650262"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; isbns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">isbns.add(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">isbns.add(<span class="string">&quot;1002&quot;</span>);</span><br><span class="line">service.checkout(<span class="string">&quot;li&quot;</span>,isbns);</span><br><span class="line"><span class="comment">//一个事务调用另外的事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(String username, List&lt;String&gt; isbns)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String isbn:isbns)&#123;</span><br><span class="line">            shopService.purchase(username,isbn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里是默认的REQUIRED行为，及所有的事物都在Checkout这个事物内运行，当有一个事物运行不成功时及整个事物都运行不成功，那么checkout这个事物就是不成功的。</p><ul><li><p>使用场景：去结账时判断余额是否充足，余额不足：一本书都不能卖</p></li><li><p><strong>REQUIRES_NEW</strong></p><p>​<img src="img/Spring/image-20230102125919262.png" alt="image-20230102125919262"></p></li><li><p>使用场景：去结账时判断余额是否充足，余额不足：最后导致余额不足的那本书，不让购买</p><p>这里的行为是REQUIRES_NEW，即在调用当前事务方法的 时候自己本身创建一个新的事务，并且在自己的事务运行，另外的事务就将他挂起，如果自己的成功了就成功，失败了就是失败，这里面每个事务都是独立的。最后再返回到调用他的事务。</p></li></ul></li><li><p>事务隔离级别【Isolation】</p><ul><li>隔离级别概述：一个事务与其他食物之间的隔离等级【1，2，4，8】</li><li>隔离等级<ul><li>读未提交【1】：READ  UNCOMMITTED<ul><li>存在问题：脏读【读取到了未提交数据】</li><li>例子：<ul><li>即当事务A去操作表book_stock,将书的库存从100&#x3D;&#x3D;&#x3D;&gt;99此时A还未提交数据，这时并发一个事务B来查询书的库存，这个时候B读到的数据就是99，如果A事务提交失败了，事务回滚，那么库存还是100，这个时候b就读到了脏数据。</li></ul></li></ul></li><li>读已提交【2】：READ  COMMITTED<ul><li>存在问题：可能出现不可重复读<ul><li>事务A进行写的操作，但是事务B读了一次，然后事务C又过了进行一次写的操作这个时候事务B未结束再读的时候数据就不是之前的数据，这个时候就是不可重复读，处理的话就是通过字段上锁的方式即一个事务正在操作的时候，例外一个事务只能等待</li></ul></li></ul></li><li>可重复读【4】： REPEATABLE READ<ul><li>存在问题：可能出现幻读</li></ul></li><li>串行化【8】：SERIALIZABLE</li></ul></li></ul></li><li><p>事务超时：【timeout】</p><ul><li>设置事务超时时间，到达指定时间后会强制事务回滚</li><li>类型：int, 单位：秒</li><li>默认值：-1【未设置超时】</li></ul></li><li><p>事务只读【readonly】</p><ul><li>一般事务方法中只有查询操作时，才将事务设置为只读</li></ul></li><li><p>事务回滚【不回滚】 </p><ul><li>rollbackFor:设置回滚的异常Class</li><li>noRollbackFOR:设置不回滚异常Class</li></ul></li></ul><h3 id="基于XML配置"><a href="#基于XML配置" class="headerlink" title="基于XML配置"></a>基于XML配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/aop/spring-aop-2.5.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:c3p0-db.properties&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源，读取properties文件信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.jdbcUrl&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置jdbc模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mengma.dao.impl.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mengma.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器，依赖于数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编写通知：对事务进行增强（通知），需要编写切入点和具体执行事务的细节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 给切入点方法添加事务详情，name表示方法名称，*表示任意方法名称，propagation用于设置传播行为，read-only表示隔离级别，是否只读 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop编写，让Spring自动对目标生成代理，需要使用AspectJ的表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.mengma.service.*.*(..))&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 切面：将切入点与通知整合 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring5新特性"><a href="#Spring5新特性" class="headerlink" title="Spring5新特性"></a>Spring5新特性</h2><table><thead><tr><th>名称</th><th>含义</th><th>可标注位置</th></tr></thead><tbody><tr><td>@Nullable</td><td>可以为空</td><td>@Target({ElementType.<em>METHOD</em>, ElementType.<em>PARAMETER</em>ElementType.<em>FIELD</em></td></tr><tr><td>@NonNull</td><td>不应为空</td><td>@Target((ElementType.<em>METHOD</em>, ElementType.<em>PARAMETER</em>ElementType.<em>FIELD</em>)</td></tr><tr><td>@NonNullFields</td><td>在特定包下的字段不应为空</td><td>@Target(ElementType.<em>PACKAGE</em>@TypeQualifierDefault(ElementType.<em>FIELD</em></td></tr><tr><td>@NonNullApi</td><td>参数和方法返回值不应为空</td><td>@Target(ElementType.<em>PACKAGE</em>)<br>@TypeQualifierDefault({ElementType.<em>METHOD</em>ElementType.<em>PARAMETER</em>)</td></tr></tbody></table><ul><li><p>@Nullable作用</p><ul><li>位置：可以书写再方法&amp;属性上面&amp;参数前面。</li><li>作用：表示当前方法或属性<strong>可以为空</strong>，当时属性为空的时候，不会报错</li></ul><h3 id="Spring5整合Log4j2"><a href="#Spring5整合Log4j2" class="headerlink" title="Spring5整合Log4j2"></a>Spring5整合Log4j2</h3></li><li><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.1og4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>1og4j-s1f4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置文件【log4j2.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL</span></span><br><span class="line"><span class="comment"> Configuration后面的status用于设置1og4j2自身内部的信息输出，可以不设置，当设置成trace时，可以看到1og4j2内部各种详细输出--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.sss&#125; [%t] %-5level%logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义1ogger，只有定义了1ogger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--root: 用于指定项目的根日志，如果没有单独指定Logger，则会使用root作为默认的日志输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring5整合Junit5"><a href="#Spring5整合Junit5" class="headerlink" title="Spring5整合Junit5"></a>Spring5整合Junit5</h3><ul><li><p>导入jar包【注意：将Junit4的jar包删除】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Junit5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解整合即可</p><ul><li><p>方式1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ExtendWith(SpringExtension.class)</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老韩的JavaSE</title>
      <link href="/2023/01/20/%E8%80%81%E9%9F%A9JavaSE/"/>
      <url>/2023/01/20/%E8%80%81%E9%9F%A9JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="Java核心笔记"><a href="#Java核心笔记" class="headerlink" title="Java核心笔记"></a>Java核心笔记</h1><h1 id="0-导论"><a href="#0-导论" class="headerlink" title="0.导论"></a>0.导论</h1><h2 id="标柱注释"><a href="#标柱注释" class="headerlink" title="标柱注释"></a>标柱注释</h2><ul><li><strong>单独重点加粗</strong></li><li><u>单独背诵下划线</u></li><li>⭐️重点</li><li>⭐️⭐️重点的重点</li></ul><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><ul><li>需求——&gt;知识点——&gt;基本原理语法——&gt;快速入门(基本程序)——&gt;技术细节</li></ul><h1 id="1-java概述"><a href="#1-java概述" class="headerlink" title="1 java概述"></a>1 java概述</h1><h2 id="1-1转义字符"><a href="#1-1转义字符" class="headerlink" title="1.1转义字符"></a>1.1转义字符</h2><ul><li>\t  一个制表位，实现对齐功能</li><li>\n  换行</li><li>\\  一个\</li><li>\“  一个” </li><li>\r  回车</li></ul><h2 id="1-2注释"><a href="#1-2注释" class="headerlink" title="1.2注释"></a>1.2注释</h2><ul><li><p>单行注释:  &#x2F;&#x2F;注释文字</p></li><li><p>多行注释:  &#x2F;*注释文字*&#x2F;</p></li><li><p>文档注释:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="1-3代码规范⭐️"><a href="#1-3代码规范⭐️" class="headerlink" title="1.3代码规范⭐️"></a>1.3代码规范⭐️</h2><ul><li>类、方法的注释，要以 javadoc 的方式来写</li><li>注释详细，着重告述读者为什么这样写，如何修改，注意什么问题等</li><li>使用tab、shift + tab</li><li>运算符和 &#x3D; 两边习惯性各加一个空格</li><li>源文件使用utf-8编码</li><li>行宽度不要超过80字符</li><li>代码编写次行风格和行尾风格</li></ul><h2 id="1-4-JDK-JRE⭐️"><a href="#1-4-JDK-JRE⭐️" class="headerlink" title="1.4  JDK  JRE⭐️"></a>1.4  JDK  JRE⭐️</h2><ul><li>JDK(java开发工具包)</li><li>JDK &#x3D; JRE + java开发工具</li><li>JRE &#x3D; JVM + Java的核心类库</li><li>JVM(java虚拟机)</li></ul><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><ul><li><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>变量相当于内存中一个数据存储空间的表示，你可以把变量看做是一个房间的门牌号，通过门牌号我们可以找到房间，而通过变量名可以访问到变量(值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>；</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节："><a href="#注意事项和细节：" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>变量表示内存中的一个存储区域[不同的变量，类型不同，占用的空间大小不同]</li><li>该区域有自己的名称[变量名]和类型[数据类型]</li><li>变量必须先声明，后使用，即有顺序</li><li>该区域的数据可以在同一类型范围内不断变化</li><li><strong>变量在同一个作用域内不能重名</strong></li><li>变量&#x3D;变量名＋值+数据类型</li></ol></li></ul><h2 id="2-2-基本数据类型⭐️"><a href="#2-2-基本数据类型⭐️" class="headerlink" title="2.2 基本数据类型⭐️"></a>2.2 基本数据类型⭐️</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%883.18.09.png" alt="截屏2022-04-16 下午3.18.09"></p><p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-09-01%2010.57.09.jpg" alt="截屏2022-09-01 10.57.09"></p><ul><li><h4 id="整数类型-byte-1-short-2-int-4-long-8"><a href="#整数类型-byte-1-short-2-int-4-long-8" class="headerlink" title="整数类型  (byte [1]  short[2]  int[4]  long [8])"></a>整数类型  (byte [1]  short[2]  int[4]  long [8])</h4><ol><li>Java的整型常量(具体值)<strong>默认为 int 型</strong>，声明long型常量须后加‘l’或‘L’</li><li>java程序中变量常声明为int型，除非不足以表示大数，才使用long</li><li>bit: 计算机中的最小存储单位，byte：算机中基本存储单元，1byte &#x3D; 8 bit</li></ol></li><li><h4 id="浮点-小数-类型-float-4-double-8"><a href="#浮点-小数-类型-float-4-double-8" class="headerlink" title="浮点(小数)类型 (float [4]  double [8])"></a>浮点(小数)类型 (float [4]  double [8])</h4><ol><li>浮点数&#x3D;符号位+指数位+尾数位</li><li>尾部可能丢失，造成精度损失</li><li>Java 的浮点型常量(具体值)默认为double型，声明float型常量，须后加’f’或’F’</li><li>十进制数形式：5.12    512.0f    .512(必须有小数点)<br>科学计数法形式：5.12e2    5.12E-2 </li><li><strong>通常情况默认使用double</strong></li></ol></li><li><h4 id="字符型-Char-2"><a href="#字符型-Char-2" class="headerlink" title="字符型(Char[2])"></a>字符型(Char[2])</h4><ol><li>使用单引号表示</li><li>Java中还允许使用转义字符来将其后的字符转变为特殊字符型常量</li><li>char的<strong>本质是一个整数</strong>，输出时是unicode码对应字符</li><li>char类可以进行运算</li></ol></li><li><h4 id="布尔型-boolean-1"><a href="#布尔型-boolean-1" class="headerlink" title="布尔型(boolean[1])"></a>布尔型(boolean[1])</h4><ol><li>boolean类型数据只允许取值true和false，无null</li><li>boolean类型占1个字节</li><li><strong>不可以用0或非0的整数代替false和true，与C语言不同</strong></li></ol></li></ul><h2 id="2-3-基本数据类型转化"><a href="#2-3-基本数据类型转化" class="headerlink" title="2.3 基本数据类型转化"></a>2.3 基本数据类型转化</h2><h3 id="2-3-1-自动类型转换"><a href="#2-3-1-自动类型转换" class="headerlink" title="2.3.1 自动类型转换"></a>2.3.1 自动类型转换</h3><ul><li><h4 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java程序在进行赋值或者运算时，精度小的类型自动转换为精度大的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><h4 id="转换规则："><a href="#转换规则：" class="headerlink" title="转换规则："></a>转换规则：</h4><p><strong><u>char&lt;int&lt;long&lt;float&lt;double</u></strong></p><p><u>**byte&lt;short&lt;int&lt;long&lt;float&lt;double**</u></p></li><li><h4 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li></ul><ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，再进行计算</li><li>我们把精度(容量)大的数据类型赋值给精度(容量)小 的数据类型时，就会报错，反之就会进行自动类型转换。</li><li><strong>byte    short    char    之间不会相互转换</strong></li><li><strong>byte    short    char    计算是首先转换为int类型</strong></li><li>boolean不参与转换</li><li>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型</li></ol><h3 id="2-3-2-强制类型转换"><a href="#2-3-2-强制类型转换" class="headerlink" title="2.3.2 强制类型转换"></a>2.3.2 强制类型转换</h3><ul><li><h4 id="基本介绍：-1"><a href="#基本介绍：-1" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符()，但可能造成精度降低或溢出，格外要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">8.8</span>;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li></ul><ol><li><p>当数据从精度  大——＞小，就需要使用到强制转换</p></li><li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="type">int</span>(<span class="number">10</span>*<span class="number">3.5</span>+<span class="number">6</span>*<span class="number">1.5</span>)</span><br></pre></td></tr></table></figure></li><li><p>char类型可以保存 int的常量值，但不能保存int的变量值，需要强转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> m;<span class="comment">//false</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;<span class="comment">//ture</span></span><br></pre></td></tr></table></figure></li><li><p><strong>byte    short    char    类型在进行运算时，当做int类型处理</strong></p></li></ol><h2 id="2-4-基本数据类型和String类型转换"><a href="#2-4-基本数据类型和String类型转换" class="headerlink" title="2.4 基本数据类型和String类型转换"></a>2.4 基本数据类型和String类型转换</h2><ul><li><h4 id="基本类型转String类型"><a href="#基本类型转String类型" class="headerlink" title="基本类型转String类型"></a>基本类型转String类型</h4><p>语法：将基本类型的值  +” “</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">1.1f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> n2 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> n3 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><h4 id="String类型转基本数据类型"><a href="#String类型转基本数据类型" class="headerlink" title="String类型转基本数据类型"></a>String类型转基本数据类型</h4><p>语法：通过基本类型的包装类调用parseXX方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> InterInt.parseInt(s5);</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> InterInt.parseDouble(s5);</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> InterInt.parseFloat(s5);</span><br></pre></td></tr></table></figure></li></ul><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><ul><li><h4 id="基本介绍：-2"><a href="#基本介绍：-2" class="headerlink" title="基本介绍："></a>基本介绍：</h4>算术运算符是对数值类型的变量进行运算的</li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%883.19.01.png" alt="截屏2022-04-16 下午3.19.01"><h3 id="3-1-1-号使用"><a href="#3-1-1-号使用" class="headerlink" title="3.1.1 +号使用"></a>3.1.1 +号使用</h3><ol><li><p>当左右两边都是数值型时，则做加法运算</p></li><li><p>当左右两边有一方为<strong>字符串，则做拼接运算</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out，println(<span class="number">100</span> + <span class="number">98</span>): <span class="comment">//198</span></span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span> + <span class="number">98</span>);<span class="comment">//10098</span></span><br><span class="line">System.out.println(<span class="number">100</span> + <span class="number">3</span> +<span class="string">&quot;hello&quot;</span>);<span class="comment">//103hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+ <span class="number">100</span> +<span class="number">3</span>);<span class="comment">//hello1003</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-1-2-号使用"><a href="#3-1-2-号使用" class="headerlink" title="3.1.2 ++号使用"></a>3.1.2 ++号使用</h3><ul><li><p>前＋＋和后＋+都完全等价子 i&#x3D;i+1;作为表达式使用</p><p>前++：++先自增后赋值</p><p>后++：i++先赋值后自增</p></li></ul><h3 id="3-1-3-号使用"><a href="#3-1-3-号使用" class="headerlink" title="3.1.3 %号使用"></a>3.1.3 %号使用</h3><ul><li>a % b 当a是小数时，公式 &#x3D; a - (int)a &#x2F; b * b</li></ul><h2 id="3-2-关系运算符"><a href="#3-2-关系运算符" class="headerlink" title="3.2 关系运算符"></a>3.2 关系运算符</h2><ul><li>关系运算符的结果都是 boolean 型</li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%884.09.29.png" alt="截屏2022-04-16 下午4.09.29"><h2 id="3-3-逻辑运算符"><a href="#3-3-逻辑运算符" class="headerlink" title="3.3 逻辑运算符"></a>3.3 逻辑运算符</h2><ul><li><h4 id="基本介绍：-3"><a href="#基本介绍：-3" class="headerlink" title="基本介绍："></a>基本介绍：</h4>用于连接多个条件(多个关系表达式)，结果是boolean</li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-16%20%E4%B8%8B%E5%8D%884.20.34.png" alt="截屏2022-04-16 下午4.20.34" style="zoom:;"><h3 id="3-3-1-amp-amp-和-amp-基本规则"><a href="#3-3-1-amp-amp-和-amp-基本规则" class="headerlink" title="3.3.1  &amp;&amp;和&amp;基本规则"></a>3.3.1  &amp;&amp;和&amp;基本规则</h3><ul><li><h4 id="amp-amp-短路与"><a href="#amp-amp-短路与" class="headerlink" title="&amp;&amp; 短路与:"></a>&amp;&amp; 短路与:</h4><p>如果第一个条件为 false ，后面的条件不再判断</p></li><li><h4 id="amp-逻辑与"><a href="#amp-逻辑与" class="headerlink" title="&amp; 逻辑与:"></a>&amp; 逻辑与:</h4><p>如果第一个条件为 false ，后面的条件仍然判断</p></li></ul><h3 id="3-3-2-和-基本规则"><a href="#3-3-2-和-基本规则" class="headerlink" title="3.3.2  ||和|基本规则"></a>3.3.2  ||和|基本规则</h3><ul><li><h4 id="短路或"><a href="#短路或" class="headerlink" title="|| 短路或:"></a>|| 短路或:</h4><p>如果第一个条件为 true，则第二个条件不会判断，结果为true</p></li><li><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="|  逻辑或:"></a>|  逻辑或:</h4><p>不管第一个条件是否为true，第二个条件都要判断</p></li></ul><h3 id="3-3-3-逻辑异或"><a href="#3-3-3-逻辑异或" class="headerlink" title="3.3.3  ^逻辑异或"></a>3.3.3  ^逻辑异或</h3><ul><li>当a和b不同时，则结果为true，否则为false</li></ul><h2 id="3-4-赋值运算符"><a href="#3-4-赋值运算符" class="headerlink" title="3.4 赋值运算符"></a>3.4 赋值运算符</h2><ul><li><h4 id="基本介绍：-4"><a href="#基本介绍：-4" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>赋值运算符就是将某个运算后的值，赋给指定的变量</p></li><li><h4 id="注意事项和细节：-1"><a href="#注意事项和细节：-1" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>运算顺序从右往左</p></li><li><p>赋值运算符的左边只能是变量，右边可以是变量、表达式、常量值</p></li><li><p>复合赋值： a  x&#x3D;  b  等于  a  &#x3D;  a  x  b</p></li><li><p><strong>复合赋值运算符会进行类型转换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">b += <span class="number">2</span>;  <span class="comment">//等价于 b = (byte)(b + 2)</span></span><br><span class="line">b++;  <span class="comment">//等价于 b = (byte)(b + 1)</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="3-5-三元运算符"><a href="#3-5-三元运算符" class="headerlink" title="3.5 三元运算符"></a>3.5 三元运算符</h2><ul><li><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">条件表达式？表达式<span class="number">1</span>：表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> a&gt;b ? a++:b--;</span><br></pre></td></tr></table></figure></li><li><h4 id="运算规则："><a href="#运算规则：" class="headerlink" title="运算规则："></a>运算规则：</h4><ol><li>如果条件表达式为true，运算后的结果是表达式1;</li><li>如果条件表达式为false，运算后的结果是表达式2;</li></ol></li><li><h4 id="注意事项和细节：-2"><a href="#注意事项和细节：-2" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>表达式1和表达式2要为可以赋给接收变量的类型(或可以自动转换)<!--三元运算符是一个整体，精度保持一致--></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &gt; b ? <span class="type">int</span>(<span class="number">1.1</span>) : <span class="type">int</span>(<span class="number">3.4</span>);  </span><br></pre></td></tr></table></figure></li><li><p>三元运算符可以转成  if–else语句</p></li></ol></li></ul><h2 id="3-5-运算符优先级"><a href="#3-5-运算符优先级" class="headerlink" title="3.5 运算符优先级"></a>3.5 运算符优先级</h2><ul><li><h4 id="优先级："><a href="#优先级：" class="headerlink" title="优先级："></a>优先级：</h4><ol><li>()  {} , 等</li><li>单目运算符 ++ –</li><li>算术运算符</li><li>位移运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>三元运算符</li><li>赋值运算符</li></ol></li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8810.44.16.png" alt="截屏2022-04-17 上午10.44.16" style="zoom: 67%;"><h2 id="3-6-标识符的命名规则和规范"><a href="#3-6-标识符的命名规则和规范" class="headerlink" title="3.6 标识符的命名规则和规范"></a>3.6 标识符的命名规则和规范</h2><ul><li><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ol><li>由26个英文字母大小写，0~9，或＄组成</li><li><strong>数字不可开头</strong></li><li>不可以使用关键字和保留宇，但能包含关键字和保留字</li><li>Java中严格区分大小写，长度无限制</li><li><strong>标识符不能包含空格</strong></li></ol></li><li><h4 id="规范："><a href="#规范：" class="headerlink" title="规范："></a>规范：</h4><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单河开始每个单词首字母大写：xxxYyyzzz</li><li>常量名：所有字母都大写，多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ol></li></ul><h2 id="3-7-关键字、保留字"><a href="#3-7-关键字、保留字" class="headerlink" title="3.7 关键字、保留字"></a>3.7 关键字、保留字</h2><ul><li><h4 id="关键字基本介绍："><a href="#关键字基本介绍：" class="headerlink" title="关键字基本介绍："></a>关键字基本介绍：</h4><p>被Java语言赋子了特殊含义，用做专门用途的字符串(单词)</p><p>特点：关键字中所有字母都为小写</p></li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8811.25.09.jpg" alt="截屏2022-04-17 上午11.25.09"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8A%E5%8D%8811.26.14.jpg" alt="截屏2022-04-17 上午11.26.14"><ul><li><h4 id="保留字基本介绍："><a href="#保留字基本介绍：" class="headerlink" title="保留字基本介绍："></a>保留字基本介绍：</h4><p>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留宇</p><p>byValue、cast、future、 generic、 inner、 operator、outer、rest、var、goto、const</p></li></ul><h2 id="3-8-键盘输入"><a href="#3-8-键盘输入" class="headerlink" title="3.8 键盘输入"></a>3.8 键盘输入</h2><ul><li><h4 id="基本介绍：-5"><a href="#基本介绍：-5" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取<br>lnput.java，需要一个扫描器(对象)，就是 Scanner</p></li><li><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p>导入该类的包，java.util.*</p></li><li><p>创建该类的对象(声明变量)</p></li><li><p>调用里面的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//System.in 代表使用键盘输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入名字&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> myScanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;名字=&quot;</span>+name+ <span class="string">&quot;\t&quot;</span> +<span class="string">&quot;年龄=&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="3-9-进制⭐️"><a href="#3-9-进制⭐️" class="headerlink" title="3.9 进制⭐️"></a>3.9 进制⭐️</h2><ul><li>二进制：0.1，满2进1，以0b或0B开头</li><li>十进制：0-9，满10进1</li><li>八进制：0-7，满8进1，以数字0开头表示</li><li>十六进制：0-9及A(10)-F(15)，满16进1.以Ox或0x开头表示，此处的A-F不区分大小写</li></ul><h3 id="3-9-1-其他转十进制"><a href="#3-9-1-其他转十进制" class="headerlink" title="3.9.1 其他转十进制"></a>3.9.1 其他转十进制</h3><ul><li><p>从最低位开始，将每个位上的数提取出来，乘以(几进制)的(位数-1)次方</p><p>例：0b01011 &#x3D; 1 * 2^(1-1) + 1 * 2^(2-1) + 0 * 2^(3-1) + 1 * 2^(4-1) &#x3D; 1 + 2 + 0 + 8 &#x3D;11</p></li></ul><h3 id="3-9-2-十进制转其他"><a href="#3-9-2-十进制转其他" class="headerlink" title="3.9.2 十进制转其他"></a>3.9.2 十进制转其他</h3><ul><li>将该数不断除(几进制)，直到商为0，每步余数倒写</li></ul><h3 id="3-9-3-二进制转八-x2F-十六"><a href="#3-9-3-二进制转八-x2F-十六" class="headerlink" title="3.9.3 二进制转八&#x2F;十六"></a>3.9.3 二进制转八&#x2F;十六</h3><ul><li>从低位开始，每三位一组，转成对应八进制</li><li>从低位开始，每四位一组，转成对应十六进制</li></ul><h3 id="3-9-4-八-x2F-十六进制转二"><a href="#3-9-4-八-x2F-十六进制转二" class="headerlink" title="3.9.4 八&#x2F;十六进制转二"></a>3.9.4 八&#x2F;十六进制转二</h3><ul><li>将八进制的每一位，转成对应的一个三位的二进制数</li><li>将十六进制的每一位，转成对应的一个四位的二进制数</li></ul><h2 id="3-10-原码-反码-补码⭐️⭐️"><a href="#3-10-原码-反码-补码⭐️⭐️" class="headerlink" title="3.10 原码  反码 补码⭐️⭐️"></a>3.10 原码  反码 补码⭐️⭐️</h2><ul><li><h4 id="运算规则：-1"><a href="#运算规则：-1" class="headerlink" title="运算规则："></a>运算规则：</h4><ol><li>二进制的最高位是符号位：<strong>0表示正数，1表示负数</strong></li><li><strong>正数的原码、反码、补码都一样(三码合一)</strong></li><li><strong>负数的反码 &#x3D; 它的原码符号位不变，其它位取反</strong></li><li><strong>负数的补码 &#x3D; 它的反码+1，负数的反码 &#x3D; 负数的补码 - 1</strong></li><li>0的反码，补码都是0</li><li>java中的数都是有符号的</li><li>计算机运算的时候，都是以补码的方式来运算的</li><li>看运算结果的时候，要看他的原码</li></ol></li></ul><h2 id="3-11-位运算符⭐️"><a href="#3-11-位运算符⭐️" class="headerlink" title="3.11 位运算符⭐️"></a>3.11 位运算符⭐️</h2><ul><li><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul><li>按位与  &amp;</li><li>按位或  | </li><li>按位异或  ^  </li><li>按位取反  ~ </li><li>算数右移  &lt;&lt;  低位溢出，符号位不变，并用符号位补溢出的高位(本质&#x2F;2)</li><li>算数左移  &gt;&gt;  符号位不变，低位补0(本质*2)</li><li>逻辑右移  &gt;&gt;&gt;  低位溢出，高位补0</li></ul></li><li><h4 id="位运算过程："><a href="#位运算过程：" class="headerlink" title="位运算过程："></a>位运算过程：</h4><ol><li>用原码得到补码</li><li>用补码进行相关逻辑运算</li><li>运算完毕将补码转换成原码</li></ol></li></ul><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2423.jpg" alt="IMG_2423"><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2424.jpg" alt="IMG_2424"><h1 id="4-控制结构"><a href="#4-控制结构" class="headerlink" title="4 控制结构"></a>4 控制结构</h1><h2 id="4-1顺序"><a href="#4-1顺序" class="headerlink" title="4.1顺序"></a>4.1顺序</h2><ul><li><h4 id="基本介绍：-6"><a href="#基本介绍：-6" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序从上到下逐行地执行，中间没有任何判断和跳转</p></li><li><h4 id="注意事项和细节：-3"><a href="#注意事项和细节：-3" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><p>Java中定义成员变量时采用合法的前向引用(先定义再引用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> num1 + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-分支控制-if-else-switch"><a href="#4-2-分支控制-if-else-switch" class="headerlink" title="4.2 分支控制(if  else  switch)"></a>4.2 分支控制(if  else  switch)</h2><h3 id="4-2-1-单分支"><a href="#4-2-1-单分支" class="headerlink" title="4.2.1 单分支"></a>4.2.1 单分支</h3><ul><li><h4 id="基本语法：-1"><a href="#基本语法：-1" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-4"><a href="#注意事项和细节：-4" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>当条件表达式为ture 时，就会执行{}的代码。如果为false，就不执行</li><li>如果{}中只有一条语句，则可以不用{}，建议写上{}</li></ol></li></ul><h3 id="4-2-2-双分支"><a href="#4-2-2-双分支" class="headerlink" title="4.2.2 双分支"></a>4.2.2 双分支</h3><ul><li><h4 id="基本语法：-2"><a href="#基本语法：-2" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-5"><a href="#注意事项和细节：-5" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>当条件表达式成立，即执行代码块1，否则执行代码块2</li><li>如果执行代码块有一条语句，则{}可以省略，否则，不能省略</li></ol></li></ul><h3 id="4-2-3-多分支"><a href="#4-2-3-多分支" class="headerlink" title="4.2.3 多分支"></a>4.2.3 多分支</h3><ul><li><h4 id="基本语法：-3"><a href="#基本语法：-3" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  执行代码块;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">  执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  执行代码块n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-6"><a href="#注意事项和细节：-6" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>当条件表达式1成立时，即执行代码块1</li><li>如果表达式1不成立，才去判断表达式2是否成立</li><li>如果表达式2成立，就执行代码块2</li><li>以此类推，如果所有的表达式都不成立则执行else的代码块</li><li>多分支可以没有else</li></ol></li></ul><h3 id="4-2-4-嵌套分支"><a href="#4-2-4-嵌套分支" class="headerlink" title="4.2.4 嵌套分支"></a>4.2.4 嵌套分支</h3><ul><li><h4 id="基本介绍：-7"><a href="#基本介绍：-7" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>在一个分支结构中又完整的嵌套了另个完整的分支结构，里面的分支的结构称为内层分支外面的分支结构称为外层分支</p></li><li><h4 id="基本语法：-4"><a href="#基本语法：-4" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">  <span class="keyword">if</span>()&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//if-else</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-5-switch分支结构"><a href="#4-2-5-switch分支结构" class="headerlink" title="4.2.5 switch分支结构"></a>4.2.5 switch分支结构</h3><ul><li><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">      语句块<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">      语句块<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      语句块;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol><li>switch 关键字，表示swtich分支</li><li>表达式对应一个值</li><li>case 常量1:当表达式的值等于常量1，就执行语句块1</li><li>break ：表示退出swtich</li><li>如果和 case 常量1匹配，就执行语句块1，如果没有匹配，就继续匹配 case 常量2</li><li><strong>如果一个都没有匹配上，执行default</strong></li></ol></li><li><h4 id="注意事项和细节：-7"><a href="#注意事项和细节：-7" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>表达式数据类型，应和case 后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是 int</li><li><strong>switch(表达式)中表达式的返回值必须是：(byte,short.int,char,enum,String)</strong></li><li>case子句中的值必须是常量,而不能是变量</li><li><strong>default子句是可选的，当没有匹配的case时，执行default</strong></li><li>break语句跳出switch语句块，如果没有break，程序会执行到结尾</li></ol></li></ul><h2 id="4-3-循环控制-for-while-do-while-⭐️"><a href="#4-3-循环控制-for-while-do-while-⭐️" class="headerlink" title="4.3 循环控制(for  while  do while)⭐️"></a>4.3 循环控制(for  while  do while)⭐️</h2><h3 id="4-3-1-for循环控制"><a href="#4-3-1-for循环控制" class="headerlink" title="4.3.1  for循环控制"></a>4.3.1  for循环控制</h3><ul><li><h4 id="基本语法：-5"><a href="#基本语法：-5" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环变量初始化;循环条件;循环变量迭代)&#123;</span><br><span class="line">  循环操作语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><ol><li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li><li>循环操作，这里可以有多条语句，也就是我们要循环执行的代码</li><li>如果 循环操作(语句) 只有一条语句，可以省路{}，建议不要省略</li></ol></li><li><h4 id="注意事项和细节：-8"><a href="#注意事项和细节：-8" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>循环条件是返回一个布尔值的表达式</li><li><strong>for(;循环判断条件;)中的初始化和变量迭代可以写到其它地方，但是两边的分号不能省略</strong></li><li>循环初始值可以有多条初始化语句，但要求类型一样，井且中间用逗号隔开</li><li>循环变量迭代也司以有名条变量迭代语句，中间用逗号隔开</li></ol></li></ul><h3 id="4-3-2-while循环控制"><a href="#4-3-2-while循环控制" class="headerlink" title="4.3.2  while循环控制"></a>4.3.2  while循环控制</h3><ul><li><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">  循环体;</span><br><span class="line">  循环变量迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h4><ol><li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li><li>四要素位置不同</li></ol></li><li><h4 id="注意事项和细节：-9"><a href="#注意事项和细节：-9" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>循环条件是返回一个布尔值的表达式</li><li>while循环是先判断在执行语句</li></ol></li></ul><h3 id="4-3-3-do-while循环控制"><a href="#4-3-3-do-while循环控制" class="headerlink" title="4.3.3  do while循环控制"></a>4.3.3  do while循环控制</h3><ul><li><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">循环变量初始化;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体;</span><br><span class="line">  循环变量迭代;</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure></li><li><h4 id="说明：-3"><a href="#说明：-3" class="headerlink" title="说明："></a>说明：</h4><ol><li>四要素：(1)循环变量初始化(2)循环条件(3)循环操作(4)循环变量迭代</li><li>四要素位置不同</li><li>先执行在判断，至少执行一次</li><li>最后有一个;</li></ol></li><li><h4 id="注意事项和细节：-10"><a href="#注意事项和细节：-10" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>循环条件是返回一个布尔值的表达式</li><li><strong>先执行在判断，至少执行一次</strong></li></ol></li></ul><h3 id="4-3-4-多重循环控制"><a href="#4-3-4-多重循环控制" class="headerlink" title="4.3.4 多重循环控制"></a>4.3.4 多重循环控制</h3><ul><li><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for,while,do.while均可以作为外层循环和内层循环</li><li>嵌套循环就是把内层循环当成外层循环的循环体</li><li><strong>当只有内层循环的循环条件为false时，才会完全跳出内层盾环，才可结束外层的当次循环，开始下一次的循环</strong></li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次</li></ol></li></ul><h2 id="4-4-跳转控制break"><a href="#4-4-跳转控制break" class="headerlink" title="4.4 跳转控制break"></a>4.4 跳转控制break</h2><ul><li><h4 id="基本介绍：-8"><a href="#基本介绍：-8" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>break语句用于终止某个语句块的执行，一般使用在switch或者循环[for,while,do while]</p></li><li><h4 id="注意事项和细节：-11"><a href="#注意事项和细节：-11" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p></li><li><p>标签的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label1:&#123;......</span><br><span class="line">  label2:&#123;</span><br><span class="line">  <span class="keyword">break</span> label1;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="4-5-跳转控制continue"><a href="#4-5-跳转控制continue" class="headerlink" title="4.5 跳转控制continue"></a>4.5 跳转控制continue</h2><ul><li><h4 id="基本介绍：-9"><a href="#基本介绍：-9" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>continue语句用于结束本次循环，继续执行下一次循环</p></li><li><p>continue语句出现在多层嵌套的福环语句体中时，可以通过标签指明要跳过的是哪一层循环</p></li></ul></li><li><h4 id="注意事项和细节：-12"><a href="#注意事项和细节：-12" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>continue语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p></li><li><p>标签的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label1:&#123;......</span><br><span class="line">  label2:&#123;</span><br><span class="line">  <span class="keyword">continue</span> label1;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="4-6-跳转控制return"><a href="#4-6-跳转控制return" class="headerlink" title="4.6 跳转控制return"></a>4.6 跳转控制return</h2><ul><li><h4 id="基本介绍：-10"><a href="#基本介绍：-10" class="headerlink" title="基本介绍："></a>基本介绍：</h4>return使用在方法，表示跳出所在的方法</li></ul><h1 id="5-数组、排序、查找"><a href="#5-数组、排序、查找" class="headerlink" title="5 数组、排序、查找"></a>5 数组、排序、查找</h1><h2 id="5-1-数组⭐️"><a href="#5-1-数组⭐️" class="headerlink" title="5.1 数组⭐️"></a>5.1 数组⭐️</h2><h3 id="5-1-1-使用方式"><a href="#5-1-1-使用方式" class="headerlink" title="5.1.1 使用方式"></a>5.1.1 使用方式</h3><h4 id="1-动态初始化"><a href="#1-动态初始化" class="headerlink" title="1-动态初始化"></a>1-动态初始化</h4><ul><li><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><p>数据类型 数组名 [] &#x3D; new 数据类型[大小]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">//创建一个数字名字为a，存放了五个int</span></span><br></pre></td></tr></table></figure></li><li><h4 id="数组的引用："><a href="#数组的引用：" class="headerlink" title="数组的引用："></a>数组的引用：</h4><p>数组名[下标&#x2F;索引]，下标从0开始</p></li></ul><h4 id="2-动态初始化"><a href="#2-动态初始化" class="headerlink" title="2-动态初始化"></a>2-动态初始化</h4><ul><li><h4 id="先声明数组："><a href="#先声明数组：" class="headerlink" title="先声明数组："></a>先声明数组：</h4><p>数据类型 数组名[]；也可以 数据类型[] 数组名；</p><p>例：int a[];或者int[] a;</p></li><li><h4 id="再创建数组："><a href="#再创建数组：" class="headerlink" title="再创建数组："></a>再创建数组：</h4><p>数组名 &#x3D; new 数据类型[大小];</p><p>例：a &#x3D; new int [10];</p></li></ul><h4 id="3-静态初始化"><a href="#3-静态初始化" class="headerlink" title="3-静态初始化"></a>3-静态初始化</h4><ul><li><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><p>数据类型 数组名[] &#x3D; {元素值，元素值……}</p></li><li><h4 id="注意事项和细节-2"><a href="#注意事项和细节-2" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4></li></ul><ol><li>数组是多个相同类型数据的组合</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</li><li><strong>数组创建后如果没有赋值，有默认值:</strong><br><strong>int0,short 0, byte 0, long 0, float 0.0,double 0.0</strong><br><strong>char \u0000,boolean false, String null</strong></li><li><strong>使用数组的步骤 (1)声明数组并开辟空间(2)给数组各个元素赋值(3)使用数组</strong></li><li>数组的下标是从0开始的</li><li>数组下标必须在指定范围内使用，否则报：下标越界异常</li><li>数组属引用类型，数组型数据是对象(object)</li></ol><h3 id="5-1-2-数组赋值机制"><a href="#5-1-2-数组赋值机制" class="headerlink" title="5.1.2 数组赋值机制"></a>5.1.2 数组赋值机制</h3><ul><li><p>数组在默认情況下是引用传递，赋的值是地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">arr1</span> <span class="operator">=</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">arr2</span> <span class="operator">=</span> arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">//arr1[0]=10</span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-22%2010.41.10.jpg" alt="截屏2022-04-22 10.41.10"></p></li></ul><h3 id="5-1-3-数组拷贝"><a href="#5-1-3-数组拷贝" class="headerlink" title="5.1.3 数组拷贝"></a>5.1.3 数组拷贝</h3><ul><li><pre><code class="java">int[] arr1 = &#123;1,2,3&#125;;int[] arr2 = new int[arr1.length];for (int i = 0;i &lt; arr1.length;i++)&#123;  arr2[i] = arr1[i];&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ![IMG_2460](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2460.jpg)</span><br><span class="line"></span><br><span class="line">### 5.1.4 数组反转</span><br><span class="line"></span><br><span class="line">- #### 规律反转</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  public class ArrayReverse01 &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          int[] arr = &#123;11,22,33,44,55,66&#125;;</span><br><span class="line">          int temp = 0,len = arr.length;</span><br><span class="line">          for (int i = 0;i &lt; len/2;i++)&#123;</span><br><span class="line">              temp = arr[len-1-i];</span><br><span class="line">              arr[len-1-i] = arr[i];</span><br><span class="line">              arr[i] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">          for(int i = 0;i &lt; arr.length;i++)&#123;</span><br><span class="line">              System.out.print(arr[i]+&quot;\t&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><h4 id="逆序赋值"><a href="#逆序赋值" class="headerlink" title="逆序赋值"></a>逆序赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReverse02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr1.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len-<span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">            arr2[len-i-<span class="number">1</span>] = arr1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr1 = arr2;<span class="comment">//arr1指向arr2数据空间，此时arr原来的数据空间没有变量引用，会被当作垃圾销毁</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr1.length;i++) &#123;</span><br><span class="line">            System.out.print(arr1[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-1-6-数组添加"><a href="#5-1-6-数组添加" class="headerlink" title="5.1.6 数组添加"></a>5.1.6 数组添加</h3><ul><li><h4 id="静态添加"><a href="#静态添加" class="headerlink" title="静态添加"></a>静态添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            arr2[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        arr2[arr2.length-<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        arr = arr2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="动态添加"><a href="#动态添加" class="headerlink" title="动态添加"></a>动态添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                arr2[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入添加的元素&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">            arr2[arr2.length-<span class="number">1</span>] = addNum;</span><br><span class="line">            arr = arr2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续添加 y/n&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="动态删减"><a href="#动态删减" class="headerlink" title="动态删减"></a>动态删减</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReduce01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr2.length;i++)&#123;</span><br><span class="line">                arr2[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr = arr2;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入是否删除最后一个数字 yes/no&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(key == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-2-二维数组"><a href="#5-2-二维数组" class="headerlink" title="5.2 二维数组"></a>5.2 二维数组</h2><ul><li><h4 id="基本介绍：-11"><a href="#基本介绍：-11" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>一维数组构成了二维数组</p></li><li><h4 id="二维数组遍历"><a href="#二维数组遍历" class="headerlink" title="二维数组遍历"></a>二维数组遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArrary</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="二维数组内存图"><a href="#二维数组内存图" class="headerlink" title="二维数组内存图"></a>二维数组内存图</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-22%2019.40.51.jpg" alt="截屏2022-04-22 19.40.51"></p></li><li><h4 id="注意事项和细节：-13"><a href="#注意事项和细节：-13" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>二维数组元素个数：arr.length</li><li>取出一维元素需要遍历两次</li><li>访问第(i+1)个一维数组的第(j+1)个值  arr [i] [j]</li></ol></li></ul><h3 id="5-2-1-使用方式"><a href="#5-2-1-使用方式" class="headerlink" title="5.2.1 使用方式"></a>5.2.1 使用方式</h3><h4 id="1-动态初始化-1"><a href="#1-动态初始化-1" class="headerlink" title="1-动态初始化"></a>1-动态初始化</h4><ul><li><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><p>类型 数组名[] [] &#x3D; new 类型 [大小] [大小]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoDimensionalArrary02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">        arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-动态初始化2"><a href="#2-动态初始化2" class="headerlink" title="2-动态初始化2"></a>2-动态初始化2</h4><ul><li><h4 id="先声明数组：-1"><a href="#先声明数组：-1" class="headerlink" title="先声明数组："></a>先声明数组：</h4><p>数据类型 数组名[] [];</p><p>例：int a[] [];</p></li><li><h4 id="再创建数组：-1"><a href="#再创建数组：-1" class="headerlink" title="再创建数组："></a>再创建数组：</h4><p>数组名 &#x3D; new 数据类型[大小] [大小];</p><p>例：a &#x3D; new int [2] [3];</p></li></ul><h4 id="3-动态初始化-列数不确定"><a href="#3-动态初始化-列数不确定" class="headerlink" title="3-动态初始化-列数不确定"></a>3-动态初始化-列数不确定</h4><ul><li>&#96;&#96;&#96;java<br>public class TwoDimensionalArrary03 {<br>public static void main(String[] args) {<br>    int[][] arr &#x3D; new int[3][];&#x2F;&#x2F;创建二维数组，只确定一维数组的个数，一维数组开没有开数据空间<br>    for(int i &#x3D; 0;i &lt; arr.length;i++){<br>        arr[i] &#x3D; new int[i+1];&#x2F;&#x2F;给一维数组开空间<br>        for (int j &#x3D; 0; j &lt; arr[i].length;j++){<br>            arr[i][j] &#x3D; i+1;&#x2F;&#x2F;给每一个一维数组元素赋值<br>        }<br>    }<br>    for(int i &#x3D; 0;i &lt; arr.length;i++){<br>        for (int j &#x3D; 0; j &lt; arr[i].length;j++){<br>            System.out.print(arr[i][j]+” “);<br>        }<br>        System.out.println(“ “);<br>    }<br>}<br>}<br>&#x2F;&#x2F;输出结果：1 22 333<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 4-静态初始化</span><br><span class="line"></span><br><span class="line">- #### 语法：</span><br><span class="line"></span><br><span class="line">  类型 数组名[] [] = &#123;&#123;值1,值2&#125;,&#123;值1,值2&#125;,&#123;值1,值2&#125;&#125;</span><br><span class="line"></span><br><span class="line">- #### 注意事项和细节：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 一维数组声明方式：int [] x 或者 int x []</span><br><span class="line">2. 二维数组声明方式：int [] [] y 或者 int[] y [] 或者 int y [] []</span><br><span class="line">3. 二维数组实际上是由多个一维数组组成的，**它的各个一维数组的长度可以相同，也可以不相同**</span><br><span class="line"></span><br><span class="line">## 5.3 排序(基础)</span><br><span class="line"></span><br><span class="line">### 5.3.1 排序分类</span><br><span class="line"></span><br><span class="line">1. 想需要处理的所有数据都加载到内部存储器中进行排序。包括(交换式排序法、选择式排序法和插入式排序法)</span><br><span class="line">2. 数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括(合并排序法和直接合并排序法)</span><br><span class="line"></span><br><span class="line">### 5.3.2 冒泡排序</span><br><span class="line"></span><br><span class="line">- #### 定义：</span><br><span class="line"></span><br><span class="line">  冒泡排序 (Bubble Sorting)的基本思想是：通过对待排序序列从后向前(从下标较大的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒</span><br><span class="line"></span><br><span class="line">- #### 冒泡排序特点</span><br><span class="line"></span><br><span class="line">  1. 一共有n个元素</span><br><span class="line">  2. 一共进行了n-1轮排序，可以看成是外层循</span><br><span class="line">  3. 每1轮排序可以确定一个数的位置，比如第1轮排序确定最大数,第2轮排序，确定第2大的数位置，依次类推</span><br><span class="line">  4. 当进行比较时，如果前面的数大于后面的数，就交换</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class BubbleSort &#123;</span><br><span class="line">      public static void main(String[] args) &#123;</span><br><span class="line">          int temp = 0;</span><br><span class="line">          int[] arr = &#123;24,69,80,57,13,321,34,56,7,-4&#125;;</span><br><span class="line">          for (int i = 0;i &lt; arr.length-1;i++)&#123;</span><br><span class="line">              for(int j = 0;j &lt; arr.length-1-i;j++)&#123;</span><br><span class="line">                  if(arr[j] &gt; arr[j + 1])&#123;</span><br><span class="line">                      temp = arr[j];</span><br><span class="line">                      arr[j] = arr[j+1];</span><br><span class="line">                      arr[j+1] = temp;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(&quot;==排序结果==&quot;);</span><br><span class="line">          for(int i = 0;i &lt; arr.length;i++) &#123;</span><br><span class="line">              System.out.print(arr[i] + &quot;\t&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-4-查找-基础"><a href="#5-4-查找-基础" class="headerlink" title="5.4 查找(基础)"></a>5.4 查找(基础)</h2><h3 id="5-4-1-顺序查找"><a href="#5-4-1-顺序查找" class="headerlink" title="5.4.1 顺序查找"></a>5.4.1 顺序查找</h3><ul><li><pre><code class="java">import java.util.Scanner;public class SeqSearch &#123;    public static void main(String[] args) &#123;        String[] names = &#123;&quot;白眉鹰王&quot;,&quot;金毛狮王&quot;,&quot;紫衫龙王&quot;,&quot;青翼蝠王&quot;&#125;;        Scanner myScanner = new Scanner(System.in);        System.out.println(&quot;请输入名字&quot;);        String findName = myScanner.next();        int index = -1;        for(int i = 0;i &lt; names.length;i++)&#123;            if(findName.equals(names[i]))&#123;                System.out.println(&quot;恭喜找到&quot;+findName);                System.out.println(&quot;序号为&quot;+(i+1));                index = 1;                break;            &#125;        &#125;        if(index == -1)&#123;            System.out.println(&quot;sorry,没有找到&quot;+findName);        &#125;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 5.4.2 二分查找</span><br><span class="line"></span><br><span class="line"># 6 面向对象(基础)</span><br><span class="line"></span><br><span class="line">## 6.1 类与对象</span><br><span class="line"></span><br><span class="line">- #### 基本介绍：</span><br><span class="line"></span><br><span class="line">  - 类是抽象的，概念的，代表一类事物,比如人类, 猫类…即它是数据类型</span><br><span class="line">  - 对象是具体的，实际的，代表一个具体事物，即是实例</span><br><span class="line">  - 类是对象的模板，对象是类的一个个体，对应一个实例</span><br><span class="line"></span><br><span class="line">- #### 对象存在形式⭐️</span><br><span class="line"></span><br><span class="line">  ![截屏2022-04-23 15.48.52](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2015.48.52.jpg)</span><br><span class="line"></span><br><span class="line">### 6.1.1属性/成员变量</span><br><span class="line"></span><br><span class="line">- #### 基本介绍：</span><br><span class="line"></span><br><span class="line">  - 从概念或叫法上看：**成员变量 = 属性 =field(字段)**</span><br><span class="line"></span><br><span class="line">  - 属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)，比如定义猫类 的 int age 就是属性</span><br><span class="line"></span><br><span class="line">- #### 注意事项和细节：</span><br><span class="line"></span><br><span class="line">  1. 属性的定义语法同变量，示例：访问修饰符 属性类型 属性名</span><br><span class="line"></span><br><span class="line">  2. 访问修饰符：控制属性和访问范围，有四种访问修饰符 public,proctected,defaul,private</span><br><span class="line"></span><br><span class="line">  3. 属性的定义类型可以为任意类型，包含基本类型或引用类型</span><br><span class="line"></span><br><span class="line">  4. **属性如果不赋值，有默认值，规则和数组一致:**</span><br><span class="line"></span><br><span class="line">     int0,short 0, byte 0, long 0, float 0.0,double 0.0</span><br><span class="line">     char \u0000,boolean false, String null</span><br><span class="line"></span><br><span class="line">### 6.1.2如何创建对象</span><br><span class="line"></span><br><span class="line">- #### 先声明在创建</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  Cat cat;</span><br><span class="line">  cat = new Cat();</span><br></pre></td></tr></table></figure></code></pre></li><li><h4 id="直接创建"><a href="#直接创建" class="headerlink" title="直接创建"></a>直接创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure></li><li><h4 id="对象创建流程分析⭐️⭐️"><a href="#对象创建流程分析⭐️⭐️" class="headerlink" title="对象创建流程分析⭐️⭐️"></a>对象创建流程分析⭐️⭐️</h4><ol><li><p>加载Person类信息(就是Person.class 且只加载一次)</p></li><li><p>在堆中分配空间(地址)</p></li><li><p><strong>完成对象初始化</strong></p><p>**(3.1默认初始化 age &#x3D; 0 name &#x3D;null  **</p><p>**3.2显示初始化 age &#x3D; 90 name &#x3D; null **</p><p><strong>3.3构造器初始化 age &#x3D; 20 name &#x3D; 小倩)</strong></p></li><li><p>在对象在堆中的地址返回给P(P是对象名，是对象的引用)</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-27%2011.41.50.jpg"></p></li></ul><h3 id="6-1-3对象分配机制"><a href="#6-1-3对象分配机制" class="headerlink" title="6.1.3对象分配机制"></a>6.1.3对象分配机制</h3><ul><li>&#96;&#96;&#96;java<br>Person p1 &#x3D; new Person();<br>p1.age &#x3D; 10;<br>p1.name &#x3D; “小明”;<br>Person p2 &#x3D; p1&#x2F;&#x2F;把p1赋给了p2，或让p2指向p1<br>System.out.println(p2.age);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ![截屏2022-04-23 16.52.38](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2016.52.38.jpg)</span><br><span class="line"></span><br><span class="line">- #### Java内存结构分析：</span><br><span class="line"></span><br><span class="line">  1. 栈：一般存放基本数据类型(局部变量)</span><br><span class="line">  2. 堆：存放对象(Cat cat，数组等)</span><br><span class="line">  3. 方法区：常量池(常量，比如字符串)，类加载信息</span><br><span class="line"></span><br><span class="line">- #### Java创建对象流程⭐️</span><br><span class="line"></span><br><span class="line">  1. 先加载Person类信息(属性和方法信息，只会加载一次)</span><br><span class="line"></span><br><span class="line">  2. 在堆中分配空间，进行默认初始化(看规则)</span><br><span class="line"></span><br><span class="line">  3. 把地址赋给 p，p就指向对象</span><br><span class="line"></span><br><span class="line">  4. 行指定初始化，比如 p.name =&quot; jack&quot;  p.age = 10</span><br><span class="line"></span><br><span class="line">     ```java</span><br><span class="line">     Person p = new Person();</span><br><span class="line">     p.name = &quot;jack&quot;;</span><br><span class="line">     p.age = 10;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-2-成员方法⭐️"><a href="#6-2-成员方法⭐️" class="headerlink" title="6.2 成员方法⭐️"></a>6.2 成员方法⭐️</h2><ul><li><h4 id="方法定义："><a href="#方法定义：" class="headerlink" title="方法定义："></a>方法定义：</h4><ol><li><p>访问修饰符 返回数据类型 方法名(形参列表)  {&#x2F;&#x2F;方法体</p><p>​            语句;</p><p>​            return 返回值;</p><p>}</p><ol><li>形参列表：表示成员方法输入 call(int n)</li><li>数据类型(返回类型)：表示成员方法输出，void 表示没有返回值</li><li>方法主体：表示为了实现某一功能代码块</li><li>return 语句不是必须的</li></ol></li></ol></li></ul><h3 id="6-2-1-调用方法"><a href="#6-2-1-调用方法" class="headerlink" title="6.2.1 调用方法"></a>6.2.1 调用方法</h3><ol><li><p>public 表示方法是公开</p></li><li><p>void：表示方法没有返回值</p></li><li><p>speak() ：speak是方法名，()形参列表</p></li><li><p>{}方法体，可以写我们要执行的代码</p></li><li><p>System.out.println(”我是一个好人”)；表示我们的方法就是输出一句话</p></li><li><p>p1.speak()为调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Method01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.speak();</span><br><span class="line">        p1.cal01();</span><br><span class="line">        p1.cal02(<span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">returnRes</span> <span class="operator">=</span> p1.getSum(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(returnRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你是一个呆猪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            res += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal02</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            res += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-2-2-调用的内存机制"><a href="#6-2-2-调用的内存机制" class="headerlink" title="6.2.2 调用的内存机制"></a>6.2.2 调用的内存机制</h3><ul><li><h4 id="调用的内存机制："><a href="#调用的内存机制：" class="headerlink" title="调用的内存机制："></a>调用的内存机制：</h4></li></ul><ol><li><p>public 表示方法是公开的</p></li><li><p>int：表示方法执行后，返回一个 int 值</p></li><li><p>getsum 方法名</p></li><li><p>(int num1， int num2) 形参列表，2个形参，可以接收用户传入的两个数</p></li><li><p>return res；表示把res 的值，返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-23%2020.16.51.jpg" alt="截屏2022-04-23 20.16.51"></p></li></ol><h3 id="6-2-3-注意事项和细节"><a href="#6-2-3-注意事项和细节" class="headerlink" title="6.2.3 注意事项和细节"></a>6.2.3 注意事项和细节</h3><ul><li><h4 id="访问修饰符："><a href="#访问修饰符：" class="headerlink" title="访问修饰符："></a>访问修饰符：</h4><ol><li>作用是控制方法使用的适用范围，若果不写则默认访问</li></ol></li><li><h4 id="返回类型："><a href="#返回类型：" class="headerlink" title="返回类型："></a>返回类型：</h4><ol><li>一个方法最多有一个返回值</li><li>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</li><li><strong>方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值;要求返回值类型必须和return的值类型一致或兼容</strong></li><li>如果方法是void，则方法体中可以没有return语句，或者 只写 return</li></ol></li><li><h4 id="方法名："><a href="#方法名：" class="headerlink" title="方法名："></a>方法名：</h4><ol><li>方法名遵循驼峰法则</li></ol></li><li><h4 id="参数列表："><a href="#参数列表：" class="headerlink" title="参数列表："></a>参数列表：</h4><ol><li><p>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开，比如 getSum(int n1,int n2)</p></li><li><p>参数类型可以为任意类型，包含基本类型或引用类型，比如 printArr(intlIl map)</p></li><li><p>调用参数的方法时，一定对应着参数列表传入相同类型或莱容类型 的参数</p></li><li><p>方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</p></li></ol></li><li><h4 id="方法体："><a href="#方法体：" class="headerlink" title="方法体："></a>方法体：</h4><ol><li>里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用</li><li>里面不能再定义方法！即：<strong>方法不能嵌套定义</strong></li></ol></li><li><h4 id="方法调用细节："><a href="#方法调用细节：" class="headerlink" title="方法调用细节："></a>方法调用细节：</h4><ol><li>同一个类中的方法调用：直接调用即可</li><li>跨类中的方法A类调用B类方法：需要通过对象名调用</li><li>跨类的方法调用和方法的访问修饰符相关</li></ol></li></ul><h2 id="6-3-成员方传法参机制⭐️⭐️"><a href="#6-3-成员方传法参机制⭐️⭐️" class="headerlink" title="6.3 成员方传法参机制⭐️⭐️"></a>6.3 成员方传法参机制⭐️⭐️</h2><h3 id="6-3-1-基本数据类型的传参数机制"><a href="#6-3-1-基本数据类型的传参数机制" class="headerlink" title="6.3.1 基本数据类型的传参数机制"></a>6.3.1 基本数据类型的传参数机制</h3><ul><li><p><strong>传递的是值(拷贝)，形参的认何改变不影响实参</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.10.50.jpg" alt="截屏2022-04-28 20.10.50"></p></li></ul><h3 id="6-3-2-引用数据类型的传参数机制"><a href="#6-3-2-引用数据类型的传参数机制" class="headerlink" title="6.3.2 引用数据类型的传参数机制"></a>6.3.2 引用数据类型的传参数机制</h3><ul><li><p><strong>引用类型传递的是地址(传递也是值，但是值是地址)，可以通过形参影响实参</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.11.16.jpg" alt="截屏2022-04-28 20.11.16"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-28%2020.11.56.jpg" alt="截屏2022-04-28 20.11.56"></p></li></ul><h2 id="6-4-递归"><a href="#6-4-递归" class="headerlink" title="6.4 递归"></a>6.4 递归</h2><ul><li><h4 id="基本介绍：-12"><a href="#基本介绍：-12" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>递归就是方法自己调用自己,每次调用时传入不同的变量</p></li><li><h4 id="递归调用内存机制"><a href="#递归调用内存机制" class="headerlink" title="递归调用内存机制"></a>递归调用内存机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recursion01</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">         t1.test(<span class="number">5</span>);</span><br><span class="line">         <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> t1.factorial(<span class="number">5</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;res = &quot;</span>+ res);</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">T</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            test(n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factorial(n - <span class="number">1</span>)*n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-25%2011.39.43.jpg"></p></li><li><h4 id="注意事项和细节：-14"><a href="#注意事项和细节：-14" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li><strong>方法的局部变量是独立的，不会相互影响，比如n变量</strong></li><li><strong>如果方法中使用的是引用类型变量(比如数组、对象)，就会共享该引用类型的数据</strong></li><li>递归必须向退出递归的条件逼近，否则就是无限递归</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕，栈空间回收</li></ol></li></ul><h2 id="6-5-方法重载-overload"><a href="#6-5-方法重载-overload" class="headerlink" title="6.5 方法重载 (overload)"></a>6.5 方法重载 (overload)</h2><ul><li><h4 id="基本介绍：-13"><a href="#基本介绍：-13" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java中允许同一个类中，多个同名方法的存在，但要求<strong>形参列表不一致</strong></p></li><li><h4 id="注意事项和细节-3"><a href="#注意事项和细节-3" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h4><ol><li>方法名：必须相同</li><li>形参列表：必须不同(参数类型、个数、顺序)</li><li>返回类型：无要求</li></ol></li></ul><h2 id="6-6-可变参数"><a href="#6-6-可变参数" class="headerlink" title="6.6 可变参数"></a>6.6 可变参数</h2><ul><li><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p>java允许将同一个类中多个同名同功能<strong>但参数个数不同</strong>的方法，封装成一个方法，通过可变参数实现</p></li><li><h4 id="基本语法：-6"><a href="#基本语法：-6" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 返回类型 方法名(**数据类型...** 形参名)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-15"><a href="#注意事项和细节：-15" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>可变参数的实参可以为0个或任意多个</li><li>可变参数的实参可以为数组</li><li><strong>可变参数的本质就是数组</strong></li><li>可变参数可以和普通类型的参数一起放在形参列表，但必须保证可变参数在最后</li><li>一个形参列表中只能出现一个可变参数</li></ol></li></ul><h2 id="6-7-变量作用域⭐️"><a href="#6-7-变量作用域⭐️" class="headerlink" title="6.7 变量作用域⭐️"></a>6.7 变量作用域⭐️</h2><ul><li><h4 id="全局变量和局部变量："><a href="#全局变量和局部变量：" class="headerlink" title="全局变量和局部变量："></a>全局变量和局部变量：</h4><ol><li>主要的变量就是属性(成员变量)和局部变量</li><li>局部变量一般是指在成员方法中定义的变量</li><li>全局变量：也就是属性，作用域为整个类体</li><li>局部变量：也就是除了属性之外的其他变量，作用域为定义它的代码块中</li><li>全局变量(属性)可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值</li></ol></li><li><h4 id="注意事项和细节：-16"><a href="#注意事项和细节：-16" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><strong>全局变量和局部变量可以重名，访问时遵循就近原则</strong></li><li>在同一个作用域中，两个局部变量，不能重名</li><li>全局变量生命周期长，伴随着对象的创建而创建，伴随着对象的销毁而销毁</li><li>局部变量生命周期短，伴随着它的代码块的执行而创建，伴随着代码块的结束而结束：即在一次方法调用过程中</li><li>作用域范围不同<br>全局变量&#x2F;属性：可以被本类使用，或其他类使用(通过对象调用)<br>局部变量：只能在本类中对应的方法中使用</li><li>修饰符不同<br>全局变量&#x2F;属性可以加修饰符<br>局部变量不可以加修饰符</li></ol></li><li><h4 id="两种调用方式"><a href="#两种调用方式" class="headerlink" title="两种调用方式"></a>两种调用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarScopeDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">E</span>();</span><br><span class="line">        e1.test();</span><br><span class="line"></span><br><span class="line">        <span class="type">Per</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Per</span>();</span><br><span class="line">        e1.test2(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Per</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Per</span>();</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(Per p)</span>&#123;<span class="comment">//接收一个类</span></span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Per</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-8-构造器⭐️"><a href="#6-8-构造器⭐️" class="headerlink" title="6.8 构造器⭐️"></a>6.8 构造器⭐️</h2><ul><li><h4 id="基本介绍：-14"><a href="#基本介绍：-14" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对<strong>新对象的初始化</strong></p></li><li><h4 id="基本语法：-7"><a href="#基本语法：-7" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] 方法名 (行参列表)&#123;</span><br><span class="line">  方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-17"><a href="#注意事项和细节：-17" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>修饰符可以默认</p></li><li><p>一个类可以定义多个不同的构造器，即构造器重载</p></li><li><p>构造器名和类名要相同</p></li><li><p>构造器没有返回值</p></li><li><p>构造器是完成对象的初始化，井不是创建对象</p></li><li><p>在创建对象时,系统自动的调用该类的构造方法</p></li><li><p><strong>如果没有定义构造器，系统会自动给类生成一个默认无参构造器(默认构造器)</strong></p></li><li><p><strong>定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constructor01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Pers</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pers</span>();</span><br><span class="line">        <span class="type">Pers</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pers</span>(<span class="string">&quot;jack&quot;</span>,<span class="number">80</span>);</span><br><span class="line">        System.out.println(p1.name+p1.age);</span><br><span class="line">        System.out.println(p2.name+p2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pers</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pers</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器1被调用&quot;</span>);</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pers</span><span class="params">(String pName,<span class="type">int</span> pAge)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器2被调用&quot;</span>);</span><br><span class="line">        name = pName;</span><br><span class="line">        age = pAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-9-this"><a href="#6-9-this" class="headerlink" title="6.9  this"></a>6.9  this</h2><ul><li><h4 id="基本介绍：-15"><a href="#基本介绍：-15" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java虚拟机会给每个对象分配this，代表当前对象</p></li><li><h4 id="内存分析："><a href="#内存分析：" class="headerlink" title="内存分析："></a>内存分析：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-27%2015.38.13.jpg" alt="截屏2022-04-27 15.38.13"></p></li><li><h4 id="注意事项和细节：-18"><a href="#注意事项和细节：-18" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>this关键字可以用来访问本类的属性、方法、构造器</li><li>this用于区分当前类的属性和局部变量</li><li>访问成员方法的语法：this.方法名(参数列表);</li><li><strong>访问构造器语法：this(参数列表)：注意只能在构造器中使用(在构造器中访问另外一个构造器，必须放在第一条语句)</strong></li><li>this不能在类定义的外部使用，只能在类定义的方法中使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisExercise01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;marry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>(<span class="string">&quot;marry&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(p1.compareTo(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(person p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age == p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="7-面向对象-中级"><a href="#7-面向对象-中级" class="headerlink" title="7 面向对象(中级)"></a>7 面向对象(中级)</h1><h2 id="7-0-IDEA"><a href="#7-0-IDEA" class="headerlink" title="7.0  IDEA"></a>7.0  IDEA</h2><ul><li><h4 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h4><ol><li>command + d  删除当前行</li><li>command + option + 向下光标  向下复制当前行</li><li>option + &#x2F;  补全代码</li><li>command + &#x2F;  注释</li><li>option + enter  导入该行的类</li><li>command + option + L  格式化代码</li><li>control + R  运行</li><li>optio + A  构造器</li><li>control + H 查看继承关系</li><li>command + B  定位方法</li><li>.var  自动变量名</li><li>Command + option + T 环绕方式</li></ol></li><li><h4 id="常用模版快捷键"><a href="#常用模版快捷键" class="headerlink" title="常用模版快捷键"></a>常用模版快捷键</h4><ol><li>fori  遍历</li><li>itar  遍历数组</li><li>iter  增强遍历</li><li>sout  打印换行</li></ol></li></ul><h2 id="7-1-包"><a href="#7-1-包" class="headerlink" title="7.1 包"></a>7.1 包</h2><ul><li><h4 id="基本语法：-8"><a href="#基本语法：-8" class="headerlink" title="基本语法："></a>基本语法：</h4><p>Package 包名</p></li><li><h4 id="包的命名："><a href="#包的命名：" class="headerlink" title="包的命名："></a>包的命名：</h4><ul><li>只能包含数字、字母、下划线、小圆点，但不能用数字开头，不能是关键字或保留字</li></ul></li><li><h4 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h4><ul><li>小写字母＋小圆点一般是  com.公司名.项目名.业务模块名</li></ul></li><li><h4 id="引入包："><a href="#引入包：" class="headerlink" title="引入包："></a>引入包：</h4><ol><li>import java.uti Scanner；就只是引入一个类Scanner</li><li>import java.util*：1&#x2F; 表示将java.util 包所有都引入</li></ol></li><li><h4 id="注意事项和细节：-19"><a href="#注意事项和细节：-19" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>package 的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一个package</li><li>import指令 位置放在package的下面，在类定义前面,可以有多句目没有顺序要求</li></ol></li></ul><h2 id="7-2-访问修饰符"><a href="#7-2-访问修饰符" class="headerlink" title="7.2 访问修饰符"></a>7.2 访问修饰符</h2><ul><li><h4 id="基本介绍：-16"><a href="#基本介绍：-16" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java提供四种访问控制修饰符号，用于控制方法和属性(成员变量)的访问权限(范围)</p></li><li><h4 id="访问权限⭐️⭐️："><a href="#访问权限⭐️⭐️：" class="headerlink" title="访问权限⭐️⭐️："></a>访问权限⭐️⭐️：</h4><ol><li><p>公开级别：用public修饰,对外公开</p></li><li><p>受保护级别：用protected修饰，对子类和同一个包中的类公开</p></li><li><p>默认级别：没有修饰符号，向同一个包的类公开</p></li><li><p>私有级别：用private修饰,只有类本身可以访问，不对外公开</p><table><thead><tr><th>访问级别</th><th>访问修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>受保护</td><td>protected</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td>默认</td><td>无</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>私有</td><td>private</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table></li></ol></li><li><h4 id="注意事项和细节：-20"><a href="#注意事项和细节：-20" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>修饰符可以用来修饰类中的属性，成员方法以及类</li><li><strong>只有默认的和public才能修饰类</strong>，并目遵循上述访问权限的特点</li><li>子类待定</li><li>成员方法的访问规则和属性完全样</li></ol></li></ul><h2 id="7-3-封装⭐️"><a href="#7-3-封装⭐️" class="headerlink" title="7.3 封装⭐️"></a>7.3 封装⭐️</h2><ul><li><h4 id="基本介绍：-17"><a href="#基本介绍：-17" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作方法封装在一起数据被保护在内部，程序的其它部分只有通过被授权的操作（方法），才能对数据进行操作</p></li><li><h4 id="封装步骤："><a href="#封装步骤：" class="headerlink" title="封装步骤："></a>封装步骤：</h4><ol><li>将属性进行私有化private[不能直接修改属性]</li><li>提供一个公共的(public)set方法，用于对属性判断井赋值<br>public void setxxx(类型 参数名){<br>加入数据验证的业务逻辑;<br>    属性 &#x3D; 参数名;}</li><li>提供个公共的(public)get方法，用于获取属性的值<br>public 数据类型 getXxxx(){<br>    return XX;}</li></ol></li></ul><h2 id="7-4-继承⭐️"><a href="#7-4-继承⭐️" class="headerlink" title="7.4 继承⭐️"></a>7.4 继承⭐️</h2><ul><li><h4 id="基本介绍：-18"><a href="#基本介绍：-18" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>继承可以解决代码复用，当多个类存在相同的属性(变量)和方法时,可以以这些类中抽象出交类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可</p></li><li><h4 id="基本语法：-9"><a href="#基本语法：-9" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-30%2011.21.14.jpg" alt="截屏2022-04-30 11.21.14"></p></li><li><h4 id="注意事项和细节：-21"><a href="#注意事项和细节：-21" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>子类继承了所有的属性和方法，<strong>非私有的属性和方法可以在子类直接访问</strong>，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，<strong>默认情况下总会去调用父类的无参构造器</strong>，如果父类没有提供无参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译不会通过</p></li><li><p>指定去调用父类的某个构造器，则显式的调用一下：super(参数列表)</p></li><li><p><strong>super在使用时，必须放在构造器第一行(super只能在构造器中使用)</strong></p></li><li><p><strong>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</strong></p></li><li><p>java所有类都是Object类的子类</p></li><li><p>父类构造器的调用不限于直接父类！将一直往上追潮直到Object类</p></li><li><p>子类最多只能继承一个父类(指直接继承)，即java中是单继承机制</p></li><li><p>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TopBase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); Object的无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;构造器TopBase() 被调用...&quot;</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> <span class="keyword">extends</span> <span class="title class_">TopBase</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">()</span> &#123; <span class="comment">//无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        <span class="comment">//默认super()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Base</span><span class="params">(String name)</span> &#123;<span class="comment">//有参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;父类Base(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父类提供一个public的方法,返回了n4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test100&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test200&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test300&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test400&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//call</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callTest400</span><span class="params">()</span> &#123;</span><br><span class="line">        test400();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/输入ctrl + H 可以看到类的继承关系</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123; <span class="comment">//子类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用父类的无参构造器, 如下或者 什么都不写,默认就是调用super()</span></span><br><span class="line">        <span class="comment">//super();//父类的无参构造器</span></span><br><span class="line">        <span class="comment">//2. 调用父类的 Base(String name) 构造器</span></span><br><span class="line">        <span class="comment">//super(&quot;hsp&quot;);</span></span><br><span class="line">        <span class="comment">//3. 调用父类的 Base(String name, int age) 构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;king&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//细节：super在使用时，必须放在构造器第一行</span></span><br><span class="line">        <span class="comment">//细节: super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</span></span><br><span class="line">        <span class="comment">//this() 不能再使用了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name, int age)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;<span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//super(); //默认调用父类的无参构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;smith&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub()构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//do nothing...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类Sub(String name)构造器被调用....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOk</span><span class="params">()</span> &#123;<span class="comment">//子类方法</span></span><br><span class="line">        <span class="comment">//非私有的属性和方法可以在子类直接访问</span></span><br><span class="line">        <span class="comment">//但是私有属性和方法不能在子类直接访问</span></span><br><span class="line">        System.out.println(n1 + <span class="string">&quot; &quot;</span> + n2 + <span class="string">&quot; &quot;</span> + n3);</span><br><span class="line">        test100();</span><br><span class="line">        test200();</span><br><span class="line">        test300();</span><br><span class="line">        <span class="comment">//test400();错误</span></span><br><span class="line">        <span class="comment">//要通过父类提供公共的方法去访问</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n4=&quot;</span> + getN4());</span><br><span class="line">        callTest400();<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="继承本质："><a href="#继承本质：" class="headerlink" title="继承本质："></a>继承本质：</h4><p>子对象创建完成，建立查找关系</p></li><li><h4 id="继承内存图⭐️："><a href="#继承内存图⭐️：" class="headerlink" title="继承内存图⭐️："></a>继承内存图⭐️：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-04-30%2017.13.52.jpg" alt="截屏2022-04-30 17.13.52"></p></li></ul><h2 id="7-5-多态⭐️⭐️"><a href="#7-5-多态⭐️⭐️" class="headerlink" title="7.5 多态⭐️⭐️"></a>7.5 多态⭐️⭐️</h2><h3 id="7-5-1多态"><a href="#7-5-1多态" class="headerlink" title="7.5.1多态"></a>7.5.1多态</h3><ul><li><h4 id="基本介绍：-19"><a href="#基本介绍：-19" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>方法或对象具有多种形态，是面向对象的第三大特征，多态是建立在封装和继承基础之上的</p></li><li><h4 id="多态具体体现"><a href="#多态具体体现" class="headerlink" title="多态具体体现"></a>多态具体体现</h4><ul><li>方法的多态<ol><li>重写和重载就是体现多态</li></ol></li><li><strong>对象的多态</strong><ol><li>一个对象的编译类型和运行类型可以不一致</li><li>编译类型在定义对象时，就确定了，不能改变</li><li>运行类型是可以变化的</li><li><strong>编译类型看定义时 &#x3D; 号 的左边，运行类型看 &#x3D; 号的 右边</strong></li></ol></li></ul></li><li><h4 id="注意事项和细节：-22"><a href="#注意事项和细节：-22" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ul><li><p>向上转型</p><ol><li><strong>本质：父类的引用指向了子类的对象</strong></li><li>语法：父类类型 引用名 &#x3D; new 子类类型();</li><li>特点：编译类型看左边，运行类型看右边</li><li>可以调用父类中的所有成员(需遵守访问权限)</li><li><strong>不能调用子类特有成员</strong></li><li>最终运行效果看子类的具体实现</li></ol></li><li><p>向下转型</p><ol><li><strong>本质：把指向子类对象的父类引用，转成子类对象的子类引用</strong></li><li>语法：子类类型 引用名 &#x3D; (子类类型) 父类引用;</li><li>只能强转父类引用，不能强转父类对象</li><li><strong>父类的引用必须指向的是当前目标类型的对象</strong></li><li>当向下转型后，可以调用子类类型中所有的成员</li></ol></li><li><p>属性</p><ol><li><p>属性没有重写，属性的值看编译类型</p></li><li><p><strong>instance of 比较较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型: 父类的引用指向了子类的对象</span></span><br><span class="line">        <span class="comment">//语法：父类类型引用名 = new 子类类型();</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//可以吗? 可以 Object 也是 Cat的父类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型调用方法的规则如下:</span></span><br><span class="line">        <span class="comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span></span><br><span class="line">        <span class="comment">//(2)但是不能调用子类的特有的成员</span></span><br><span class="line">        <span class="comment">//(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span></span><br><span class="line">        <span class="comment">//animal.catchMouse();错误</span></span><br><span class="line">        <span class="comment">//(4)最终运行效果看子类(运行类型)的具体实现, 即调用方法时，按照从子类(运行类型)开始查找方法</span></span><br><span class="line">        <span class="comment">//，然后调用，规则我前面我们讲的方法调用规则一致。</span></span><br><span class="line">        animal.eat();<span class="comment">//猫吃鱼..</span></span><br><span class="line">        animal.run();<span class="comment">//跑</span></span><br><span class="line">        animal.show();<span class="comment">//hello,你好</span></span><br><span class="line">        animal.sleep();<span class="comment">//睡</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师希望，可以调用Cat的 catchMouse方法</span></span><br><span class="line">        <span class="comment">//多态的向下转型</span></span><br><span class="line">        <span class="comment">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span></span><br><span class="line">        <span class="comment">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) animal;</span><br><span class="line">        cat.catchMouse();<span class="comment">//猫抓老鼠</span></span><br><span class="line">        <span class="comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) animal; <span class="comment">//可以吗？</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//属性没有重写之说！属性的值看编译类型</span></span><br><span class="line">        <span class="type">Base</span> <span class="variable">base</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();<span class="comment">//向上转型</span></span><br><span class="line">        System.out.println(base.count);<span class="comment">// ？ 看编译类型 10</span></span><br><span class="line">        <span class="type">Sub</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(sub.count);<span class="comment">//?  20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;<span class="comment">//子类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyDetail03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BB</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  BB);<span class="comment">// true</span></span><br><span class="line">        System.out.println(bb <span class="keyword">instanceof</span>  AA);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//aa 编译类型 AA, 运行类型是BB</span></span><br><span class="line">        <span class="comment">//BB是AA子类</span></span><br><span class="line">        <span class="type">AA</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BB</span>();</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> AA);</span><br><span class="line">        System.out.println(aa <span class="keyword">instanceof</span> BB);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> AA);<span class="comment">//false</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(str instanceof AA);</span></span><br><span class="line">        System.out.println(str <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;&#125; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;&#125;<span class="comment">//子类</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h3 id="7-5-2-动态绑定机制⭐️⭐️"><a href="#7-5-2-动态绑定机制⭐️⭐️" class="headerlink" title="7.5.2 动态绑定机制⭐️⭐️"></a>7.5.2 动态绑定机制⭐️⭐️</h3><ul><li><p>当调用对象方法的时候，该方法会和该对象的内存地址&#x2F;<strong>运行类型</strong>绑定</p></li><li><p>当调用对象属性时，没有动态綁定机制，哪里声明，哪里使用()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(a.sum());</span><br><span class="line">        System.out.println(a.sum1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;<span class="comment">//当子类不存在sum方法时，会从父类找到sum方法，但动态绑定机制会找到子类的getI返回i值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-5-3-多态的应用"><a href="#7-5-3-多态的应用" class="headerlink" title="7.5.3 多态的应用"></a>7.5.3 多态的应用</h3><ul><li><h4 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h4><ol><li>多态数组：定义类型为父类类型，里面保存的实际元素类型为子类类型</li><li>多态参数：方法定义的形参类型为父类类型，实参类型允许为子类类型</li></ol></li></ul><h2 id="7-6-Super"><a href="#7-6-Super" class="headerlink" title="7.6  Super"></a>7.6  Super</h2><ul><li><h4 id="基本介绍：-20"><a href="#基本介绍：-20" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>super代表父类的引用，用于访问父类的属性、方法、构造器</p></li><li><h4 id="基本语法：-10"><a href="#基本语法：-10" class="headerlink" title="基本语法："></a>基本语法：</h4><ol><li>访问父类的属性，但不能访问父类的private属性<br>super.属性名;</li><li>访问父类的方法，不能访问父类的private方法<br>super.方法名(参数列表);</li><li>访问父类的构造器(只能放在构造器的第一句，只能出现一句)<br>super(参数列表);</li></ol></li><li><h4 id="注意事项和细节：-23"><a href="#注意事项和细节：-23" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>调用父类的构造器的好处 (分工明确，父类属性由父类初始化，子类的属性由子类初始化)</li><li>当子类中有和父类中的成员(属性和方法) 重名时，为了访问父类的成员，必须通过super，如果没有重名，使用super、this、 直接访问效果相同</li><li>super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则</li></ol></li><li><h4 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a>super和this</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-01%2014.30.49.jpg" alt="截屏2022-05-01 14.30.49"></p></li><li><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Base</span> &#123; <span class="comment">//父类是Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Base类的eat().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="comment">//4个属性</span></span><br><span class="line">    <span class="comment">//public int n1 = 100;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void cal() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;A类的cal() 方法...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">test200</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test300</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test400</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访问爷爷类的成员；</span></span><br><span class="line">        <span class="comment">// 如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则。A-&gt;B-&gt;C</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;super.n1=&quot;</span> + <span class="built_in">super</span>.n1);</span><br><span class="line">        <span class="built_in">super</span>.cal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类的属性 , 但不能访问父类的private属性 [案例]super.属性名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n2 + <span class="string">&quot; &quot;</span> + <span class="built_in">super</span>.n3 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的cal() 方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B类的sum()&quot;</span>);</span><br><span class="line">        <span class="comment">//希望调用父类-A 的cal方法</span></span><br><span class="line">        <span class="comment">//这时，因为子类B没有cal方法，因此我可以使用下面三种方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法时(cal() 和 this.cal())，顺序是:</span></span><br><span class="line">        <span class="comment">// (1)先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">// (2)如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">// (3)如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找方法的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找方法的过程中，没有找到，则提示方法不存在</span></span><br><span class="line">        <span class="comment">//cal();</span></span><br><span class="line">        <span class="built_in">this</span>.cal(); <span class="comment">//等价 cal</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找cal方法(super.call()) 的顺序是直接查找父类，其他的规则一样</span></span><br><span class="line">        <span class="comment">//super.cal();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示访问属性的规则</span></span><br><span class="line">        <span class="comment">//n1 和 this.n1 查找的规则是</span></span><br><span class="line">        <span class="comment">//(1) 先找本类，如果有，则调用</span></span><br><span class="line">        <span class="comment">//(2) 如果没有，则找父类(如果有，并可以调用，则调用)</span></span><br><span class="line">        <span class="comment">//(3) 如果父类没有，则继续找父类的父类,整个规则，就是一样的,直到 Object类</span></span><br><span class="line">        <span class="comment">// 提示：如果查找属性的过程中，找到了，但是不能访问， 则报错, cannot access</span></span><br><span class="line">        <span class="comment">//      如果查找属性的过程中，没有找到，则提示属性不存在</span></span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找n1 (super.n1) 的顺序是直接查找父类属性，其他的规则一样</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的方法，不能访问父类的private方法 super.方法名(参数列表);</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.test100();</span><br><span class="line">        <span class="built_in">super</span>.test200();</span><br><span class="line">        <span class="built_in">super</span>.test300();</span><br><span class="line">        <span class="comment">//super.test400();//不能访问父类private方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//访问父类的构造器(这点前面用过)：super(参数列表);只能放在构造器的第一句，只能出现一句！</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        <span class="comment">//super(&quot;jack&quot;, 10);</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-7方法重写-overwrite"><a href="#7-7方法重写-overwrite" class="headerlink" title="7.7方法重写(overwrite)"></a>7.7方法重写(overwrite)</h2><ul><li><h4 id="基本介绍：-21"><a href="#基本介绍：-21" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>子类的方法和父类方法一致，那么子类的方法覆盖了父类的方法</p></li><li><h4 id="注意事项和细节：-24"><a href="#注意事项和细节：-24" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>子类的方法的形参列表,方法名称，要和父类方法的形参列表,方法名称完全一样</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类</li><li>子类方法大于等于父类方法的访问权限</li></ol></li></ul><h2 id="7-8-Object类"><a href="#7-8-Object类" class="headerlink" title="7.8  Object类"></a>7.8  Object类</h2><ul><li><h4 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h4><ol><li><p>既可以判断基本类型，又可以判断引用类型</p></li><li><p>如果判断基本类型，判断的是值是否相等</p></li><li><p>如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Equals01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="type">A</span> <span class="variable">c</span> <span class="operator">=</span> b;</span><br><span class="line">        System.out.println(a == c);</span><br><span class="line">        <span class="type">B</span> <span class="variable">bObj</span> <span class="operator">=</span> a;</span><br><span class="line">        System.out.println(bObj == c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><ol><li>equals:是Object类中的方法，只能判断引用类型</li><li>默认判断的是地址是否相等，子类中往往重写该方法，用于判断<strong>内容</strong>是否相等</li></ol></li><li><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h4><ol><li>提高具有哈希结构的容器的效率</li><li><strong>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的</strong></li><li><strong>两个引用，如果指向的是不同对象，则哈希值是不一样的</strong></li><li>哈希值主要根据地址号来的，<a href>不能完全将哈希值等价地址</a></li><li>后面在集合中hashCode 如果需要的话，也会重写</li></ol></li><li><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><ol><li>默认返回：全类名＋@+哈希值的十六进制</li><li>子类往往重写to String方法，用于返回对象的属性信息</li><li>重写toString方法，打印对象或拼接对象时，都会自动调用该对象的toString形式</li><li>当直接输出一个对象时，toString 方法会被默认的调用</li></ol></li><li><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h4><ol><li>当对象被回收时，系统自动调用该对象的finalize方法</li><li>子类可以重写该方法，做一些释放资源的操作</li><li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，<strong>在销毁该对象前，会先调用finalize方法</strong></li><li>垃圾回收机制的调用，是由系统来決定(即有自己的GC算法)，也可以通过System.gc() 主动触发垃圾回收机制</li></ol></li></ul><h2 id="7-9断点调试"><a href="#7-9断点调试" class="headerlink" title="7.9断点调试"></a>7.9断点调试</h2><ul><li><h4 id="基本介绍：-22"><a href="#基本介绍：-22" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。进行分析从而找到这个Bug</p></li><li><h4 id="注意事项和细节：-25"><a href="#注意事项和细节：-25" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>在断点调试 过程中，是运行状态，是以对象的运行类型来执行的</li><li>F7：跳入方法内</li><li>F8：逐行执行代码<br>shift+F8:跳出方法</li><li>F9：resume，执行到下一个断点</li></ol></li></ul><h1 id="8-面向对象-高级"><a href="#8-面向对象-高级" class="headerlink" title="8 面向对象(高级)"></a>8 面向对象(高级)</h1><h2 id="8-1-类变量和类方法⭐️"><a href="#8-1-类变量和类方法⭐️" class="headerlink" title="8.1 类变量和类方法⭐️"></a>8.1 类变量和类方法⭐️</h2><h3 id="8-1-1-类变量"><a href="#8-1-1-类变量" class="headerlink" title="8.1.1 类变量"></a>8.1.1 类变量</h3><ul><li><h4 id="基本介绍：-23"><a href="#基本介绍：-23" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类变量也叫静态变量&#x2F;静态属性，是该类的所有对象共享的变量,任何一个该类的对象去访问它时,取到的都是相同的值,同样任何一个该类的对象去修改它时,修改的也是同一个变量</p></li><li><h4 id="基本语法：-11"><a href="#基本语法：-11" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据类型 变量名;</span><br></pre></td></tr></table></figure></li><li><h4 id="如何访问类变量："><a href="#如何访问类变量：" class="headerlink" title="如何访问类变量："></a>如何访问类变量：</h4><ol><li>类名.类变量名</li><li>对象名.类变量名</li><li>静态变量的访问修饰符的访问权限和范围和普通属性是一样的</li></ol></li><li><h4 id="内存布局："><a href="#内存布局：" class="headerlink" title="内存布局："></a>内存布局：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-10%2015.37.17.jpg" alt="截屏2022-05-10 15.37.17"></p></li><li><h4 id="注意事项和细节：-26"><a href="#注意事项和细节：-26" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>类变量是该类的所有对象共享的，而实例变量是每个对象独享的</li><li>加上static称为类变量或静态变量，否则称为实例变量&#x2F;普通变量&#x2F;非静态变量</li><li>类变量可以通过 类名.类变量名 或者 对象名.类变量名来访问</li><li>实例变量不能通过类名.类变量名方式访问</li><li><strong>类变量是在类加载时就初始化</strong></li><li><strong>类变量的生命周期是随类的加载开始，随着类消亡而销毁</strong></li></ol></li></ul><h3 id="8-1-2-类方法"><a href="#8-1-2-类方法" class="headerlink" title="8.1.2 类方法"></a>8.1.2 类方法</h3><ul><li><h4 id="基本介绍：-24"><a href="#基本介绍：-24" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>类方法也叫静态方法</p></li><li><h4 id="基本语法：-12"><a href="#基本语法：-12" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符 <span class="keyword">static</span> 数据返回类型 方法名()&#123;&#125;;</span><br><span class="line"><span class="keyword">static</span> 访问修饰符 数据返回类型 方法名()&#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="类方法调用："><a href="#类方法调用：" class="headerlink" title="类方法调用："></a>类方法调用：</h4><ol><li>类名.类方法名</li><li>对象名.类方法名</li><li>满足访问修饰符的访向权限和范围</li></ol></li><li><h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><ol><li>当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法,提高开发效率</li><li>程序员实际开发，往往会将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用</li></ol></li><li><h4 id="注意事项和细节：-27"><a href="#注意事项和细节：-27" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区：<br>类方法中无this的参数，普通方法中隐含着this的参数</li><li>类方法可以通过类名调用，也可以通过对象名调用</li><li>音通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)，不能通过类名调用</li><li>类方法中不允许使用和对象有关的关键字，比如this和super</li><li><strong>静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员</strong></li></ol></li></ul><h2 id="8-2-main方法"><a href="#8-2-main方法" class="headerlink" title="8.2  main方法"></a>8.2  main方法</h2><ul><li><h4 id="深入理解main方法："><a href="#深入理解main方法：" class="headerlink" title="深入理解main方法："></a>深入理解main方法：</h4><ol><li>java虛拟机需要调用类的main0方法，所以该方法的访问权限化须是public</li><li>java虚拟机在执行main0方法时不必创建对象，所以该方法心须是static</li><li>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</li><li>java 执行的程序 参数1 参数2 参数3</li></ol></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-10%2016.50.41.jpg" alt="截屏2022-05-10 16.50.41"></p><ul><li><h4 id="注意事项和细节：-28"><a href="#注意事项和细节：-28" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>在main()方法中，我们可以直接调用main方法所在类的静态方法或静态属性</li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的目静态成员</li></ol></li></ul><h2 id="8-3-代码块"><a href="#8-3-代码块" class="headerlink" title="8.3 代码块"></a>8.3 代码块</h2><ul><li><h4 id="基本介绍：-25"><a href="#基本介绍：-25" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>代码化块又称为初始化块,属于类中的成员，类似于方法，将逻辑语句封装在方法体中，通过们包围起来。但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用</p></li><li><h4 id="基本语法：-13"><a href="#基本语法：-13" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">  代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><ol><li>修饰符 可选，要写的话，也只能写 static</li><li>代码块分为两类，使用static 修饰的叫静态代码块，没有static修饰的，叫普通代码块</li><li>逻辑语句可以为任何逻辑语句</li><li>：号可以写上，也可以省略</li></ol></li><li><h4 id="注意事项和细节：-29"><a href="#注意事项和细节：-29" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>static代码块是类加载时执行，且只会执行一次</li><li>普通代码块是在创建对象的调用的，创建一次，调用一次</li><li>类什么时候被加载⭐️⭐️：<ul><li>创建对象实例时</li><li>创建子类对象实例时，父类也会被加载</li><li>使用类的静态成员时</li></ul></li><li>创建一个<strong>对象</strong>时，在一个类的调用<strong>顺序</strong>：<ul><li>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静<br>态变量初始化，则按他们定义的顺序调</li><li>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和stat多个普通属性初始化，则按定义顺序调用)</li><li>调用构造器</li></ul></li><li>构造方法(构造器)的最前面其实隐含了 super()和调用普通代码块</li><li><strong>创建子类时顺序</strong>⭐️⭐️：<ul><li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li><li>父类构造方法</li><li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li><li>子类构造方法</li></ul></li><li>静态代码块只能直接调用静态成员(静态属性和静态方法)，普通代码块可以调用任意成员</li></ol></li></ul><h2 id="8-4-单例设计模式"><a href="#8-4-单例设计模式" class="headerlink" title="8.4 单例设计模式"></a>8.4 单例设计模式</h2><ul><li><h4 id="基本介绍：-26"><a href="#基本介绍：-26" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p><p>单例模式有两种方式：1. 饿汉式  2.懒汉式</p></li><li><h4 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h4><ol><li><p>构造器私有化</p></li><li><p>类的内部创建静态对象</p></li><li><p>向外暴露一个静态公共方法</p></li><li><p>特点：在类加载的时候就创建对象实例，可能存在资源浪费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">gf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">Instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="懒汉式："><a href="#懒汉式：" class="headerlink" title="懒汉式："></a>懒汉式：</h4><ol><li><p>构造器私有化</p></li><li><p>定义一个static静态属性对象</p></li><li><p>提供一个public的static方法，返回一个对象</p></li><li><p>只有当使用(3)的方法时，才返回对象，再次调用时，返回上次创建的对象</p></li><li><p>特点：线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cat == <span class="literal">null</span>)&#123;</span><br><span class="line">            cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><ol><li>最主要的区别在于创建对象的时机不同：饿汉式是在类加载就创建了对象实例，而懒汉式是在使用时才创建</li><li>饿汉式不存在线程安全问题，徽汉式存在线程安全问题</li><li>饿汉式存在浪费姿源的可能，对象实例都没有使用，那么饿汉式创建的对象就浪费，懒汉式是使用时才创建，就不存在这个问题</li></ol></li></ul><h2 id="8-5-final"><a href="#8-5-final" class="headerlink" title="8.5  final"></a>8.5  final</h2><ul><li><h4 id="基本介绍：-27"><a href="#基本介绍：-27" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>final可以修饰类、属性、方法、局部变量</p></li><li><p>final 类，类不能被继承</p></li><li><p>final 方法，子类无法重写方法</p></li><li><p>final 属性，属性无法被修改</p></li><li><p>final 局部变量，局部变量无法被修改</p></li></ul></li><li><h4 id="注意事项和细节：-30"><a href="#注意事项和细节：-30" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>final修饰的属性又叫常量，一般用XX_XX_XX 来命名</li><li>final<strong>修饰的属性在定义时</strong>,必须赋初值,并且以后不能再修改，赋值可以在如下位置：<br><strong>定义时、构造器、代码块</strong></li><li>final修饰的属性是<strong>静态的</strong>，则初始化的位置只能是：定义时、静态代码块</li><li>final类不能继承，但可以实例化对象</li><li><strong>如果类不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承</strong></li><li>如果一个类已经是final类了，就没有必要再将方法修饰成final方法</li><li>final不能修饰构造器本身</li><li>final 和static 往往搭配使用，效率更高，不会导致类加载-底层编译器做了优化处理</li><li>包装类(Integer, Double,Float,Boolean等都是final)，String也是final类</li></ol></li></ul><h2 id="8-6-抽象类"><a href="#8-6-抽象类" class="headerlink" title="8.6 抽象类"></a>8.6 抽象类</h2><ul><li><h4 id="基本介绍：-28"><a href="#基本介绍：-28" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>用abstract 关键字来修饰一个类时,这个类就叫抽象类</p></li><li><p>用abstract 关键字来修饰一个方法时,这个方法就是抽象方法，没有方法体</p></li><li><p>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类</p></li></ul></li><li><h4 id="注意事项和细节：-31"><a href="#注意事项和细节：-31" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>抽象类不能被实例化</li><li><strong>抽象类可以没有abstract方法</strong></li><li>一旦类包含了abstract方法,则这个类必须声明为abstract</li><li>abstract 只能修饰类和方法</li><li>抽象类可以有任意成员，抽象类本质还是类</li><li><strong>抽象方法不能有主体</strong></li><li><strong>如果一个类继承了抽象类，则它必须实现抽象类的所有的抽象方法，除非它自己也声明为abstract类</strong></li><li>抽象方法不能使用private、final 和static来修饰，因为这些关键字都是和重写相违背的</li></ol></li><li><h4 id="抽象类模版设计模式："><a href="#抽象类模版设计模式：" class="headerlink" title="抽象类模版设计模式："></a>抽象类模版设计模式：</h4><ol><li>编写方法cal()，可以计算某段代码的耗时时间</li><li>编写抽象方法job()</li><li>编写一个子类A,继承抽象类Template，井实现job方法</li><li>编写一个测试类TestTemplate,看看是否好用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.cal();</span><br><span class="line"></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.cal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            job();</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;时间&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            num += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            num *= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-7-接口⭐️"><a href="#8-7-接口⭐️" class="headerlink" title="8.7 接口⭐️"></a>8.7 接口⭐️</h2><ul><li><h4 id="基本介绍：-29"><a href="#基本介绍：-29" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来</p></li><li><h4 id="基本语法：-14"><a href="#基本语法：-14" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 类名 implements 接口 &#123;</span><br><span class="line">  自己属性;</span><br><span class="line">  自己方法;</span><br><span class="line">  <span class="comment">//必须实现接口的抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Jdk7.0前 接口里的所有方法都没有方法体(只能<strong>抽象方法</strong>)</li><li>Jdk8.0后接口类可以有<strong>静态方法，defaut实现方法</strong>，也就是说接口中可以有方法的具体实现</li></ol></li><li><h4 id="注意事项和细节：-32"><a href="#注意事项和细节：-32" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>接口不能被实例化</li><li>接口中所有的方法是 public 和 abstrac 方法，接口中抽象方法，可以不用 abstract 修饰</li><li>普通类实现接口，就必须将该接口的所有方法实现</li><li><strong>抽象类实现接口，可以不用实现接口的方法</strong></li><li>一个类同时可以实现多个接口</li><li>接口中的属性,只能是 final 的，而且是 public static final 修饰符</li><li>接口中属性的访问形式：接口名.属性名</li><li>一个接口不能继承其它的类,但是可以继承多个别的接口</li><li>接口的修饰符 只能是 public 和默认，这点和类的修饰符是一样的</li></ol></li><li><h4 id="实现接口VS继承类："><a href="#实现接口VS继承类：" class="headerlink" title="实现接口VS继承类："></a>实现接口VS继承类：</h4><ol><li>继承的价值主要在于：解决代码的复用性和可维护性</li><li>接口的价值主要在于：设计，设计好各种规范(方法)，让其它类去实现这些方法</li><li>接口比继承更加灵活，继承是满足 is -a的关系，而接口只需满足 like-a的关系</li><li>接口在一定程度上实现代码解耦</li></ol></li><li><h4 id="接口类型数组："><a href="#接口类型数组：" class="headerlink" title="接口类型数组："></a>接口类型数组：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfacePolyArr</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多态数组 -&gt; 接口类型数组</span></span><br><span class="line">        Usb[] usbs = <span class="keyword">new</span> <span class="title class_">Usb</span>[<span class="number">2</span>];</span><br><span class="line">        usbs[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Phone_</span>();</span><br><span class="line">        usbs[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Camera_</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给Usb数组中，存放 Phone 和 相机对象，Phone类还有一个特有的方法call（），</span></span><br><span class="line"><span class="comment">        请遍历Usb数组，如果是Phone对象，除了调用Usb 接口定义的方法外，</span></span><br><span class="line"><span class="comment">        还需要调用Phone 特有方法 call</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; usbs.length; i++) &#123;</span><br><span class="line">            usbs[i].work();<span class="comment">//动态绑定..</span></span><br><span class="line">            <span class="comment">//和前面一样，我们仍然需要进行类型的向下转型</span></span><br><span class="line">            <span class="keyword">if</span>(usbs[i] <span class="keyword">instanceof</span> Phone_) &#123;<span class="comment">//判断他的运行类型是 Phone_</span></span><br><span class="line">                ((Phone_) usbs[i]).call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Usb</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机可以打电话...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera_</span> <span class="keyword">implements</span> <span class="title class_">Usb</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;相机工作中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="8-8内部类⭐️"><a href="#8-8内部类⭐️" class="headerlink" title="8.8内部类⭐️"></a>8.8内部类⭐️</h2><ul><li><h4 id="基本介绍：-30"><a href="#基本介绍：-30" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类(inner class)，嵌套其他类的类称为外部类(outer class)</li><li>内部类最大的特点就是可以直接访问私有属性，井且可以体现类与类之间的包含关系</li></ul></li><li><h4 id="基本语法：-15"><a href="#基本语法：-15" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;<span class="comment">//外部类</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//内部类</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span>&#123;<span class="comment">//外部其他类</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="内部类分类："><a href="#内部类分类：" class="headerlink" title="内部类分类："></a>内部类分类：</h4><ol><li>定义在外部类局部位置上：1局部类内部(有类名) 2.匿名局部类(没有类名⭐️)</li><li>定义在外部类的成员位置上：1.成员内部类(无static修饰) 2.静态内部类(static修饰)</li></ol></li></ul><h3 id="8-8-1-局部内部类"><a href="#8-8-1-局部内部类" class="headerlink" title="8.8.1 局部内部类"></a>8.8.1 局部内部类</h3><ul><li><h4 id="基本介绍：-31"><a href="#基本介绍：-31" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>局部内部类是定义在外部类的局部位置，在方法中、代码块中，并且有类名</p></li><li><h4 id="注意事项和细节：-33"><a href="#注意事项和细节：-33" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p><strong>不能添加访问修饰符，但是可以使用final修饰</strong></p></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>内部类访问外部类：直接访问</p></li><li><p>外部类访问内部类：创建对象再访问</p></li><li><p>外部其他类访问局部内部类：不能访问</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果访问外部类的成员使用”外部类名.this.成员”去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClass</span> &#123;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示一遍</span></span><br><span class="line">        <span class="type">Outer02</span> <span class="variable">outer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer02</span>();</span><br><span class="line">        outer02.m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;outer02的hashcode=&quot;</span> + outer02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer02</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Outer02 m2()&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//私有方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//1.局部内部类是定义在外部类的局部位置,通常在方法</span></span><br><span class="line">        <span class="comment">//3.不能添加访问修饰符,但是可以使用final 修饰</span></span><br><span class="line">        <span class="comment">//4.作用域 : 仅仅在定义它的方法或代码块中</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Inner02</span> &#123;<span class="comment">//局部内部类(本质仍然是一个类)</span></span><br><span class="line">            <span class="comment">//2.可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//5. 局部内部类可以直接访问外部类的成员，比如下面 外部类n1 和 m2()</span></span><br><span class="line">                <span class="comment">//7. 如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，</span></span><br><span class="line">                <span class="comment">//   使用 外部类名.this.成员)去访问</span></span><br><span class="line">                <span class="comment">//    Outer02.this 本质就是外部类的对象, 即哪个对象调用了m1, Outer02.this就是哪个对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;n1=&quot;</span> + n1 + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer02.<span class="built_in">this</span>.n1);</span><br><span class="line">                System.out.println(<span class="string">&quot;Outer02.this hashcode=&quot;</span> + Outer02.<span class="built_in">this</span>);</span><br><span class="line">                m2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 外部类在方法中，可以创建Inner02对象，然后调用方法即可</span></span><br><span class="line">        <span class="type">Inner02</span> <span class="variable">inner02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner02</span>();</span><br><span class="line">        inner02.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="8-8-2-匿名内部类⭐️⭐️"><a href="#8-8-2-匿名内部类⭐️⭐️" class="headerlink" title="8.8.2 匿名内部类⭐️⭐️"></a>8.8.2 匿名内部类⭐️⭐️</h3><ul><li><h4 id="基本介绍：-32"><a href="#基本介绍：-32" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>匿名内部类是定义在外部类的局部位置，比如方法中，并目没有类名，同时还是一个对象</p></li><li><h4 id="基本语法：-16"><a href="#基本语法：-16" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">  类体;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><h4 id="底层："><a href="#底层：" class="headerlink" title="底层："></a>底层：</h4><ol><li>本质： <strong>IA tiger</strong> &#x3D; class Xxxx$1      class Xxxx$1 &#x3D; <strong>new IA</strong> </li><li>接口的底层：class Xxxx$1 <strong>implement</strong> IA{@Overide}</li><li>本质： <strong>Father father</strong> &#x3D; class Xxxx$2      class Xxxx$2 &#x3D; <strong>new Father</strong> </li><li>类的底层：class Xxxx$2 <strong>extends</strong> Father{@Overide}</li></ol></li><li><h4 id="注意事项和细节：-34"><a href="#注意事项和细节：-34" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>匿名内部类既是一个类的定义同时本身也是一个对象，因此从语法上看，<strong>它既有定义类的特征，也有创建对象的特征</strong></p></li><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>不能添加访问修饰符,因为它的地位就是一个局部变量</p></li><li><p>作用域：仅仅在定义它的方法或代码块中</p></li><li><p>匿名内部类方位外部类成员：直接访问</p></li><li><p>外部其他类访问匿名内部类：不能访问</p></li><li><p>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer04</span> <span class="variable">outer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer04</span>();</span><br><span class="line">        outer04.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer04</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">        <span class="comment">//基于接口的匿名内部类</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1.需求： 想使用IA接口,并创建对象</span></span><br><span class="line">        <span class="comment">//2.传统方式，是写一个类，实现该接口，并创建对象</span></span><br><span class="line">        <span class="comment">//3.需求是 Tiger/Dog 类只是使用一次，后面再不使用</span></span><br><span class="line">        <span class="comment">//4. 可以使用匿名内部类来简化开发</span></span><br><span class="line">        <span class="comment">//5. tiger的编译类型 ? IA</span></span><br><span class="line">        <span class="comment">//6. tiger的运行类型 ? 就是匿名内部类  Outer04$1</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们看底层 会分配 类名 Outer04$1</span></span><br><span class="line"><span class="comment">            class Outer04$1 implements IA &#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void cry() &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//7. jdk底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1实例，并且把地址</span></span><br><span class="line">        <span class="comment">//   返回给 tiger</span></span><br><span class="line">        <span class="comment">//8. 匿名内部类使用一次，就不能再使用</span></span><br><span class="line">        <span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎叫唤...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;tiger的运行类型=&quot;</span> + tiger.getClass());</span><br><span class="line">        tiger.cry();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        IA tiger = new Tiger();</span></span><br><span class="line"><span class="comment">//        tiger.cry();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示基于类的匿名内部类</span></span><br><span class="line">        <span class="comment">//分析</span></span><br><span class="line">        <span class="comment">//1. father编译类型 Father</span></span><br><span class="line">        <span class="comment">//2. father运行类型 Outer04$2</span></span><br><span class="line">        <span class="comment">//3. 底层会创建匿名内部类</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            class Outer04$2 extends Father&#123;</span></span><br><span class="line"><span class="comment">                @Override</span></span><br><span class="line"><span class="comment">                public void test() &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println(&quot;匿名内部类重写了test方法&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//4. 同时也直接返回了 匿名内部类 Outer04$2的对象</span></span><br><span class="line">        <span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写了test方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;father对象的运行类型=&quot;</span> + father.getClass());<span class="comment">//Outer04$2</span></span><br><span class="line">        father.test();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于抽象类的匿名内部类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小狗吃骨头...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;<span class="comment">//接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Tiger implements IA &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class Dog implements  IA&#123;</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void cry() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;小狗汪汪...&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalInnerClassDetail</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer03</span> <span class="variable">outer03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer03</span>();</span><br><span class="line">        outer03.f1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer03</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写hi方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        person.hi();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Person</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类重写ok方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.ok(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.ok(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person hi()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person ok()&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CellPhone</span> <span class="variable">cellPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellPhone</span>();</span><br><span class="line">        cellPhone.alarmclock(<span class="keyword">new</span> <span class="title class_">Bell</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                System.out.println(<span class="string">&quot;懒猪起床&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span>&#123;</span><br><span class="line">        bell.ring();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="8-8-3-成员内部类"><a href="#8-8-3-成员内部类" class="headerlink" title="8.8.3 成员内部类"></a>8.8.3 成员内部类</h3><ul><li><h4 id="基本介绍：-33"><a href="#基本介绍：-33" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>成员内部类是定义在外部类的成员位置，并且没有static修饰</p></li><li><h4 id="注意事项和细节：-35"><a href="#注意事项和细节：-35" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>可以添加任意访问修饰符</p></li><li><p>作用域：为整个外部类类体</p></li><li><p>成员内部类访问外部类：直接访问</p></li><li><p>外部类访问成员内部类；创建对象，再访问</p></li><li><p>外部其他类访问成员内部类：</p><ul><li><p>外部类.内部类  引用名 &#x3D; 外部对象.new 内部类();</p></li><li><p>外部类.内部类  引用名 &#x3D; <strong>外部对象</strong>.get();</p><!--需要创建外部类对象实例，get()为内部类返回对象的方法--></li></ul></li><li><p>如果外部类和成员内部类的成员重名时，成员内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer08</span> <span class="variable">outer08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer08</span>();</span><br><span class="line">        outer08.t1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类，使用成员内部类的三种方式</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 第一种方式</span></span><br><span class="line">        <span class="comment">// outer08.new Inner08(); 相当于把 new Inner08()当做是outer08成员</span></span><br><span class="line">        <span class="comment">// 这就是一个语法，不要特别的纠结.</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> outer08.<span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        <span class="comment">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08对象</span></span><br><span class="line">        Outer08.<span class="type">Inner08</span> <span class="variable">inner08Instance</span> <span class="operator">=</span> outer08.getInner08Instance();</span><br><span class="line">        inner08Instance.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer08</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi()方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注意: 成员内部类，是定义在外部内的成员位置上</span></span><br><span class="line">    <span class="comment">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner08</span> &#123;<span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> <span class="number">99.8</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">66</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//可以直接访问外部类的所有成员，包含私有的</span></span><br><span class="line">            <span class="comment">//如果成员内部类的成员和外部类的成员重名，会遵守就近原则.</span></span><br><span class="line">            <span class="comment">//，可以通过  外部类名.this.属性 来访问外部类的成员</span></span><br><span class="line">            System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1 + <span class="string">&quot; name = &quot;</span> + name + <span class="string">&quot; 外部类的n1=&quot;</span> + Outer08.<span class="built_in">this</span>.n1);</span><br><span class="line">            hi();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法，返回一个Inner08实例</span></span><br><span class="line">    <span class="keyword">public</span> Inner08 <span class="title function_">getInner08Instance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用成员内部类</span></span><br><span class="line">        <span class="comment">//创建成员内部类的对象，然后使用相关的方法</span></span><br><span class="line">        <span class="type">Inner08</span> <span class="variable">inner08</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner08</span>();</span><br><span class="line">        inner08.say();</span><br><span class="line">        System.out.println(inner08.sal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="8-8-4-静态内部类"><a href="#8-8-4-静态内部类" class="headerlink" title="8.8.4 静态内部类"></a>8.8.4 静态内部类</h3><ul><li><h4 id="基本介绍：-34"><a href="#基本介绍：-34" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>静态内部类是定义在外部类的成员位置，并且有static修饰</p></li><li><h4 id="注意事项和细节：-36"><a href="#注意事项和细节：-36" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</p></li><li><p>可以添加任意访问修饰符</p></li><li><p>作用域：整个外部类类体</p></li><li><p>静态内部类访问外部类：直接访问</p></li><li><p>外部类访问静态内部类：创建对象，再访问</p></li><li><p>外部其他类访问静态内部类：</p><ul><li><p>外部类.内部类  引用名 &#x3D; new 外部类.内部类();</p></li><li><p>外部类.内部类  引用名 &#x3D; <strong>外部对象</strong>.get();</p><!--需要创建外部类对象实例，get()为内部类返回对象的方法--></li><li><p>外部类.内部类  引用名 &#x3D; <strong>外部类</strong>.get();</p><!--不需要创建外部类对象实例--></li></ul></li><li><p>如果外部类和静态内部类的成员重名时，静态内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.this.成员)去访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer10</span> <span class="variable">outer10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>();</span><br><span class="line">        outer10.m1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//外部其他类 使用静态内部类</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="comment">//因为静态内部类，是可以通过类名直接访问(前提是满足访问权限)</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer10</span>.Inner10();</span><br><span class="line">        inner10.say();</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//编写一个方法，可以返回静态内部类的对象实例.</span></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner101</span> <span class="operator">=</span> outer10.getInner10();</span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        inner101.say();</span><br><span class="line"></span><br><span class="line">        Outer10.<span class="type">Inner10</span> <span class="variable">inner10_</span> <span class="operator">=</span> Outer10.getInner10_();</span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        inner10_.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer10</span> &#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">//Inner10就是静态内部类</span></span><br><span class="line">    <span class="comment">//1. 放在外部类的成员位置</span></span><br><span class="line">    <span class="comment">//2. 使用static 修饰</span></span><br><span class="line">    <span class="comment">//3. 可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</span></span><br><span class="line">    <span class="comment">//4. 可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span></span><br><span class="line">    <span class="comment">//5. 作用域 ：同其他的成员，为整个类体</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner10</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;韩顺平教育&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//如果外部类和静态内部类的成员重名时，静态内部类访问的时，</span></span><br><span class="line">            <span class="comment">//默认遵循就近原则，如果想访问外部类的成员，则可以使用 (外部类名.成员)</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot; 外部类name= &quot;</span> + Outer10.name);</span><br><span class="line">            cry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123; <span class="comment">//外部类---访问------&gt;静态内部类 访问方式：创建对象，再访问</span></span><br><span class="line">        <span class="type">Inner10</span> <span class="variable">inner10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">        inner10.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Inner10 <span class="title function_">getInner10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Inner10 <span class="title function_">getInner10_</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner10</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="8-9-类加载顺序⭐️⭐️"><a href="#8-9-类加载顺序⭐️⭐️" class="headerlink" title="8.9 类加载顺序⭐️⭐️"></a>8.9 类加载顺序⭐️⭐️</h2><ul><li><h4 id="类什么时候被加载："><a href="#类什么时候被加载：" class="headerlink" title="类什么时候被加载："></a>类什么时候被加载：</h4><ul><li>创建对象实例时</li><li>创建子类对象实例时，父类也会被加载</li><li>使用类的静态成员时</li></ul></li><li><h4 id="创建一个对象时，在一个类的调用顺序："><a href="#创建一个对象时，在一个类的调用顺序：" class="headerlink" title="创建一个对象时，在一个类的调用顺序："></a>创建一个对象时，在一个类的调用<strong>顺序</strong>：</h4><ol><li><p>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级样，如果有多个静态代码块和多个静</p><p>态变量初始化，则按他们定义的顺序调</p></li><li><p>调用普通代码块和普通属性的初始化(注意：普通代码块和普通属性初始化调用的优先级一样，若果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</p></li><li><p>调用构造方法</p></li></ol></li><li><h4 id="创建子类时顺序："><a href="#创建子类时顺序：" class="headerlink" title="创建子类时顺序："></a>创建子类时顺序：</h4><ol><li>父类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li>子类的静态代码块和静态属性(优先级一样，按定义顺序执行)</li><li>父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li><li>父类构造方法</li><li>子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)</li><li>子类构造方法</li></ol></li></ul><h1 id="9-枚举和注解"><a href="#9-枚举和注解" class="headerlink" title="9 枚举和注解"></a>9 枚举和注解</h1><ul><li><h4 id="基本介绍：-35"><a href="#基本介绍：-35" class="headerlink" title="基本介绍："></a>基本介绍：</h4>枚举是一组常量的集合，属于一种特殊的类，里面只包含一组有限的特定的对象</li></ul><h2 id="9-1-自定义类实现枚举"><a href="#9-1-自定义类实现枚举" class="headerlink" title="9.1 自定义类实现枚举"></a>9.1 自定义类实现枚举</h2><ul><li><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>构造器私有化</li><li>本类内部创建一组对象</li><li>对外暴露对象(通过为对象添加public final static修饰符)</li><li>提供get方法，但是不提供set方法</li></ol></li><li><h4 id="注意事项和细节：-37"><a href="#注意事项和细节：-37" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>不需要提供setxxx 方法，因为枚举对象值通常为只读</li><li>枚举对象&#x2F;属性使用 final + static 共同修饰，实现底层优化</li><li>枚举对象名通常使用全部大写，常量的命名规范</li><li>枚举对象根据需要，也可以有多个属性</li></ol></li></ul><h2 id="9-2-enum关键字实现枚举"><a href="#9-2-enum关键字实现枚举" class="headerlink" title="9.2 enum关键字实现枚举"></a>9.2 enum关键字实现枚举</h2><ul><li><h4 id="实现步骤：-1"><a href="#实现步骤：-1" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li><p>关键字 enum 代替 class</p></li><li><p>行首：常量名(实参列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>),WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="注意事项和细节：-38"><a href="#注意事项和细节：-38" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>使用enum 关键字开发一个枚举类时，默认会继承Enum类</p></li><li><p>传统的 public static final Season SPRING &#x3D; new Season(“春天””温暖”)；</p><p>简化成 SPRING(“春天”，”温暖”)，我们必须知道它调用的是哪个构造器</p></li><li><p>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略</p></li><li><p>多个枚举对象，使用,间隔，最后;结尾</p></li><li><p>枚举对象必须放在枚举类行首</p></li></ol></li><li><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>toString：Enum类己经重写过了，返回的是当前对象名子类可以重写该方法，用于返回对象的属性信息</p></li><li><p>name：返回当前对象名(常量名)，子类中不能重写</p></li><li><p>ordinal：返回当前对象的位置号，默认从0开始</p></li><li><p>values：返回当前枚举类中所有的常量</p></li><li><p>valueof：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</p></li><li><p>compareTo：比较两个枚举常量的编号，做差</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用Season2 枚举类，来演示各种方法</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn</span> <span class="operator">=</span> Season2.AUTUMN;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出枚举对象的名字</span></span><br><span class="line">        System.out.println(autumn.name());</span><br><span class="line">        <span class="comment">//ordinal() 输出的是该枚举对象的次序/编号，从0开始编号</span></span><br><span class="line">        <span class="comment">//AUTUMN 枚举对象是第三个，因此输出 2</span></span><br><span class="line">        System.out.println(autumn.ordinal());</span><br><span class="line">        <span class="comment">//从反编译可以看出 values方法，返回 Season2[]</span></span><br><span class="line">        <span class="comment">//含有定义的所有枚举对象</span></span><br><span class="line">        Season2[] values = Season2.values();</span><br><span class="line">        System.out.println(<span class="string">&quot;===遍历取出枚举对象(增强for)====&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Season2 season: values) &#123;<span class="comment">//增强for循环</span></span><br><span class="line">            System.out.println(season);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf：将字符串转换成枚举对象，要求字符串必须为已有的常量名，否则报异常</span></span><br><span class="line">        <span class="comment">//执行流程</span></span><br><span class="line">        <span class="comment">//1. 根据你输入的 &quot;AUTUMN&quot; 到 Season2的枚举对象去查找</span></span><br><span class="line">        <span class="comment">//2. 如果找到了，就返回，如果没有找到，就报错</span></span><br><span class="line">        <span class="type">Season2</span> <span class="variable">autumn1</span> <span class="operator">=</span> Season2.valueOf(<span class="string">&quot;AUTUMN&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;autumn1=&quot;</span> + autumn1);</span><br><span class="line">        System.out.println(autumn == autumn1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compareTo：比较两个枚举常量，比较的就是编号</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//1. 就是把 Season2.AUTUMN 枚举对象的编号 和 Season2.SUMMER枚举对象的编号比较</span></span><br><span class="line">        <span class="comment">//2. 看看结果</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public final int compareTo(E o) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            return self.ordinal - other.ordinal;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        Season2.AUTUMN的编号[2] - Season2.SUMMER的编号[3]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//补充了一个增强for</span></span><br><span class="line"><span class="comment">//        int[] nums = &#123;1, 2, 9&#125;;</span></span><br><span class="line"><span class="comment">//        //普通的for循环</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;=====普通的for=====&quot;);</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(nums[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;=====增强的for=====&quot;);</span></span><br><span class="line"><span class="comment">//        //执行流程是 依次从nums数组中取出数据，赋给i, 如果取出完毕，则退出for</span></span><br><span class="line"><span class="comment">//        for(int i : nums) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;i=&quot; + i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="实现接口："><a href="#实现接口：" class="headerlink" title="实现接口："></a>实现接口：</h4><ol><li>使用enum关键字后，就不能再继承其它类了，因为enum会隐式继承Enum，而Java是单继承机制</li><li>枚举类和普通类一样，可以实现接口：enum 类名 implements 接口1，接口2{}</li></ol></li></ul><h2 id="9-3-JDk内置的基本注解类型"><a href="#9-3-JDk内置的基本注解类型" class="headerlink" title="9.3 JDk内置的基本注解类型"></a>9.3 JDk内置的基本注解类型</h2><ul><li><h4 id="基本介绍：-36"><a href="#基本介绍：-36" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释包,类、方法、属性、构造器、局部变量等数据信息</p></li><li><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p></li><li><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替java EE旧版本中所有遗留的繁冗代码和XML配置</p></li></ul></li><li><h4 id="基本Annotation介绍："><a href="#基本Annotation介绍：" class="headerlink" title="基本Annotation介绍："></a>基本Annotation介绍：</h4><ul><li><p>@Override： 限定某个方法，是重写父类方法，该注解只能用于方法</p></li><li><p>@Deprecated：用于表示某个程序元素(类，方法等)己过时</p></li><li><p>@SuppressWarnings：抑制编译器警告</p></li></ul></li></ul><h3 id="9-3-1-Override"><a href="#9-3-1-Override" class="headerlink" title="9.3.1 @Override"></a>9.3.1 @Override</h3><ul><li><h4 id="基本介绍：-37"><a href="#基本介绍：-37" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>@Override 表示指定重写父类的方法(从编译层面验证)，如果父类没有方法，则会报错</p></li><li><p>如果没写 @Override 还是会重写父类</p></li><li><p>@Override 只能修饰方法，不能修饰其它类，包，属性等等</p></li><li><p>如果写了@Override 注解，编译器就会去检查该方法是否真的重写了父类的方法，若果没有构成重写则编译错误</p></li><li><p>查看@Override注解源码@Target(ElementType.MRTHOD)，说明只能修饰方法</p></li><li><p>@Target 是修饰注解的注解，称为元注解</p></li></ul></li></ul><h3 id="9-3-2-Deprecated"><a href="#9-3-2-Deprecated" class="headerlink" title="9.3.2 @Deprecated"></a>9.3.2 @Deprecated</h3><ul><li><h4 id="基本介绍：-38"><a href="#基本介绍：-38" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>用于表示某个程序元素(类，方法等)己过时</p></li><li><p>可以修饰方法，类，字段，包，参数 等等</p></li><li><p>@Target (value&#x3D;(CONSTRUCTOR,FIELD,LOCAL_ VARIABLE, METHOD,PACKAGE, PARAMETER, TYPE})</p></li><li><p>@Deprecated 的作用可以做到新旧版本的兼容和过渡</p></li></ul></li></ul><h3 id="9-3-3-SuppressWarnings"><a href="#9-3-3-SuppressWarnings" class="headerlink" title="9.3.3 @SuppressWarnings"></a>9.3.3 @SuppressWarnings</h3><ul><li><h4 id="基本介绍：-39"><a href="#基本介绍：-39" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>抑制编译器警告信息</p></li><li><p>unchecked 是忽略没有检查的警告</p></li><li><p>rawtypes 是忽略没有指定泛型的警告</p></li><li><p>unused 是忽略没有使用某个变量的警告错误</p></li><li><p>@SuppressWarnings可以修饰的程序元素为，查看@Target</p></li><li><p>生成@SupperssWarnings 时，不用背，直接点击左侧的黄色提示，就可以选择(注意可以指定生成的位置)</p></li></ul></li></ul><h2 id="9-4-元注解：对注解进行注解"><a href="#9-4-元注解：对注解进行注解" class="headerlink" title="9.4 元注解：对注解进行注解"></a>9.4 元注解：对注解进行注解</h2><ul><li><h4 id="基本介绍：-40"><a href="#基本介绍：-40" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>JDK 的元 Annotation 用于修饰其他 Annotation</p></li><li><h4 id="四种元注解："><a href="#四种元注解：" class="headerlink" title="四种元注解："></a>四种元注解：</h4><ol><li>Retention：指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME</li><li>Target：指定注解可以在哪些地方使用</li><li>Documented：指定该注解是否会在javadoc体现</li><li>lnherited：子类会继承父类注解</li></ol></li></ul><h1 id="10-异常"><a href="#10-异常" class="headerlink" title="10 异常"></a>10 异常</h1><ul><li><h4 id="基本介绍：-41"><a href="#基本介绍：-41" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Java语言中，将程序执行中发生的不正常情况称为 “异常”</p></li><li><h4 id="执行中异常事件分类："><a href="#执行中异常事件分类：" class="headerlink" title="执行中异常事件分类："></a>执行中异常事件分类：</h4><ol><li>Error(错误)：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情況。比如：StackoverflowError[栈溢出]和OOM(out ofmemory)，Error 是严重错误，程序会崩溃</li><li>Exception：其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。，例如空指针访问，<br>试图读取不存在的文件，网络连接中断等等，Exception 分为两大类：运行时异常口和编译时异常口。</li></ol></li></ul><h2 id="10-1-异常体系图⭐️"><a href="#10-1-异常体系图⭐️" class="headerlink" title="10.1 异常体系图⭐️"></a>10.1 异常体系图⭐️</h2><ul><li><h4 id="异常体系图："><a href="#异常体系图：" class="headerlink" title="异常体系图："></a>异常体系图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-17%2019.55.21.jpg" alt="截屏2022-05-17 19.55.21"></p></li><li><h4 id="注意事项和细节：-39"><a href="#注意事项和细节：-39" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>异常分为两大类，运行时异常和编译时异常</li><li>运行时异常，编译器不要求强制处置的异常。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常java.lang.RuntimeException类及它的子类都是运行时异常</li><li>运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li><li>编译时异常，是编译器要求必须处置的异常</li></ol></li></ul><h2 id="10-2-常见的异常"><a href="#10-2-常见的异常" class="headerlink" title="10.2 常见的异常"></a>10.2 常见的异常</h2><ul><li><h4 id="运行时异常："><a href="#运行时异常：" class="headerlink" title="运行时异常："></a>运行时异常：</h4><ul><li><p>NullPointerException：空指针异常</p></li><li><p>ArithmeticException：数学运算异常</p></li><li><p>ArrayIndexOutOfBoundsException：数组下标越界异常</p></li><li><p>ClassCastException：类型转换异常</p></li><li><p>NumberFormatException：数字格式不正确异常</p></li></ul></li><li><h4 id="编译时异常："><a href="#编译时异常：" class="headerlink" title="编译时异常："></a>编译时异常：</h4><ul><li><p>SQLException：操作数据库时，查询表可能发生异常</p></li><li><p>lOException：操作文供时，发生的异常</p></li><li><p>FileNotFoundException：当操作一个不存在的文件时，发生异常</p></li><li><p>ClassNotFoundException：加载类，而该类不存在时异常</p></li><li><p>EOFException：操作文件，到文件末尾，发生异常</p></li><li><p>illegalArguementException：参数异常</p></li></ul></li></ul><h2 id="10-3-异常处理⭐️"><a href="#10-3-异常处理⭐️" class="headerlink" title="10.3 异常处理⭐️"></a>10.3 异常处理⭐️</h2><ul><li><h4 id="基本介绍：-42"><a href="#基本介绍：-42" class="headerlink" title="基本介绍："></a>基本介绍：</h4>异常处理就是当异常发生时，对异常处理的方式</li></ul><h3 id="10-3-1-try-catch-finally"><a href="#10-3-1-try-catch-finally" class="headerlink" title="10.3.1  try-catch-finally"></a>10.3.1  try-catch-finally</h3><ul><li><h4 id="基本介绍：-43"><a href="#基本介绍：-43" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>程序员在代码中捕获发生的异常，自行处理</p></li><li><h4 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2010.53.38.jpg"></p></li><li><h4 id="注意事项和细节：-40"><a href="#注意事项和细节：-40" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>如果异常发生了，则异常发生后面的代码不会执行，直接进入到catch块</li><li>如果异常没有发生，则顺序执行try的代码块，不会进入到catch块</li><li>如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)，则使用如下代码finally{}</li><li>可以有多个catch语句，捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception 在后，NullPointer Exception 在前)，如果发生异常，只会匹配一个catch</li><li>try-finally配合，相当于没有捕获异常，程序直接崩溃但执行finally</li></ol></li></ul><h3 id="10-3-2-throws"><a href="#10-3-2-throws" class="headerlink" title="10.3.2  throws"></a>10.3.2  throws</h3><ul><li><h4 id="基本介绍：-44"><a href="#基本介绍：-44" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>将发生的异常抛出，交给调用者(方法)来处理，最顶级的处理者就是JVM，默认抛出运行异常</p></li><li><h4 id="流程图：-1"><a href="#流程图：-1" class="headerlink" title="流程图："></a>流程图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2010.57.46-20220518111448342.jpg"></p></li><li><h4 id="注意事项和细节：-41"><a href="#注意事项和细节：-41" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>对于编译异常，程序中必须处理，比如try-catch 或者 throws</li><li>对于运行时异常，程序中如果没有处理，默认就是throws的方式处理</li><li>子类重写父类的方法时，对抛出异常的规定：子类重与的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类拋出的异常的类型的子类型</li><li>在throws 过程中，如果有方法 try-catch，就相当于处理异常，就可以不必throws</li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类</li></ol></li></ul><h2 id="10-4-自定义异常"><a href="#10-4-自定义异常" class="headerlink" title="10.4 自定义异常"></a>10.4 自定义异常</h2><ul><li><h4 id="基本介绍：-45"><a href="#基本介绍：-45" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>当程序中出现了某些 “错误〞，但该错误信息并没有在Throwable子类中描述处理，这时可以设计异常类，用于描达该错误信息</p></li><li><h4 id="自定义异常步骤："><a href="#自定义异常步骤：" class="headerlink" title="自定义异常步骤："></a>自定义异常步骤：</h4><ol><li>定义类：自定义异常类名(程序员自己写)继承Exception或Runtime Exception</li><li>如果继承Exception，属于编译异常</li><li>如果继承RuntimeException，属子运行异常(一般来说，继承RuntimeException)</li></ol></li></ul><h2 id="10-5-throw和throws"><a href="#10-5-throw和throws" class="headerlink" title="10.5  throw和throws"></a>10.5  throw和throws</h2><ul><li><h4 id="对比：-1"><a href="#对比：-1" class="headerlink" title="对比："></a>对比：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-18%2023.10.05.jpg" alt="截屏2022-05-18 23.10.05"></li></ul><h1 id="11-包装类"><a href="#11-包装类" class="headerlink" title="11 包装类"></a>11 包装类</h1><h2 id="11-0-包装类-Integer例"><a href="#11-0-包装类-Integer例" class="headerlink" title="11.0 包装类(Integer例)"></a>11.0 包装类(Integer例)</h2><ul><li><h4 id="基本介绍：-46"><a href="#基本介绍：-46" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>八种基本数据类型相应的引用类型——包装类</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.13.21.jpg" alt="截屏2022-05-19 15.13.21"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.18.44.jpg" alt="截屏2022-05-19 15.18.44"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.19.00.jpg" alt="截屏2022-05-19 15.19.00"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2015.19.22.jpg" alt="截屏2022-05-19 15.19.22"></p></li><li><h4 id="装箱和拆箱："><a href="#装箱和拆箱：" class="headerlink" title="装箱和拆箱："></a>装箱和拆箱：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Integer01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示int &lt;--&gt; Integer 的装箱和拆箱</span></span><br><span class="line">        <span class="comment">//jdk5前是手动装箱和拆箱</span></span><br><span class="line">        <span class="comment">//手动装箱 int-&gt;Integer</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(n1);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="comment">//Integer -&gt; int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> integer.intValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk5后，就可以自动装箱和自动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="comment">//自动装箱 int-&gt;Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer2</span> <span class="operator">=</span> n2; <span class="comment">//底层使用的是 Integer.valueOf(n2)</span></span><br><span class="line">        <span class="comment">//自动拆箱 Integer-&gt;int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> integer2; <span class="comment">//底层仍然使用的是 intValue()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="包装类方法："><a href="#包装类方法：" class="headerlink" title="包装类方法："></a>包装类方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperVSString</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//包装类(Integer)-&gt;String</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> i.toString();</span><br><span class="line">        <span class="comment">//方式3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String -&gt; 包装类(Integer)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.parseInt(str4);<span class="comment">//使用到自动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(str4);<span class="comment">//构造器</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="Integer创建机制："><a href="#Integer创建机制：" class="headerlink" title="Integer创建机制："></a>Integer创建机制：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//示例一</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例二</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例三</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//底层Integer.valueOf(127)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//-128~127</span></span><br><span class="line">        System.out.println(i5 == i6); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例四</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(i7 == i8);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例五</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="number">127</span>; <span class="comment">//Integer.valueOf(127)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        System.out.println(i9 == i10);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//示例六</span></span><br><span class="line">        Integer i11=<span class="number">127</span>;</span><br><span class="line">        <span class="type">int</span> i12=<span class="number">127</span>;</span><br><span class="line"><span class="comment">//只有有基本数据类型，判断的是</span></span><br><span class="line"><span class="comment">//值是否相同</span></span><br><span class="line">        System.out.println(i11==i12); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例七</span></span><br><span class="line">        Integer i13=<span class="number">128</span>;</span><br><span class="line">        <span class="type">int</span> i14=<span class="number">128</span>;</span><br><span class="line">        System.out.println(i13==i14);<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-1-String⭐️"><a href="#11-1-String⭐️" class="headerlink" title="11.1  String⭐️"></a>11.1  String⭐️</h2><ul><li><h4 id="基本介绍：-47"><a href="#基本介绍：-47" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>String 对象用于保存字符串，也就是一组字符序列</p></li><li><p>字符串常量对象是用双引号括起的字符序列</p></li><li><p>字符串的字符使用Unicode宇符编码，一个字符(不区分字母还是汉字)占两个字节</p><p>![截屏2022-05-19 16.36.03](<a href="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19">https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/截屏2022-05-19</a> 16.36.03.jpg)</p></li></ul></li><li><h4 id="创建String对象方式："><a href="#创建String对象方式：" class="headerlink" title="创建String对象方式："></a>创建String对象方式：</h4><ol><li>直接赋值 String s &#x3D; “hsp”;</li><li>调用构造器 String s2 &#x3D; new String(“hsp”);</li></ol></li><li><h4 id="两种方式对比："><a href="#两种方式对比：" class="headerlink" title="两种方式对比："></a>两种方式对比：</h4><ul><li><p>方式一：先从常量池查看是否有”hsp”数据空间，如果有，直接指向；</p><p>如果沒有则重新创建，然后指向。s最终指向的是常量池的空间地址</p></li><li><p>方式二：先在堆中创建空间，里面维护了value属性，指向常量池的hsp空间。如果常量池没有”hsp“，重新创建，如果有，直接通过value指向，最终指向的是堆中的空间地址</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2016.54.53.jpg" alt="截屏2022-05-19 16.54.53"></p></li><li><h4 id="常用构造方法："><a href="#常用构造方法：" class="headerlink" title="常用构造方法："></a>常用构造方法：</h4><ul><li><p>String s1 &#x3D; new String();</p></li><li><p>String s2 &#x3D; new String (String original);</p></li><li><p>String s3 &#x3D; new String (char[] a);</p></li><li><p>String s4 &#x3D; new String (char[] a,int startIndex,int count);</p></li></ul></li><li><h4 id="注意事项和细节：-42"><a href="#注意事项和细节：-42" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>String 是 final类，不能被继承</li><li>string 有属性 private final char valve []; 用于存放字符串内容</li><li><strong>value 是一个final类型，不可以修改(值可以修改，地址不可修改)</strong></li><li>intern方法：返回常量池的地址对象</li></ol></li><li><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li><h4 id="相等特性："><a href="#相等特性：" class="headerlink" title="相等特性："></a>相等特性：</h4><ol><li><p>equals判断内容</p></li><li><p>&#x3D;&#x3D;判断地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>; <span class="comment">//a 指向 常量池的 “hsp”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);<span class="comment">//b 指向堆中对象</span></span><br><span class="line">        System.out.println(a.equals(b)); <span class="comment">//T</span></span><br><span class="line">        System.out.println(a==b); <span class="comment">//F</span></span><br><span class="line">        <span class="comment">//b.intern() 方法返回常量池地址</span></span><br><span class="line">        System.out.println(a==b.intern()); <span class="comment">//T //ntern方法：返回常量池的地址对象</span></span><br><span class="line">        System.out.println(b==b.intern()); <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-09-14%2014.26.46.jpg" alt="截屏2022-09-14 14.26.46"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hspedu&quot;</span>; <span class="comment">//指向常量池”hspedu”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>; <span class="comment">//指向常量池”java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>;<span class="comment">//指向常量池”java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;java&quot;</span>);<span class="comment">//指向堆中对象</span></span><br><span class="line">        System.out.println(s2 == s3); <span class="comment">// F</span></span><br><span class="line">        System.out.println(s2 == s4);  <span class="comment">//T</span></span><br><span class="line">        System.out.println(s2.equals(s3));<span class="comment">//T</span></span><br><span class="line">        System.out.println(s1 == s2);  <span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-09-14%2014.44.03.jpg" alt="截屏2022-09-14 14.44.03"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p1.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.name = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.name.equals(p2.name));<span class="comment">//比较内容: True</span></span><br><span class="line">        System.out.println(p1.name == p2.name);  <span class="comment">//T</span></span><br><span class="line">        System.out.println(p1.name == <span class="string">&quot;hspedu&quot;</span>);   <span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bcde&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bcde&quot;</span>);</span><br><span class="line">        System.out.println(s1==s2); <span class="comment">//False</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2023.06.01.jpg" alt="截屏2022-05-19 23.06.01"></p><ul><li><h4 id="字符串特性："><a href="#字符串特性：" class="headerlink" title="字符串特性："></a>字符串特性：</h4><ol><li><p>String c1 &#x3D;“ab”+”cd”;常量在池中相加</p></li><li><p>String c1 &#x3D; a + b;变量在堆中相加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;haha&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建了两个对象，s1指向“hello”，</span></span><br><span class="line"><span class="comment">//再在常量池中创建“haha”，s1指向&quot;haha“</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于 String a = &quot;helloabc&quot;</span></span><br><span class="line"><span class="comment">//判断创建的常量池对象，是否有引用指向</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">//创建 a对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//创建 b对象</span></span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//1. 先 创建一个 StringBuilder sb = StringBuilder()</span></span><br><span class="line">        <span class="comment">//2. 执行  sb.append(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">//3. sb.append(&quot;abc&quot;);</span></span><br><span class="line">        <span class="comment">//4. String c= sb.toString()</span></span><br><span class="line">        <span class="comment">//最后其实是 c 指向堆中的对象(String) value[] -&gt; 池中 &quot;helloabc&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">        <span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;helloabc&quot;</span>;</span><br><span class="line">        System.out.println(c == d);<span class="comment">//F c在堆中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;abc&quot;</span>;<span class="comment">//直接看池，e指向常量池</span></span><br><span class="line">        System.out.println(d == e);<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*底层：String Builder sb = new String Builder();</span></span><br><span class="line"><span class="comment">sb.append(a);sb.append(b);</span></span><br><span class="line"><span class="comment">sb是在堆中，井且append是在原来字符串的基础上追加的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">重要规则：String c1 =“ab”+&quot;cd”;常量在池中相加</span></span><br><span class="line"><span class="comment">        String c1 = a + b;变量在堆中相加</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2022.58.20-20220914143425014.jpg" alt="截屏2022-05-19 22.58.20"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringExercise09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hspedu&quot;</span>;  <span class="comment">//s1 指向池中的 “hspedu”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span>; <span class="comment">// s2 指向池中的 “java”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;hspedujava&quot;</span>; <span class="comment">//s5 指向池中的 “hspedujava”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> (s1 + s2).intern();<span class="comment">//s6 指向池中的   “hspedujava”</span></span><br><span class="line">        System.out.println(s5 == s6); <span class="comment">//T</span></span><br><span class="line">        System.out.println(s5.equals(s6));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="综合训练"><a href="#综合训练" class="headerlink" title="综合训练"></a>综合训练</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">char</span>[] ch = &#123;<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String str, <span class="type">char</span> ch[])</span> &#123;</span><br><span class="line">        str = <span class="string">&quot;java&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test1</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test1</span>();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.print(ex.str + <span class="string">&quot; and &quot;</span>);</span><br><span class="line">        System.out.println(ex.ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-19%2023.21.28-20220525113711262.jpg" alt="截屏2022-05-19 23.21.28"></p></li><li><h4 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>equals：区分大小写，判断内容是否相等</p></li><li><p>equalslgnoreCase：忽略大小写的判断内容是否相等</p></li><li><p>length：获取字符的个数，字符串的长度</p></li><li><p>indexOf：获取字符在字符串中第1次出现的索引,索引从0开始，如果找不到,返回-1</p></li><li><p>lastlndexOf：获取宇符在字符串中最后1次出现的索引,索引从0开始，如找不到,返回-1</p></li><li><p>substring： 截取指定范围的子串</p></li><li><p>trim：去前后空格</p></li><li><p>charAt：获取某索引处的字符，注意不能使用Str[index]这种方式</p></li><li><p>toUpperCase：大写字母</p></li><li><p>toLowerCase：小写字母</p></li><li><p>concat：拼接</p></li><li><p>replace：替换字符串中的字符</p></li><li><p>split：分割字符串</p></li><li><p>compareTo：比较两个字符串的大小</p></li><li><p>toCharArray：转换成字符数组</p></li><li><p>format：格式字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. equals 前面已经讲过了. 比较内容是否相同，区分大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(str1.equals(str2));<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.equalsIgnoreCase 忽略大小写的判断内容是否相等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;johN&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;john&quot;</span>.equalsIgnoreCase(username)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failure!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.length 获取字符的个数，字符串的长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;韩顺平&quot;</span>.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.indexOf 获取字符在字符串对象中第一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;wer@terwe@g&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s1.indexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">// 3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;weIndex=&quot;</span> + s1.indexOf(<span class="string">&quot;we&quot;</span>));<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.lastIndexOf 获取字符在字符串中最后一次出现的索引，索引从0开始，如果找不到，返回-1</span></span><br><span class="line">        s1 = <span class="string">&quot;wer@terwe@g@&quot;</span>;</span><br><span class="line">        index = s1.lastIndexOf(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        System.out.println(index);<span class="comment">//11</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ter的位置=&quot;</span> + s1.lastIndexOf(<span class="string">&quot;ter&quot;</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.substring 截取指定范围的子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello,张三&quot;</span>;</span><br><span class="line">        <span class="comment">//下面name.substring(6) 从索引6开始截取后面所有的内容</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">6</span>));<span class="comment">//截取后面的字符</span></span><br><span class="line">        <span class="comment">//name.substring(0,5)表示从索引0开始截取，截取到索引 5-1=4位置</span></span><br><span class="line">        System.out.println(name.substring(<span class="number">2</span>,<span class="number">5</span>));<span class="comment">//llo</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.toUpperCase转换成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;heLLo&quot;</span>;</span><br><span class="line">        System.out.println(s.toUpperCase());<span class="comment">//HELLO</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.toLowerCase</span></span><br><span class="line">        System.out.println(s.toLowerCase());<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.concat拼接字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;宝玉&quot;</span>;</span><br><span class="line">        s1 = s1.concat(<span class="string">&quot;林黛玉&quot;</span>).concat(<span class="string">&quot;薛宝钗&quot;</span>).concat(<span class="string">&quot;together&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉林黛玉薛宝钗together</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.replace 替换字符串中的字符</span></span><br><span class="line">        s1 = <span class="string">&quot;宝玉 and 林黛玉 林黛玉 林黛玉&quot;</span>;</span><br><span class="line">        <span class="comment">//在s1中，将 所有的 林黛玉 替换成薛宝钗</span></span><br><span class="line">        <span class="comment">// : s1.replace() 方法执行后，返回的结果才是替换过的.</span></span><br><span class="line">        <span class="comment">// 注意对 s1没有任何影响</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s11</span> <span class="operator">=</span> s1.replace(<span class="string">&quot;宝玉&quot;</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//宝玉 and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line">        System.out.println(s11);<span class="comment">//jack and 林黛玉 林黛玉 林黛玉</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.split 分割字符串, 对于某些分割字符，我们需要 转义比如 | \\等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">poem</span> <span class="operator">=</span> <span class="string">&quot;锄禾日当午,汗滴禾下土,谁知盘中餐,粒粒皆辛苦&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//：</span></span><br><span class="line">        <span class="comment">// 1. 以 , 为标准对 poem 进行分割 , 返回一个数组</span></span><br><span class="line">        <span class="comment">// 2. 在对字符串进行分割时，如果有特殊字符，需要加入 转义符 \</span></span><br><span class="line">        String[] split = poem.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        poem = <span class="string">&quot;E:\\aaa\\bbb&quot;</span>;</span><br><span class="line">        split = poem.split(<span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==分割后内容===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; split.length; i++) &#123;</span><br><span class="line">            System.out.println(split[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.toCharArray 转换成字符数组</span></span><br><span class="line">        s = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">            System.out.println(chs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.compareTo 比较两个字符串的大小，如果前者大，</span></span><br><span class="line">        <span class="comment">// 则返回正数，后者大，则返回负数，如果相等，返回0</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="comment">// (1) 如果长度相同，并且每个字符也相同，就返回 0</span></span><br><span class="line">        <span class="comment">// (2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小</span></span><br><span class="line">        <span class="comment">//     就返回 if (c1 != c2) &#123;</span></span><br><span class="line">        <span class="comment">//                return c1 - c2;</span></span><br><span class="line">        <span class="comment">//            &#125;</span></span><br><span class="line">        <span class="comment">// (3) 如果前面的部分都相同，就返回 str1.len - str2.len</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;jcck&quot;</span>;<span class="comment">// len = 3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;<span class="comment">// len = 4</span></span><br><span class="line">        System.out.println(a.compareTo(b)); <span class="comment">// 返回值是 &#x27;c&#x27; - &#x27;a&#x27; = 2的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8.format 格式字符串</span></span><br><span class="line">        <span class="comment">/* 占位符有:</span></span><br><span class="line"><span class="comment">         * %s 字符串 %c 字符 %d 整型 %.2f 浮点型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;john&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">56.857</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">        <span class="comment">//将所有的信息都拼接在一个字符串.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;我的姓名是&quot;</span> + name + <span class="string">&quot;年龄是&quot;</span> + age + <span class="string">&quot;,成绩是&quot;</span> + score + </span><br><span class="line">                <span class="string">&quot;性别是&quot;</span> + gender + <span class="string">&quot;。希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(info);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. %s , %d , %.2f %c 称为占位符,这些占位符由后面变量来替换</span></span><br><span class="line">        <span class="comment">//2. %s 由 字符串来替换</span></span><br><span class="line">        <span class="comment">//3. %d 由 整数来替换</span></span><br><span class="line">        <span class="comment">//4. %.2f 表示使用小数来替换，替换后，只会保留小数点两位, 并且进行四舍五入的处理</span></span><br><span class="line">        <span class="comment">//5. %c 使用char 类型来替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">formatStr</span> <span class="operator">=</span> <span class="string">&quot;我的姓名是%s 年龄是%d，成绩是%.2f 性别是%c.希望大家喜欢我！&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">info2</span> <span class="operator">=</span> String.format(formatStr, name, age, score, gender);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;info2=&quot;</span> + info2);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="11-2-StringBuffer⭐️"><a href="#11-2-StringBuffer⭐️" class="headerlink" title="11.2  StringBuffer⭐️"></a>11.2  StringBuffer⭐️</h2><ul><li><h4 id="基本介绍：-48"><a href="#基本介绍：-48" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删。</li><li>很多方法与String相同，但StringBuffer是可变长度的。</li><li>String Buffer是一个容器。</li></ul></li><li><h4 id="注意事项和细节：-43"><a href="#注意事项和细节：-43" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>StringBuffer 的直接父类是 AbstractstringBuilder</li><li>StringBuffer 实现了 Serializable，即StringBuffer的对象可以串行化</li><li>在父类中 AbstractstringBuilder 有属性 char[] valve,不是final，该 valve 数组存放 宁符串内容，引出存放在堆中的</li><li>StringBuffer 是一个final类，不能被继承</li><li>StringBuffer 字符内容存在 char[] value，所以在变化〔增加&#x2F;删除)不用每次都更换地址(即不是每次创建新对象)</li></ol></li><li><h4 id="String和StringBuffer对比："><a href="#String和StringBuffer对比：" class="headerlink" title="String和StringBuffer对比："></a>String和StringBuffer对比：</h4><ol><li>String保存的是宇符串常量，里面的值不能更改，每次String类的更新实际上就是更改地址</li><li>StringBuffer保存的是字符串变量，里面的值可以更改，不用更新地址，效率高</li></ol></li><li><h4 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个 大小为 16的 char[] ,用于存放字符内容</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2 通过构造器指定 char[] 大小</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 通过 给一个String 创建 StringBuffer, char[] 大小就是 str.length() + 16</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><h4 id="String和StringBuffer转换："><a href="#String和StringBuffer转换：" class="headerlink" title="String和StringBuffer转换："></a>String和StringBuffer转换：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String——&gt;StringBuffer</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello tom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1 使用构造器</span></span><br><span class="line"><span class="comment">//注意： 返回的才是StringBuffer对象，对str 本身没有影响</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str);</span><br><span class="line"><span class="comment">//方式2 使用的是append方法</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer1 = stringBuffer1.append(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer -&gt;String</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line"><span class="comment">//方式1 使用StringBuffer提供的 toString方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringBuffer3.toString();</span><br><span class="line"><span class="comment">//方式2: 使用构造器来搞定</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stringBuffer3);</span><br></pre></td></tr></table></figure></li><li><h4 id="常用方法：-2"><a href="#常用方法：-2" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>增：append</p></li><li><p>删：delete(start,end)</p></li><li><p>改：replace (start,end,string)</p></li><li><p>查：indexOf</p></li><li><p>插：insert</p></li><li><p>获取长度：length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">s.append(<span class="string">&#x27;,&#x27;</span>);<span class="comment">// &quot;hello,&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;张三丰&quot;</span>);<span class="comment">//&quot;hello,张三丰&quot;</span></span><br><span class="line">s.append(<span class="string">&quot;赵敏&quot;</span>).append(<span class="number">100</span>).append(<span class="literal">true</span>).append(<span class="number">10.5</span>);<span class="comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span></span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏100true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 删除索引为&gt;=start &amp;&amp; &lt;end 处的字符</span></span><br><span class="line"><span class="comment">* : 删除 11~14的字符 [11, 14)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s.delete(<span class="number">11</span>, <span class="number">14</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line"><span class="comment">//，使用 周芷若 替换 索引9-11的字符 [9,11)</span></span><br><span class="line">s.replace(<span class="number">9</span>, <span class="number">11</span>, <span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰周芷若true10.5&quot;</span></span><br><span class="line"><span class="comment">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">indexOf</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">System.out.println(indexOf);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插</span></span><br><span class="line"><span class="comment">//，在索引为9的位置插入 &quot;赵敏&quot;,原来索引为9的内容自动后移</span></span><br><span class="line">s.insert(<span class="number">9</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">System.out.println(s);<span class="comment">//&quot;hello,张三丰赵敏周芷若true10.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//长度</span></span><br><span class="line">System.out.println(s.length());<span class="comment">//22</span></span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="11-3-StringBulider⭐️"><a href="#11-3-StringBulider⭐️" class="headerlink" title="11.3  StringBulider⭐️"></a>11.3  StringBulider⭐️</h2><ul><li><h4 id="基本介绍：-49"><a href="#基本介绍：-49" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步，</li><li>该类被设计用作 String Buffer 的个简易替换，用在字符串缓冲区被单个线程使用的时候</li><li>如果可能，建议优先采用该类，因为在大多数实现中，它比StringBuffer 快</li><li>在 StringBuilder 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据</li></ul></li><li><h4 id="注意事项和细节：-44"><a href="#注意事项和细节：-44" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>StringBuilder 继承 AbstractstringBuilder 类</li><li>实现了 Serializable，说明StringBuilder对象是可以串行化(对象可以网络传输，可以保存到文件)</li><li>StringBuilder 是final类，不能被继承</li><li>StringBuitder对象字符序列仍然足存放在其父类 AbstractstringBuilder的 char [I valve;因此，字符序列是堆中</li><li>StringBoilder 的方法，没有做互斥的处理，即没有synchronized 关键字，网此在单线程的情況下使用</li></ol></li><li><h4 id="常用方法：-3"><a href="#常用方法：-3" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>和StringBuffer相同</li></ul></li><li><h4 id="三类对比："><a href="#三类对比：" class="headerlink" title="三类对比："></a>三类对比：</h4><ol><li>String：不可变字符序列，效率低,但是复用率高</li><li>StringBuffer：可变字符序列，效率较高(增删)，线程安全</li><li>String Builder：可变字符序列、效率最高、线程不安全</li><li>StringBuilder 和  StringBuffer 非常类似，均代表可变的字符序列，且方法相同</li><li>String使用注意说明：string s&#x3D;”a”;&#x2F;&#x2F;创建了一个字符串s+&#x3D;”b”;1&#x2F;实际上原来的”a”字符串对象已经丢奔了，现在又产生了一个字符串S+”b”(也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能</li></ol></li><li><h4 id="三类选择："><a href="#三类选择：" class="headerlink" title="三类选择："></a>三类选择：</h4><ol><li>如果宇符串存在大量的修改操作，一般使用 StringBuffer 或StringBuilder</li><li>如果字符串存在大量的修改操作，并在单线程的情況，使用 StringBuilder</li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用 String Buffer</li><li>如果我们字符串很少修改，被多个对象引用，使用String</li></ol></li></ul><h2 id="11-4-Math"><a href="#11-4-Math" class="headerlink" title="11.4  Math"></a>11.4  Math</h2><ul><li><h4 id="基本介绍：-50"><a href="#基本介绍：-50" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数，均为静态方法</p></li><li><h4 id="常用方法：-4"><a href="#常用方法：-4" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>abs：绝对值</li><li>pow：求幂</li><li>ceil：向上取整</li><li>floor：向下取整</li><li>round：四舍五入</li><li>sqrt：求开方</li><li>random：求随机数</li><li>max：求两个数的最大值</li><li>min：求两个数的最小值</li></ul></li></ul><h2 id="11-5-Date、Calenda、LocalDate"><a href="#11-5-Date、Calenda、LocalDate" class="headerlink" title="11.5  Date、Calenda、LocalDate"></a>11.5  Date、Calenda、LocalDate</h2><h3 id="11-5-1-Date"><a href="#11-5-1-Date" class="headerlink" title="11.5.1  Date"></a>11.5.1  Date</h3><ul><li><h4 id="常用方法：-5"><a href="#常用方法：-5" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>Date：精确到毫秒，代表特定时间</p></li><li><p>Simple Date Format：格式和解析日期的类SimpleDateFormat 格式化和解析日期的具体类</p><p>它允许进行格式化（日期一＞文本）解析（文本-＞日期）和规范化</p></li></ul></li></ul><h3 id="11-5-2-Calenda"><a href="#11-5-2-Calenda" class="headerlink" title="11.5.2  Calenda"></a>11.5.2  Calenda</h3><ul><li><h4 id="基本介绍：-51"><a href="#基本介绍：-51" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>是一个抽象类，并且构造器是private，可以通过 getInstance()来获得实例，提供大量的方法和字段</p></li><li><h4 id="常用方法：-6"><a href="#常用方法：-6" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>getInstance()：获取实例</li><li>get.XXXX：获取字段</li></ul></li></ul><h3 id="11-5-3-LocalDate"><a href="#11-5-3-LocalDate" class="headerlink" title="11.5.3  LocalDate"></a>11.5.3  LocalDate</h3><ul><li><h4 id="常用方法：-7"><a href="#常用方法：-7" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>LocalDateTime ldt &#x3D; LocalDateTime.now()：获取时间</p></li><li><p>get.Xxxx()：获取字段</p></li><li><p>DateTimeFormatter.format()：格式化</p></li><li><p>DateTimeFormatter.ofPattern()：定制格式化</p></li><li><p>Date date &#x3D; Date.from(instant);：Instant转换Date</p></li><li><p>Instant instant &#x3D; date.tolnstant();：Date转换Instant</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用now() 返回表示当前日期时间的 对象</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldt</span> <span class="operator">=</span> LocalDateTime.now(); <span class="comment">//LocalDate.now();//LocalTime.now()</span></span><br><span class="line">System.out.println(ldt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 使用DateTimeFormatter 对象来进行格式化</span></span><br><span class="line"><span class="comment">// 创建 DateTimeFormatter对象</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(ldt);</span><br><span class="line">System.out.println(<span class="string">&quot;格式化的日期=&quot;</span> + format);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;年=&quot;</span> + ldt.getYear());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;月=&quot;</span> + ldt.getMonthValue());</span><br><span class="line">System.out.println(<span class="string">&quot;日=&quot;</span> + ldt.getDayOfMonth());</span><br><span class="line">System.out.println(<span class="string">&quot;时=&quot;</span> + ldt.getHour());</span><br><span class="line">System.out.println(<span class="string">&quot;分=&quot;</span> + ldt.getMinute());</span><br><span class="line">System.out.println(<span class="string">&quot;秒=&quot;</span> + ldt.getSecond());</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now(); <span class="comment">//可以获取年月日</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalTime.now();<span class="comment">//获取到时分秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供 plus 和 minus方法可以对当前时间进行加或者减</span></span><br><span class="line"><span class="comment">//看看890天后，是什么时候 把 年月日-时分秒</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> ldt.plusDays(<span class="number">890</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;890天后=&quot;</span> + dateTimeFormatter.format(localDateTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//看看在 3456分钟前是什么时候，把 年月日-时分秒输出</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> ldt.minusMinutes(<span class="number">3456</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3456分钟前 日期=&quot;</span> + dateTimeFormatter.format(localDateTime2));</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="11-6-System"><a href="#11-6-System" class="headerlink" title="11.6  System"></a>11.6  System</h2><ul><li><h4 id="常用方法：-8"><a href="#常用方法：-8" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>exit：退出当前程序</li><li>arraycopy：复制数组元素，比较适合底层调用，一般使用Arrays.copyOf完成复制数组<br>int[] src&#x3D;{1,2.3}:<br>int[] dest &#x3D; new int[3];<br>System.arraycopy (src, 0, dest, 0, 3);</li><li>currentTimeMillens：返回当前时间距离1970-1-1的毫秒数</li><li>gc()：运行垃圾回收机制</li></ul></li></ul><h2 id="11-7-Arrays"><a href="#11-7-Arrays" class="headerlink" title="11.7  Arrays"></a>11.7  Arrays</h2><ul><li><h4 id="基本介绍：-52"><a href="#基本介绍：-52" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Arrays里面包含了一系列静态方法，用于管理或操作数组(比如排序和搜索)</p></li><li><h4 id="常用方法：-9"><a href="#常用方法：-9" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>toString：返回数组的字符串形式：</p><p>Arrays.toString (arr)</p></li><li><p>sort：排序(自然排序和定制排序)：</p><p>Arrays.sout(arr)</p></li><li><p>binarySearch：通过二分搜索法进行查找，必须是有排序的数组：</p><p>int index &#x3D; Arrays.binarySearch (arr, 需要查找的数)</p></li><li><p>copyOf：数组元素的复制：</p><p>Integer[] newArr &#x3D; Arrays.copyOf(arr, arr.length)</p></li><li><p>fill：数组元素的填充<br>Integer[] num &#x3D; new Integer[]{9,3,2}<br>Arrays.fill (num, 99);</p></li><li><p>equals：比较两个数组元素内容是否完全一<br>boolean equals &#x3D; Arrays.equals(arr. arr2)</p></li><li><p>aslist：将一组值，转换成list<br>List<Integer> asList &#x3D; Arrays.asList(2,3,4,5,6,1)</Integer></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>, <span class="number">567</span>&#125;;</span><br><span class="line"><span class="comment">// binarySearch 通过二分搜索法进行查找，要求必须排好</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//1. 使用 binarySearch 二叉查找</span></span><br><span class="line"><span class="comment">//2. 要求该数组是有序的. 如果该数组是无序的，不能使用binarySearch</span></span><br><span class="line"><span class="comment">//3. 如果数组中不存在该元素，就返回 return -(low + 1);  // key not found.</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">567</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//copyOf 数组元素的复制</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//1. 从 arr 数组中，拷贝 arr.length个元素到 newArr数组中</span></span><br><span class="line"><span class="comment">//2. 如果拷贝的长度 &gt; arr.length 就在新数组的后面 增加 null</span></span><br><span class="line"><span class="comment">//3. 如果拷贝长度 &lt; 0 就抛出异常NegativeArraySizeException</span></span><br><span class="line"><span class="comment">//4. 该方法的底层使用的是 System.arraycopy()</span></span><br><span class="line">Integer[] newArr = Arrays.copyOf(arr, arr.length);</span><br><span class="line">System.out.println(<span class="string">&quot;==拷贝执行完毕后==&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ill 数组元素的填充</span></span><br><span class="line">Integer[] num = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. 使用 99 去填充 num数组，可以理解成是替换原理的元素</span></span><br><span class="line">Arrays.fill(num, <span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;==num数组填充后==&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(num));</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals 比较两个数组元素内容是否完全一致</span></span><br><span class="line">Integer[] arr2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">90</span>, <span class="number">123</span>&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. 如果arr 和 arr2 数组的元素一样，则方法true;</span></span><br><span class="line"><span class="comment">//2. 如果不是完全一样，就返回 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">equals</span> <span class="operator">=</span> Arrays.equals(arr, arr2);</span><br><span class="line">System.out.println(<span class="string">&quot;equals=&quot;</span> + equals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//asList 将一组值，转换成list</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1. asList方法，会将 (2,3,4,5,6,1)数据转成一个List集合</span></span><br><span class="line"><span class="comment">//2. 返回的 asList 编译类型 List(接口)</span></span><br><span class="line"><span class="comment">//3. asList 运行类型 java.util.Arrays#ArrayList, 是Arrays类的</span></span><br><span class="line"><span class="comment">//   静态内部类 private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span></span><br><span class="line"><span class="comment">//              implements RandomAccess, java.io.Serializable</span></span><br><span class="line"><span class="type">List</span> <span class="variable">asList</span> <span class="operator">=</span> Arrays.asList(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;asList=&quot;</span> + asList);</span><br><span class="line">System.out.println(<span class="string">&quot;asList的运行类型&quot;</span> + asList.getClass());</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="11-8-BigInteger-BigDecimal"><a href="#11-8-BigInteger-BigDecimal" class="headerlink" title="11.8  BigInteger BigDecimal"></a>11.8  BigInteger BigDecimal</h2><ul><li><h4 id="基本介绍：-53"><a href="#基本介绍：-53" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>Biglnteger适合保存比较大的整型</p></li><li><p>BigDecimal适合保存精度更高的浮点型（小数）</p></li></ul></li><li><h4 id="常用方法：-10"><a href="#常用方法：-10" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>add：加</li><li>subtract：减</li><li>multiply：乘</li><li>divide：除</li></ul></li></ul><h1 id="12-集合"><a href="#12-集合" class="headerlink" title="12 集合"></a>12 集合</h1><ul><li><h4 id="基本介绍：-54"><a href="#基本介绍：-54" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>可以动态保存任意多个对象</li><li>提供了一系列方便的操作对象的方法</li><li>使用集合添加、删除新元素的示意代码更简洁</li></ul></li></ul><h2 id="12-1-集合框架体系⭐️"><a href="#12-1-集合框架体系⭐️" class="headerlink" title="12.1 集合框架体系⭐️"></a>12.1 集合框架体系⭐️</h2><ul><li><h4 id="框架图："><a href="#框架图：" class="headerlink" title="框架图："></a>框架图：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-23%2020.29.58.jpg" alt="截屏2022-05-23 20.29.58"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-23%2020.31.21.jpg" alt="截屏2022-05-23 20.31.21"></p></li></ul><h2 id="12-2-Collection"><a href="#12-2-Collection" class="headerlink" title="12.2  Collection"></a>12.2  Collection</h2><ul><li><h4 id="基本介绍：-55"><a href="#基本介绍：-55" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>Collection实现子类可以存放多个元素，每个元素可以是Object</li><li>Collection的实现类，有些可以存放重复的元素，有些不可以</li><li>Collection的实现类，有些是有序的(List)，有些不是有序(Set)</li><li>Collection接口没有直接的实现子类，是通过它的子接口Set 和 List 来实现的</li></ul></li><li><h4 id="接口常用方法："><a href="#接口常用方法：" class="headerlink" title="接口常用方法："></a>接口常用方法：</h4><ul><li><p>add：添加单个元素</p></li><li><p>remove：删除指定元素</p></li><li><p>contains：查找元素是否存在</p></li><li><p>size：获取元素个数</p></li><li><p>isEmpty：判断是否为空</p></li><li><p>clear：清空</p></li><li><p>addAll：添加多个元素</p></li><li><p>containsAll：查找多个元素是否都存在</p></li><li><p>removeAll：删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//        add:添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        remove:删除指定元素</span></span><br><span class="line">        <span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">        list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        contains:查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        size:获取元素个数</span></span><br><span class="line">        System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//        isEmpty:判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//        clear:清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        addAll:添加多个元素</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        containsAll:查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        removeAll：删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br><span class="line"><span class="comment">//        说明：以ArrayList实现类来演示.</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="12-2-1-List"><a href="#12-2-1-List" class="headerlink" title="12.2.1  List"></a>12.2.1  List</h3><ul><li><h4 id="基本介绍：-56"><a href="#基本介绍：-56" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>List集合类中元素有序（即添加顺序和取出顺序一致）、且可重复</li><li>List集合中的每个元素都有其对应的顺序索引，即支持索引</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器元素</li><li>常用： ArrayList、LinkedList、Vector</li></ul></li><li><h4 id="常用方法：-11"><a href="#常用方法：-11" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>void add(int index, Object ele)：在index位置插入ele元素</p></li><li><p>boolean addAll(int index, Collection eles)：从index位置开始将eles中的所有元素添加进来</p></li><li><p>Object get(int index)：获取指定index位置的元素</p></li><li><p>int indexOf(Object obj)：返回obj在集合中首次出现的位置</p></li><li><p>int lastindexOf(Object obj)：返回obj在当前集合中末次出现的位置</p></li><li><p>Object remove(int index)：移除指定index位置的元素，井返回此元素</p></li><li><p>Object set(int index, Object ele)：设置指定index位置的元素为ele，相当于是替换</p></li><li><p>List sublist(int fromlndex, int tolndex)：返回从fromlndex到tolndex位置的子集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;贾宝玉&quot;</span>);</span><br><span class="line"><span class="comment">//        void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line">        <span class="comment">//在index = 1的位置插入一个对象</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.addAll(<span class="number">1</span>, list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object get(int index):获取指定index位置的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        list.add(<span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;韩顺平&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object set(int index, Object ele):设置指定index位置的元素为ele , 相当于是替换.</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">&quot;玛丽&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line">        <span class="comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;returnlist=&quot;</span> + returnlist);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="12-2-1-1-迭代器"><a href="#12-2-1-1-迭代器" class="headerlink" title="12.2.1.1 迭代器"></a>12.2.1.1 迭代器</h4><ul><li><h4 id="基本介绍：-57"><a href="#基本介绍：-57" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>lterator对象称为迭代器，主要用于遍历 Collection 集合中的元素</p></li><li><p>实现了Collection接口的集合都有一个iterator()方法，用以返回一个实现了lterator接口的对象，即可以返回一个迭代器</p></li><li><p>lterator 仅用于遍历集合，lterator 本身并不存放对象</p></li><li><p>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-24%2017.23.58.jpg" alt="截屏2022-05-24 17.23.58"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionIterator</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;罗贯中&quot;</span>, <span class="number">10.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;小李飞刀&quot;</span>, <span class="string">&quot;古龙&quot;</span>, <span class="number">5.1</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;红楼梦&quot;</span>, <span class="string">&quot;曹雪芹&quot;</span>, <span class="number">34.6</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(&quot;col=&quot; + col);</span></span><br><span class="line">        <span class="comment">//现在老师希望能够遍历 col集合</span></span><br><span class="line">        <span class="comment">//1. 先得到 col 对应的 迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line">        <span class="comment">//2. 使用while循环遍历</span></span><br><span class="line"><span class="comment">//        while (iterator.hasNext()) &#123;//判断是否还有数据</span></span><br><span class="line"><span class="comment">//            //返回下一个元素，类型是Object</span></span><br><span class="line"><span class="comment">//            Object obj = iterator.next();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;obj=&quot; + obj);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//老师教大家一个快捷键，快速生成 while =&gt; itit</span></span><br><span class="line">        <span class="comment">//显示所有的快捷键的的快捷键 ctrl + j</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 当退出while循环后 , 这时iterator迭代器，指向最后的元素</span></span><br><span class="line">        <span class="comment">//   iterator.next();//NoSuchElementException</span></span><br><span class="line">        <span class="comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span></span><br><span class="line">        iterator = col.iterator();</span><br><span class="line">        System.out.println(<span class="string">&quot;===第二次遍历===&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, String author, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="12-2-1-2-for增强循环"><a href="#12-2-1-2-for增强循环" class="headerlink" title="12.2.1.2  for增强循环"></a>12.2.1.2  for增强循环</h4><ul><li><h4 id="基本介绍：-58"><a href="#基本介绍：-58" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>增强for循环，可以代替iterator迭代器，特点：增强for就是简化版的iterator，本质一样，只能用于遍历集合或数组</p></li><li><h4 id="基本语法：-17"><a href="#基本语法：-17" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素类型 元素名: 集合名或数组名)&#123;</span><br><span class="line">  访问元素;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-2-1-3-普通遍历循环"><a href="#12-2-1-3-普通遍历循环" class="headerlink" title="12.2.1.3 普通遍历循环"></a>12.2.1.3 普通遍历循环</h4><h4 id="12-2-1-4-ArrayList⭐️"><a href="#12-2-1-4-ArrayList⭐️" class="headerlink" title="12.2.1.4  ArrayList⭐️"></a>12.2.1.4  ArrayList⭐️</h4><ul><li><h4 id="注意事项和细节：-45"><a href="#注意事项和细节：-45" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>允许所有元素包括null加入</li><li>ArrayList 是由数组来实现数据存储的</li><li>ArrayList 基本等同于Vector，除了 ArrayList是线程不安全（执行效率高），在多线程情况下，不建议使用ArrayList</li></ol></li><li><h4 id="底层结构和源码分析："><a href="#底层结构和源码分析：" class="headerlink" title="底层结构和源码分析："></a>底层结构和源码分析：</h4><ol><li><p>ArrayList中维护了一个Object类型的数组elementData，transient Object[] elementData; </p><p>transient 表示瞬间,短暂的，表示该属性不会被序列化</p></li><li><p>创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第1次添加，则扩容elementData为10，如需要再次扩容，则扩容elementData 为1.5倍</p></li><li><p>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-25%2011.38.41.jpg" alt="截屏2022-05-25 11.38.41"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-25%2011.40.06.jpg" alt="截屏2022-05-25 11.40.06"></p></li></ol></li></ul><h4 id="12-2-1-5-Vector⭐️"><a href="#12-2-1-5-Vector⭐️" class="headerlink" title="12.2.1.5  Vector⭐️"></a>12.2.1.5  Vector⭐️</h4><ul><li><h4 id="注意事项和细节：-46"><a href="#注意事项和细节：-46" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>Vector底层是一个对象数组， protected Object[] elementData;</li><li>Vector 是线程同步的，即线程安全，Vector类的操作方法带有synchronized</li></ol></li><li><h4 id="底层机制和源码分析："><a href="#底层机制和源码分析：" class="headerlink" title="底层机制和源码分析："></a>底层机制和源码分析：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参构造器</span></span><br><span class="line">        <span class="comment">//有参数的构造</span></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        vector.add(<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;vector=&quot;</span> + vector);</span><br><span class="line">        <span class="comment">//老韩解读源码</span></span><br><span class="line">        <span class="comment">//1. new Vector() 底层</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public Vector() &#123;</span></span><br><span class="line"><span class="comment">                this(10);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         补充：如果是  Vector vector = new Vector(8);</span></span><br><span class="line"><span class="comment">            走的方法:</span></span><br><span class="line"><span class="comment">            public Vector(int initialCapacity) &#123;</span></span><br><span class="line"><span class="comment">                this(initialCapacity, 0);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. vector.add(i)</span></span><br><span class="line"><span class="comment">         2.1  //下面这个方法就添加数据到vector集合</span></span><br><span class="line"><span class="comment">            public synchronized boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                ensureCapacityHelper(elementCount + 1);</span></span><br><span class="line"><span class="comment">                elementData[elementCount++] = e;</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.2  //确定是否需要扩容 条件 ： minCapacity - elementData.length&gt;0</span></span><br><span class="line"><span class="comment">            private void ensureCapacityHelper(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                if (minCapacity - elementData.length &gt; 0)</span></span><br><span class="line"><span class="comment">                    grow(minCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span></span><br><span class="line"><span class="comment">              //newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">              //                             capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">              //就是扩容两倍.</span></span><br><span class="line"><span class="comment">            private void grow(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">                // overflow-conscious code</span></span><br><span class="line"><span class="comment">                int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">                int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">                                                 capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">                if (newCapacity - minCapacity &lt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">                if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></span><br><span class="line"><span class="comment">                    newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">                elementData = Arrays.copyOf(elementData, newCapacity);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="ArrayList和Vector："><a href="#ArrayList和Vector：" class="headerlink" title="ArrayList和Vector："></a>ArrayList和Vector：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2011.43.18.jpg" alt="截屏2022-05-26 11.43.18"></p></li></ul><h4 id="12-2-1-6-LinkedList"><a href="#12-2-1-6-LinkedList" class="headerlink" title="12.2.1.6  LinkedList"></a>12.2.1.6  LinkedList</h4><ul><li><h4 id="注意事项和细节：-47"><a href="#注意事项和细节：-47" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素包括null</li><li>线程不安全，没有实现同步</li></ol></li><li><h4 id="底层机制："><a href="#底层机制：" class="headerlink" title="底层机制："></a>底层机制：</h4><ol><li><p>Linkedlist底层维护了一个<strong>双向链表</strong></p></li><li><p>Linkedlist中维护了两个属性first和last分别指向首节点和尾节点</p></li><li><p>每个节点（Node对象），里面又维护了prev、next.item三个属性，其中通过<br>prev指向前一个，通过next指向后一个节点。最终实现双向链表</p></li><li><p>所以LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.18.01.jpg" alt="截屏2022-05-26 19.18.01"></p></li></ol></li><li><h4 id="ArrayList和LinkedList："><a href="#ArrayList和LinkedList：" class="headerlink" title="ArrayList和LinkedList："></a>ArrayList和LinkedList：</h4><ol><li><p>如果我们改查的操作多，选择ArrayList</p></li><li><p>如果我们增删的操作多，选择LinkedList</p></li><li><p>一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.20.03.jpg" alt="截屏2022-05-26 19.20.03"></p></li></ol></li></ul><h3 id="12-2-2-Set"><a href="#12-2-2-Set" class="headerlink" title="12.2.2  Set"></a>12.2.2  Set</h3><ul><li><h4 id="基本介绍：-59"><a href="#基本介绍：-59" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>无序（添加和取出的顺序不一致），没有索引</li><li>不允许重复元素，所以最多包含一个null</li><li>JDK API中Set接口的实现类有：<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-26%2019.21.30.jpg" alt="截屏2022-05-26 19.21.30"></li></ul></li><li><h4 id="常用方法：-12"><a href="#常用方法：-12" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>add：添加单个元素</p></li><li><p>remove：删除指定元素</p></li><li><p>contains：查找元素是否存在</p></li><li><p>size：获取元素个数</p></li><li><p>isEmpty：判断是否为空</p></li><li><p>clear：清空</p></li><li><p>addAll：添加多个元素</p></li><li><p>containsAll：查找多个元素是否都存在</p></li><li><p>removeAll：删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//1. 以Set 接口的实现类 HashSet 来讲解Set 接口的方法</span></span><br><span class="line">        <span class="comment">//2. set 接口的实现类的对象(Set接口对象), 不能存放重复的元素, 可以添加一个null</span></span><br><span class="line">        <span class="comment">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span></span><br><span class="line">        <span class="comment">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定.</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;john&quot;</span>);<span class="comment">//重复</span></span><br><span class="line">        set.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);<span class="comment">//</span></span><br><span class="line">        set.add(<span class="literal">null</span>);<span class="comment">//再次添加null</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span>;i ++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="comment">//方式1： 使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====使用迭代器====&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set.remove(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2: 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====增强for====&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span> + o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//set 接口对象，不能通过索引来获取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="遍历方式："><a href="#遍历方式：" class="headerlink" title="遍历方式："></a>遍历方式：</h4><ol><li>迭代器</li><li>增强for</li><li><strong>不能使用索引方式获取</strong>（普通遍历循环）</li></ol></li></ul><h4 id="12-2-2-1-HashSet⭐️"><a href="#12-2-2-1-HashSet⭐️" class="headerlink" title="12.2.2.1  HashSet⭐️"></a>12.2.2.1  HashSet⭐️</h4><ul><li><h4 id="注意事项和细节：-48"><a href="#注意事项和细节：-48" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>Hashset实现了Set接口</li><li>Hashset实际上是HashMap</li><li>可以存放null值，但是只能有一个null</li><li>Hashset不保证元素是有序的,取决于hash后，再确定索引的结果</li><li>不能有重复元素&#x2F;对象</li></ol></li><li><h4 id="底层机制和源码分析：-1"><a href="#底层机制和源码分析：-1" class="headerlink" title="底层机制和源码分析："></a>底层机制和源码分析：</h4><ol><li><p>HashSet 底层是 HashMap</p></li><li><p>添加一个元素时，先得到hash值会转成索引值</p></li><li><p>找到存储数据表table，看这个素引位置是否己经存放的有元素如果没有，直接加入</p></li><li><p>如果有调用equals 比较，如果相同，就放奔添加，如果不相同，则添加到最后</p></li><li><p>在Java8中，如果一条链表的元素个数超过 TREEIFY THRESHOLD（默认是8），井且table的大小＞&#x3D;MIN TREEIFY CAPACITY（默认64)就会进行树化(红黑树）</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-27%2011.48.11.jpg" alt="截屏2022-05-27 11.48.11"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//到此位置，第1次add分析完毕.</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;php&quot;</span>);<span class="comment">//到此位置，第2次add分析完毕</span></span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + hashSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashSet 的源码解读</span></span><br><span class="line"><span class="comment">        1. 执行 HashSet()</span></span><br><span class="line"><span class="comment">            public HashSet() &#123;</span></span><br><span class="line"><span class="comment">                map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        2. 执行 add()</span></span><br><span class="line"><span class="comment">           public boolean add(E e) &#123;//e = &quot;java&quot;</span></span><br><span class="line"><span class="comment">                return map.put(e, PRESENT)==null;//(static) PRESENT = new Object();</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment">         3.执行 put() , 该方法会执行 hash(key) 得到key对应的hash值 算法h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line"><span class="comment">             public V put(K key, V value) &#123;//key = &quot;java&quot; value = PRESENT 共享</span></span><br><span class="line"><span class="comment">                return putVal(hash(key), key, value, false, true);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         4.执行 putVal</span></span><br><span class="line"><span class="comment">         final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="comment">                   boolean evict) &#123;</span></span><br><span class="line"><span class="comment">                Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; //定义了辅助变量</span></span><br><span class="line"><span class="comment">                //table 就是 HashMap 的一个数组，类型是 Node[]</span></span><br><span class="line"><span class="comment">                //if 语句表示如果当前table 是null, 或者 大小=0</span></span><br><span class="line"><span class="comment">                //就是第一次扩容，到16个空间.</span></span><br><span class="line"><span class="comment">                if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="comment">                    n = (tab = resize()).length;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                //(1)根据key，得到hash 去计算该key应该存放到table表的哪个索引位置</span></span><br><span class="line"><span class="comment">                //并把这个位置的对象，赋给 p</span></span><br><span class="line"><span class="comment">                //(2)判断p 是否为null</span></span><br><span class="line"><span class="comment">                //(2.1) 如果p 为null, 表示还没有存放元素, 就创建一个Node (key=&quot;java&quot;,value=PRESENT)</span></span><br><span class="line"><span class="comment">                //(2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                else &#123;</span></span><br><span class="line"><span class="comment">                    //一个开发技巧提示： 在需要局部变量(辅助变量)时候，在创建</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; e; K k; //</span></span><br><span class="line"><span class="comment">                    //如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样</span></span><br><span class="line"><span class="comment">                    //并且满足 下面两个条件之一:</span></span><br><span class="line"><span class="comment">                    //(1) 准备加入的key 和 p 指向的Node 结点的 key 是同一个对象</span></span><br><span class="line"><span class="comment">                    //(2)  p 指向的Node 结点的 key 的equals() 和准备加入的key比较后相同</span></span><br><span class="line"><span class="comment">                    //就不能加入</span></span><br><span class="line"><span class="comment">                    if (p.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                        e = p;</span></span><br><span class="line"><span class="comment">                    //再判断 p 是不是一颗红黑树,</span></span><br><span class="line"><span class="comment">                    //如果是一颗红黑树，就调用 putTreeVal , 来进行添加</span></span><br><span class="line"><span class="comment">                    else if (p instanceof TreeNode)</span></span><br><span class="line"><span class="comment">                        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></span><br><span class="line"><span class="comment">                    else &#123;//如果table对应索引位置，已经是一个链表, 就使用for循环比较</span></span><br><span class="line"><span class="comment">                    </span></span><br><span class="line"><span class="comment">                          //(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后</span></span><br><span class="line"><span class="comment">                          //    注意在把元素添加到链表后，立即判断 该链表是否已经达到8个结点</span></span><br><span class="line"><span class="comment">                          //    , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)</span></span><br><span class="line"><span class="comment">                          //    注意，在转成红黑树时，要进行判断, 判断条件</span></span><br><span class="line"><span class="comment">                          //    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))</span></span><br><span class="line"><span class="comment">                          //            resize();</span></span><br><span class="line"><span class="comment">                          //    如果上面条件成立，先table扩容.</span></span><br><span class="line"><span class="comment">                          //    只有上面条件不成立时，才进行转成红黑树</span></span><br><span class="line"><span class="comment">                          //(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接break</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        for (int binCount = 0; ; ++binCount) &#123;</span></span><br><span class="line"><span class="comment">                            if ((e = p.next) == null) &#123;</span></span><br><span class="line"><span class="comment">                                p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                                if (binCount &gt;= TREEIFY_THRESHOLD(8) - 1) // -1 for 1st</span></span><br><span class="line"><span class="comment">                                    treeifyBin(tab, hash);</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            if (e.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            p = e;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    if (e != null) &#123; // existing mapping for key</span></span><br><span class="line"><span class="comment">                        V oldValue = e.value;</span></span><br><span class="line"><span class="comment">                        if (!onlyIfAbsent || oldValue == null)</span></span><br><span class="line"><span class="comment">                            e.value = value;</span></span><br><span class="line"><span class="comment">                        afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">                        return oldValue;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                ++modCount;</span></span><br><span class="line"><span class="comment">                //size 就是我们每加入一个结点Node(k,v,h,next), size++</span></span><br><span class="line"><span class="comment">                if (++size &gt; threshold)</span></span><br><span class="line"><span class="comment">                    resize();//扩容</span></span><br><span class="line"><span class="comment">                afterNodeInsertion(evict);</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="扩容和红黑树机制："><a href="#扩容和红黑树机制：" class="headerlink" title="扩容和红黑树机制："></a>扩容和红黑树机制：</h4><ol><li>HashSet底层是HashMap</li><li>第一次添加时，table 数组扩容到 16，临界值(threshold)是 16*加载因子(loadFactor)是0.75&#x3D; 12</li><li>每加入一个节点，size就会++，到达临界值就会扩容</li><li>如果table 数组使用到了临界值 12,就会扩容到16*2&#x3D;32,新的临界值就是32*0.75&#x3D;24，依次类推</li><li>在Java8中，如果一条链表的元素个数到达 TREEIFY_ THRESHOLD(默认是 8）井且table的大小＞&#x3D;MIN TREEIFY CAPACITY (默认64),就会进行树化(红黑树），否则仍然采用数组扩容机制</li></ol></li><li><h4 id="去重机制对比："><a href="#去重机制对比：" class="headerlink" title="去重机制对比："></a>去重机制对比：</h4><ul><li>HashSet去重机制: hashCode() + equals()，底层先通过存入对象，通过运算hash值得到对应的索引，如果table索引所在的位置没有数据就直接存放；如果有数据就进行<strong>equals</strong>（注意重写情况）比较[遍历比较]，如果比较后，不相同就加入，否则就不加入</li><li>TreeSet的去重机制：如果你传入了一个Comparator匿名对象，就使用实现的compare去重，如果方法返回0,就是相同的元素&#x2F;数据，就不添加，如果你没有传入一个Comparator匿名对象，则以你添加的对象实现的Compareable接口的compareTo去重</li></ul></li><li><h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);<span class="comment">//ok</span></span><br><span class="line">        set.add(p1);<span class="comment">//ok</span></span><br><span class="line">        set.add(p2);<span class="comment">//ok</span></span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        System.out.println(set);<span class="comment">//2</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//3</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        System.out.println(set);<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> id == person.id &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-30%2011.03.03.jpg" alt="截屏2022-05-30 11.03.03"></p></li></ul><h4 id="12-2-2-2-LinkedHashSet"><a href="#12-2-2-2-LinkedHashSet" class="headerlink" title="12.2.2.2  LinkedHashSet"></a>12.2.2.2  LinkedHashSet</h4><ul><li><h4 id="注意事项和细节：-49"><a href="#注意事项和细节：-49" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>LinkedHashset 是Hashset 的子类</p></li><li><p>LinkedHashSet 底层是一个 LinkedHashMap，底层维护了一个 数组＋<strong>双向链表</strong></p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序(图)，这使得元素看起来是以插入顺序保存的</p></li><li><p>LinkedHashSet 不允许添重复元素</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.49.06.jpg" alt="截屏2022-05-29 16.49.06"></p></li></ol></li><li><h4 id="底层机制和源代码分析："><a href="#底层机制和源代码分析：" class="headerlink" title="底层机制和源代码分析："></a>底层机制和源代码分析：</h4><ol><li>LinkedHashSet 加入顺序和取出元素&#x2F;数据的顺序一致</li><li>LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)</li><li>LinkedHashSet 底层结构 (数组table+双向链表)</li><li>添加第一次时，直接将 数组table 扩容到 16 ,存放的结点类型是 LinkedHashMap$Entry</li><li>数组是 HashMap$Node[] 存放的元素&#x2F;数据是 LinkedHashMap$Entry类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//分析一下LinkedHashSet的底层机制</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;刘&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;HSP&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;set=&quot;</span> + set);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1. LinkedHashSet 加入顺序和取出元素/数据的顺序一致</span></span><br><span class="line">        <span class="comment">//2. LinkedHashSet 底层维护的是一个LinkedHashMap(是HashMap的子类)</span></span><br><span class="line">        <span class="comment">//3. LinkedHashSet 底层结构 (数组table+双向链表)</span></span><br><span class="line">        <span class="comment">//4. 添加第一次时，直接将 数组table 扩容到 16 ,存放的结点类型是 LinkedHashMap$Entry</span></span><br><span class="line">        <span class="comment">//5. 数组是 HashMap$Node[] 存放的元素/数据是 LinkedHashMap$Entry类型</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                //继承关系是在内部类完成.</span></span><br><span class="line"><span class="comment">                static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment">                    Entry&lt;K,V&gt; before, after;</span></span><br><span class="line"><span class="comment">                    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">                        super(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, <span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-2-2-3-TreeSet"><a href="#12-2-2-3-TreeSet" class="headerlink" title="12.2.2.3  TreeSet"></a>12.2.2.3  TreeSet</h4><ul><li><h4 id="底层机制：-1"><a href="#底层机制：-1" class="headerlink" title="底层机制："></a>底层机制：</h4><ol><li><p>TreeSet()构造器需传入Comparator接口的匿名内部类，因为底层 Comparable&lt;? super K&gt; k &#x3D; (Comparator&lt;? super K&gt;) key;</p><p>若没有传入，则需要把传入的类实现Comparable接口</p></li><li><p>若按照compare方法比较value相同则无法加入value</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 当我们使用无参构造器，创建TreeSet时，默认按字母排序</span></span><br><span class="line">        <span class="comment">//2. 老师希望添加的元素，按照字符串大小来排序</span></span><br><span class="line">        <span class="comment">//3. 使用TreeSet 提供的一个构造器，可以传入一个比较器(匿名内部类)</span></span><br><span class="line">        <span class="comment">//   并指定排序规则</span></span><br><span class="line">        <span class="comment">//4. 简单看看源码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 构造器把传入的比较器对象，赋给了 TreeSet的底层的 TreeMap的属性this.comparator</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span></span><br><span class="line"><span class="comment">                this.comparator = comparator;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         2. 在 调用 treeSet.add(&quot;tom&quot;), 在底层会执行到</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             if (cpr != null) &#123;//cpr 就是我们的匿名内部类(对象)</span></span><br><span class="line"><span class="comment">                do &#123;</span></span><br><span class="line"><span class="comment">                    parent = t;</span></span><br><span class="line"><span class="comment">                    //动态绑定到我们的匿名内部类(对象)compare</span></span><br><span class="line"><span class="comment">                    cmp = cpr.compare(key, t.key);</span></span><br><span class="line"><span class="comment">                    if (cmp &lt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.left;</span></span><br><span class="line"><span class="comment">                    else if (cmp &gt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.right;</span></span><br><span class="line"><span class="comment">                    else //如果相等，即返回0,这个Key就没有加入</span></span><br><span class="line"><span class="comment">                        return t.setValue(value);</span></span><br><span class="line"><span class="comment">                &#125; while (t != null);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        TreeSet treeSet = new TreeSet();</span></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">treeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//下面 调用String的 compareTo方法进行字符串大小比较</span></span><br><span class="line">                <span class="comment">//如果老韩要求加入的元素，按照长度大小排序</span></span><br><span class="line">                <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//添加数据.</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);<span class="comment">//3</span></span><br><span class="line">        treeSet.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;abc&quot;</span>);<span class="comment">//3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;treeSet=&quot;</span> + treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-3-Map"><a href="#12-3-Map" class="headerlink" title="12.3  Map"></a>12.3  Map</h2><ul><li><h4 id="注意事项和细节：-50"><a href="#注意事项和细节：-50" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>Map与Collection井列存在，用于保存具有映射关系的数据</p></li><li><p><strong>Map 中的key 和 value 可以是任何引用类型的数据，会封装到HashMap$Node对象中</strong></p></li><li><p>Map 中的key 不允许重复，原因和HashSet 一样</p></li><li><p>Map 中的value 可以重复</p></li><li><p>Map 的key可以为null，value也可以为null，key为null只有能有一个，value为null可以为多个</p></li><li><p>常用String类作为Map的key</p></li><li><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</p></li><li><p>Map存放数据的key-value示意图，一对 k-y是放在一个Node中的，有因为Node 实现了 Entry 接口</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-27%2023.07.17.jpg" alt="截屏2022-05-27 23.07.17"></p></li></ol></li><li><h4 id="常用方法：-13"><a href="#常用方法：-13" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>put：添加</p></li><li><p>remove：根据键删除映射关系</p></li><li><p>get：根据键获取值</p></li><li><p>size：获取元素个数</p></li><li><p>isEmpty：判断个数是否为0</p></li><li><p>clear：清除</p></li><li><p>containskey：查找键是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//演示map接口常用方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;&quot;</span>, <span class="number">100</span>));<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);<span class="comment">//替换-&gt; 一会分析源码</span></span><br><span class="line">        map.put(<span class="string">&quot;王宝强&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;宋喆&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;刘令博&quot;</span>, <span class="literal">null</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;刘亦菲&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;鹿晗&quot;</span>, <span class="string">&quot;关晓彤&quot;</span>);<span class="comment">//OK</span></span><br><span class="line">        map.put(<span class="string">&quot;hsp&quot;</span>, <span class="string">&quot;hsp的老婆&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        remove:根据键删除映射关系</span></span><br><span class="line">        map.remove(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"><span class="comment">//        get：根据键获取值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> map.get(<span class="string">&quot;鹿晗&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;val=&quot;</span> + val);</span><br><span class="line"><span class="comment">//        size:获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;k-v=&quot;</span> + map.size());</span><br><span class="line"><span class="comment">//        isEmpty:判断个数是否为0</span></span><br><span class="line">        System.out.println(map.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">//        clear:清除k-v</span></span><br><span class="line">        <span class="comment">//map.clear();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);</span><br><span class="line"><span class="comment">//        containsKey:查找键是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;结果=&quot;</span> + map.containsKey(<span class="string">&quot;hsp&quot;</span>));<span class="comment">//T</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="遍历方式：-1"><a href="#遍历方式：-1" class="headerlink" title="遍历方式："></a>遍历方式：</h4><ol><li><p>先取出 所有的Key , 通过Key 取出对应的Value</p></li><li><p>把所有的values取出</p></li><li><p>通过 EntrySet 来获取 k-v</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;邓超&quot;</span>, <span class="string">&quot;孙俪&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;王宝强&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;宋喆&quot;</span>, <span class="string">&quot;马蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘令博&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>, <span class="string">&quot;刘亦菲&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;鹿晗&quot;</span>, <span class="string">&quot;关晓彤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一组: 先取出 所有的Key , 通过Key 取出对应的Value</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keyset</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---第一种方式-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keyset) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----第二种方式--------&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keyset.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;-&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二组: 把所有的values取出</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        <span class="comment">//这里可以使用所有的Collections使用的遍历方法</span></span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的value 增强for----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---取出所有的value 迭代器----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span>  iterator2.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三组: 通过EntrySet 来获取 k-v</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();<span class="comment">// EntrySet&lt;Map.Entry&lt;K,V&gt;&gt;</span></span><br><span class="line">        <span class="comment">//(1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用EntrySet 的 for增强(第3种)----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line">            <span class="comment">//将entry 转成 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----使用EntrySet 的 迭代器(第4种)----&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator3</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator3.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span>  iterator3.next();</span><br><span class="line">            <span class="comment">//System.out.println(next.getClass());//HashMap$Node -实现-&gt; Map.Entry (getKey,getValue)</span></span><br><span class="line">            <span class="comment">//向下转型 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey() + <span class="string">&quot;-&quot;</span> + m.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="12-3-1-HashMap⭐️"><a href="#12-3-1-HashMap⭐️" class="headerlink" title="12.3.1  HashMap⭐️"></a>12.3.1  HashMap⭐️</h3><ul><li><h4 id="注意事项和细节：-51"><a href="#注意事项和细节：-51" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>HashMap是Map 接口使用频率最高的实现类</li><li>Hashap 是以 key-val 对的方式来存储数据(HashMap$Node类型）</li><li><strong>key 不能重复，但是值可以重复，允许使用null和null值</strong></li><li><strong>如果添加相同的key，则会覆盖原来的key-val ，等同于修改（key不会替换，val会替换）</strong></li><li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的(jdk8的hashMap 底层 数组＋链表＋红黑树）</li><li>HashMap没有实现同步，因此是线程不安全的，方法没有做同步互斥的操作，没有synchronized</li></ol></li><li><h4 id="底层机制和源码剖析："><a href="#底层机制和源码剖析：" class="headerlink" title="底层机制和源码剖析："></a>底层机制和源码剖析：</h4><ol><li><p>扩容机制和Hashset相同</p></li><li><p>HashMap底层维护了Node类型的数组table，默认为null</p></li><li><p>当创建对象时，将加载因子(loadfactor)初始化为0.75</p></li><li><p>当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key是否和准备加入的key相等，如果相等，则直接替换val：如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容</p></li><li><p>第1次添加，则需要扩容table容量为16，临界值(threshold)为12</p></li><li><p>以后再扩容，则需要扩容table容量为原来的2倍，临界值为原来的2倍,即24，依次类推</p></li><li><p>在Java8中，如果一条链表的元素个数超过 TREEIFY THRESHOLD（默认是8），并且<br>table的大小＞&#x3D;MIN TREEIFY CAPACITY（默认64),就会进行树化（红黑树）</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.13.53.jpg" alt="截屏2022-05-29 16.13.53"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapSource1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;php&quot;</span>, <span class="number">10</span>);<span class="comment">//ok</span></span><br><span class="line">        map.put(<span class="string">&quot;java&quot;</span>, <span class="number">20</span>);<span class="comment">//替换value</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span> + map);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*老韩解读HashMap的源码+图解</span></span><br><span class="line"><span class="comment">        1. 执行构造器 new HashMap()</span></span><br><span class="line"><span class="comment">           初始化加载因子 loadfactor = 0.75</span></span><br><span class="line"><span class="comment">           HashMap$Node[] table = null</span></span><br><span class="line"><span class="comment">        2. 执行put 调用 hash方法，计算 key的 hash值 (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line"><span class="comment">            public V put(K key, V value) &#123;//K = &quot;java&quot; value = 10</span></span><br><span class="line"><span class="comment">                return putVal(hash(key), key, value, false, true);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        3. 执行 putVal</span></span><br><span class="line"><span class="comment">         final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="comment">                   boolean evict) &#123;</span></span><br><span class="line"><span class="comment">                Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;//辅助变量</span></span><br><span class="line"><span class="comment">                //如果底层的table 数组为null, 或者 length =0 , 就扩容到16</span></span><br><span class="line"><span class="comment">                if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="comment">                    n = (tab = resize()).length;</span></span><br><span class="line"><span class="comment">                //取出hash值对应的table的索引位置的Node, 如果为null, 就直接把加入的k-v</span></span><br><span class="line"><span class="comment">                //, 创建成一个 Node ,加入该位置即可</span></span><br><span class="line"><span class="comment">                if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                else &#123;</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; e; K k;//辅助变量</span></span><br><span class="line"><span class="comment">                // 如果table的索引位置的key的hash相同和新的key的hash值相同，</span></span><br><span class="line"><span class="comment">                 // 并 满足(table现有的结点的key和准备添加的key是同一个对象  || equals返回真)</span></span><br><span class="line"><span class="comment">                 // 就认为不能加入新的k-v</span></span><br><span class="line"><span class="comment">                    if (p.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">                        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                        e = p;</span></span><br><span class="line"><span class="comment">                    else if (p instanceof TreeNode)//如果当前的table的已有的Node 是红黑树，就按照红黑树的方式处理</span></span><br><span class="line"><span class="comment">                        e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></span><br><span class="line"><span class="comment">                    else &#123;</span></span><br><span class="line"><span class="comment">                        //如果找到的结点，后面是链表，就循环比较</span></span><br><span class="line"><span class="comment">                        for (int binCount = 0; ; ++binCount) &#123;//死循环</span></span><br><span class="line"><span class="comment">                            if ((e = p.next) == null) &#123;//如果整个链表，没有和他相同,就加到该链表的最后</span></span><br><span class="line"><span class="comment">                                p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                                //加入后，判断当前链表的个数，是否已经到8个，到8个，后</span></span><br><span class="line"><span class="comment">                                //就调用 treeifyBin 方法进行红黑树的转换</span></span><br><span class="line"><span class="comment">                                if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span></span><br><span class="line"><span class="comment">                                    treeifyBin(tab, hash);</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            if (e.hash == hash &amp;&amp; //如果在循环比较过程中，发现有相同,就break,就只是替换value</span></span><br><span class="line"><span class="comment">                                ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            p = e;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    if (e != null) &#123; // existing mapping for key</span></span><br><span class="line"><span class="comment">                        V oldValue = e.value;</span></span><br><span class="line"><span class="comment">                        if (!onlyIfAbsent || oldValue == null)</span></span><br><span class="line"><span class="comment">                            e.value = value; //替换，key对应value</span></span><br><span class="line"><span class="comment">                        afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">                        return oldValue;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                ++modCount;//每增加一个Node ,就size++</span></span><br><span class="line"><span class="comment">                if (++size &gt; threshold[12-24-48])//如size &gt; 临界值，就扩容</span></span><br><span class="line"><span class="comment">                    resize();</span></span><br><span class="line"><span class="comment">                afterNodeInsertion(evict);</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              5. 关于树化(转成红黑树)</span></span><br><span class="line"><span class="comment">              //如果table 为null ,或者大小还没有到 64，暂时不树化，而是进行扩容.</span></span><br><span class="line"><span class="comment">              //否则才会真正的树化 -&gt; 剪枝</span></span><br><span class="line"><span class="comment">              final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span></span><br><span class="line"><span class="comment">                int n, index; Node&lt;K,V&gt; e;</span></span><br><span class="line"><span class="comment">                if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span></span><br><span class="line"><span class="comment">                    resize();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="12-3-2-Hashtable"><a href="#12-3-2-Hashtable" class="headerlink" title="12.3.2  Hashtable"></a>12.3.2  Hashtable</h3><ul><li><h4 id="注意事项和细节：-52"><a href="#注意事项和细节：-52" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>存放的元素是键值对：即K-V</li><li>hashtable的键和值都不能为null， 否则会抛出NulPointerException</li><li>hashTable 使用方法基本上和HashMap一样</li><li>hashTable 是线程安全的(synchronized)，hashMap 是线程不安全的</li></ol></li><li><h4 id="底层机制：-2"><a href="#底层机制：-2" class="headerlink" title="底层机制："></a>底层机制：</h4><ol><li>底层有数组 Hashtable$Entry[] 初始化大小为 11</li><li>临界值 threshold 8 &#x3D; 11 * 0.75</li><li>扩容: 按照自己的扩容机制来进行即可</li><li>执行方法 addEntry(hash, key, value, index); 添加K-V 封装到Entry</li><li>当 if (count &gt;&#x3D; threshold) 满足时，就进行扩容</li><li>按照 int newCapacity &#x3D; (oldCapacity &lt;&lt; 1) + 1;的大小扩容</li></ol></li><li><h4 id="Hashtable和HashMapd"><a href="#Hashtable和HashMapd" class="headerlink" title="Hashtable和HashMapd:"></a>Hashtable和HashMapd:</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-05-29%2016.14.26.jpg" alt="截屏2022-05-29 16.14.26"></p></li></ul><h3 id="12-3-3-LinkedHashMap"><a href="#12-3-3-LinkedHashMap" class="headerlink" title="12.3.3  LinkedHashMap"></a>12.3.3  LinkedHashMap</h3><h3 id="12-3-4-TreeMap"><a href="#12-3-4-TreeMap" class="headerlink" title="12.3.4. TreeMap"></a>12.3.4. TreeMap</h3><ul><li><h4 id="底层机制和源码剖析：-1"><a href="#底层机制和源码剖析：-1" class="headerlink" title="底层机制和源码剖析："></a>底层机制和源码剖析：</h4><ol><li><p>若按照compare方法比较key相同则无法加入value值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用默认的构造器，创建TreeMap, 是字母排序</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            要求：按照传入的 k(String) 的大小进行排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        TreeMap treeMap = new TreeMap();</span></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//按照传入的 k(String) 的大小进行排序</span></span><br><span class="line">                <span class="comment">//按照K(String) 的长度大小排序</span></span><br><span class="line">                <span class="comment">//return ((String) o2).compareTo((String) o1);</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeMap.put(<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;kristina&quot;</span>, <span class="string">&quot;克瑞斯提诺&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;smith&quot;</span>, <span class="string">&quot;斯密斯&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;hsp&quot;</span>, <span class="string">&quot;韩顺平&quot;</span>);<span class="comment">//加入不了</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;treemap=&quot;</span> + treeMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            解读源码：</span></span><br><span class="line"><span class="comment">            1. 构造器. 把传入的实现了 Comparator接口的匿名内部类(对象)，传给给TreeMap的comparator</span></span><br><span class="line"><span class="comment">             public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span></span><br><span class="line"><span class="comment">                this.comparator = comparator;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            2. 调用put方法</span></span><br><span class="line"><span class="comment">            2.1 第一次添加, 把k-v 封装到 Entry对象，放入root</span></span><br><span class="line"><span class="comment">            Entry&lt;K,V&gt; t = root;</span></span><br><span class="line"><span class="comment">            if (t == null) &#123;</span></span><br><span class="line"><span class="comment">                compare(key, key); // type (and possibly null) check</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                root = new Entry&lt;&gt;(key, value, null);</span></span><br><span class="line"><span class="comment">                size = 1;</span></span><br><span class="line"><span class="comment">                modCount++;</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            2.2 以后添加</span></span><br><span class="line"><span class="comment">            Comparator&lt;? super K&gt; cpr = comparator;</span></span><br><span class="line"><span class="comment">            if (cpr != null) &#123;</span></span><br><span class="line"><span class="comment">                do &#123; //遍历所有的key , 给当前key找到适当位置</span></span><br><span class="line"><span class="comment">                    parent = t;</span></span><br><span class="line"><span class="comment">                    cmp = cpr.compare(key, t.key);//动态绑定到我们的匿名内部类的compare</span></span><br><span class="line"><span class="comment">                    if (cmp &lt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.left;</span></span><br><span class="line"><span class="comment">                    else if (cmp &gt; 0)</span></span><br><span class="line"><span class="comment">                        t = t.right;</span></span><br><span class="line"><span class="comment">                    else  //如果遍历过程中，发现准备添加Key 和当前已有的Key 相等，就不添加</span></span><br><span class="line"><span class="comment">                        return t.setValue(value);</span></span><br><span class="line"><span class="comment">                &#125; while (t != null);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="12-3-5-Properties"><a href="#12-3-5-Properties" class="headerlink" title="12.3.5. Properties"></a>12.3.5. Properties</h3><ul><li><h4 id="注意事项和细节：-53"><a href="#注意事项和细节：-53" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>Properties类继承Hashtable类，实现了Map接口，也是使用一种简直对的形式保存数据</p></li><li><p>使用特点和Hashtable类似</p></li><li><p>Properties 还可以用于 从xxx.properties 文件中，加载数据到Properties类对象井进行读取和修改</p></li><li><p>xxx.properties 文件通常作为配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//1. Properties 继承  Hashtable</span></span><br><span class="line">        <span class="comment">//2. 可以通过 k-v 存放数据，当然key 和 value 不能为 null</span></span><br><span class="line">        <span class="comment">//增加</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//properties.put(null, &quot;abc&quot;);//抛出 空指针异常</span></span><br><span class="line">        <span class="comment">//properties.put(&quot;abc&quot;, null); //抛出 空指针异常</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="number">100</span>);<span class="comment">//k-v</span></span><br><span class="line">        properties.put(<span class="string">&quot;lucy&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>, <span class="number">88</span>);<span class="comment">//如果有相同的key ， value被替换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过k 获取对应值</span></span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;lic&quot;</span>));<span class="comment">//88</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>, <span class="string">&quot;约翰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;properties=&quot;</span> + properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="12-4-Collections"><a href="#12-4-Collections" class="headerlink" title="12.4  Collections"></a>12.4  Collections</h2><ul><li><h4 id="基本介绍：-60"><a href="#基本介绍：-60" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>Collections 是一个操作 Set.List 和 Map 等集合的工具类</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li></ul></li><li><h4 id="常用方法：-14"><a href="#常用方法：-14" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>排序操作：</p><ul><li>reverse (List)：反转List中元素顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List, Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap (List, int,int)：将指定 list 集合中的 i处元素和j处元素进行交换</li></ul></li><li><p>查找替换：</p><ul><li><p>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</p></li><li><p>Object max(Collection, Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</p></li><li><p>Object min(Collection)</p></li><li><p>Object min(Collection, Comparator)</p></li><li><p>int frequency(Collection, Object)：返回指定集合中指定元素的出现次数</p></li><li><p>void copy(List dest, List src)：将src中的内容复制到dest中</p></li><li><p>boolean replaceAll(List list, Object oldVal, Object newVal)：使用新值替换 List 对象的所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Collections_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList 集合，用于测试.</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;king&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;milan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line"><span class="comment">//            Collections.shuffle(list);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;list=&quot; + list);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;自然排序后&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line">        <span class="comment">//我们希望按照 字符串的长度大小排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="comment">//可以加入校验代码.</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o2).length() - ((String) o1).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度大小排序=&quot;</span> + list);</span><br><span class="line"><span class="comment">//        swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比如</span></span><br><span class="line">        Collections.swap(list, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后的情况&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;自然顺序最大元素=&quot;</span> + Collections.max(list));</span><br><span class="line">        <span class="comment">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line">        <span class="comment">//比如，我们要返回长度最大的元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">maxObject</span> <span class="operator">=</span> Collections.max(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ((String)o1).length() - ((String)o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;长度最大的元素=&quot;</span> + maxObject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object min(Collection)</span></span><br><span class="line">        <span class="comment">//Object min(Collection，Comparator)</span></span><br><span class="line">        <span class="comment">//上面的两个方法，参考max即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tom出现的次数=&quot;</span> + Collections.frequency(list, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//为了完成一个完整拷贝，我们需要先给dest 赋值，大小和list.size()一样</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            dest.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;dest=&quot;</span> + dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line">        <span class="comment">//如果list中，有tom 就替换成 汤姆</span></span><br><span class="line">        Collections.replaceAll(list, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list替换后=&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="12-5-总结⭐️⭐️"><a href="#12-5-总结⭐️⭐️" class="headerlink" title="12.5 总结⭐️⭐️"></a>12.5 总结⭐️⭐️</h2><ul><li><h4 id="选择集合："><a href="#选择集合：" class="headerlink" title="选择集合："></a>选择集合：</h4><ul><li><p>先判断存储的类型（一组对象[单列]或一组键值对[双列]）</p></li><li><p>一组对象[单列]： Collection接口</p><ul><li><p>允许重复：List</p><p>增删多：LinkedList  [底层维护双向链表]</p><p>改查多：ArrayList  [底层維护 Object类型的可变数组]</p></li><li><p>不允许重复：Set</p><p>无序：HashSet  [底层是HashMap，维护了一个哈希表，即(数组＋链表＋红黑树)]</p><p>排序：Treeset  []</p><p>插入和取出顺序一致：LinkedHashSet  [底层维护数组＋双向链表]</p></li></ul></li><li><p>一组键[值对双列]：Map</p><ul><li>键无序：HashMap  [底层是：哈希表  jdk7：数组＋链表，jdk8:数组＋链表＋红黑树]</li><li>键排序：TreeMap  []</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件 Propertie</li></ul></li></ul></li></ul><h1 id="13-泛型"><a href="#13-泛型" class="headerlink" title="13 泛型"></a>13 泛型</h1><h2 id="13-1-泛型"><a href="#13-1-泛型" class="headerlink" title="13.1 泛型"></a>13.1 泛型</h2><ul><li><h4 id="基本介绍：-61"><a href="#基本介绍：-61" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>泛型又称参数化类型（接收数据类型的数据类型），是Jdk5.0出现的新特性,解决数据类型的安全性问题</li><li>在类声明或实例化时只要指定好需要的具体的类型即可</li><li>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮</li></ul></li><li><h4 id="基本语法：-18"><a href="#基本语法：-18" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface 接口 &lt;T&gt;&#123;&#125;</span><br><span class="line">class 类 &lt;K,V&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">在类名后指定类型参数的值(类型):</span><br><span class="line">  List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">  lterator&lt;Customer&gt; iterator = customers.iterator();</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-54"><a href="#注意事项和细节：-54" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>泛型只能是引用类型</li><li>在给泛型指定具体类型后，可以传入该类型或者其子类类型</li><li>List list3 &#x3D; new ArrayList()：默认给它的 泛型是[&lt;E＞ E就是 Object]</li></ol></li><li><h4 id="例：-1"><a href="#例：-1" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExercise02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">3000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;jack&quot;</span>, <span class="number">2000</span>, <span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        employees.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Employee&gt;() &#123;<span class="comment">//传入匿名内部类接口重写compare方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Employee o1, Employee o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o1 <span class="keyword">instanceof</span> Employee) &amp;&amp; (o2 <span class="keyword">instanceof</span> Employee)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;类型不正确&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> o1.getBirthday().compareTo(o2.getBirthday());<span class="comment">//在MyDate内重写compareTo方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Employee employee : employees) &#123;</span><br><span class="line">            System.out.println(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sal;</span><br><span class="line">    <span class="keyword">private</span> MyDate birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> sal, MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSal</span><span class="params">(<span class="type">int</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sal = sal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyDate <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(MyDate birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sal=&quot;</span> + sal +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDate</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;MyDate&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyDate&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;year=&quot;</span> + year +</span><br><span class="line">                <span class="string">&quot;, month=&quot;</span> + month +</span><br><span class="line">                <span class="string">&quot;, day=&quot;</span> + day +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(MyDate o)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">yearMinus</span> <span class="operator">=</span> year - o.year;</span><br><span class="line">        <span class="keyword">if</span> (yearMinus != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> yearMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">monthMinus</span> <span class="operator">=</span> month - o.month;</span><br><span class="line">        <span class="keyword">if</span> (monthMinus != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> monthMinus;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> day - o.day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="13-2-自定义泛型"><a href="#13-2-自定义泛型" class="headerlink" title="13.2 自定义泛型"></a>13.2 自定义泛型</h2><h3 id="13-2-1泛型类"><a href="#13-2-1泛型类" class="headerlink" title="13.2.1泛型类"></a>13.2.1泛型类</h3><ul><li><h4 id="基本语法：-19"><a href="#基本语法：-19" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;T,R...&gt;&#123;</span><br><span class="line">  成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-55"><a href="#注意事项和细节：-55" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>普通成员可以使用泛型（属性、方法）</p></li><li><p>使用泛型的数组，不能初始化</p></li><li><p>静态方法中不能使用类的泛型</p></li><li><p>泛型类的类型，是在创建对象时确定的（因为创建对象时，需要指定确定类型）</p></li><li><p>如果在创建对象时，没有指定类型，默认为Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGeneric_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//T=Double, R=String, M=Integer</span></span><br><span class="line">        Tiger&lt;Double,String,Integer&gt; g = <span class="keyword">new</span> <span class="title class_">Tiger</span>&lt;&gt;(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">        g.setT(<span class="number">10.9</span>); <span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//g.setT(&quot;yy&quot;); //错误，类型不对</span></span><br><span class="line">        System.out.println(g);</span><br><span class="line">        <span class="type">Tiger</span> <span class="variable">g2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;john~~&quot;</span>);<span class="comment">//OK T=Object R=Object M=Object</span></span><br><span class="line">        g2.setT(<span class="string">&quot;yy&quot;</span>); <span class="comment">//OK ,因为 T=Object &quot;yy&quot;=String 是Object子类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;g2=&quot;</span> + g2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. Tiger 后面泛型，所以我们把 Tiger 就称为自定义泛型类</span></span><br><span class="line"><span class="comment">//2, T, R, M 泛型的标识符, 一般是单个大写字母</span></span><br><span class="line"><span class="comment">//3. 泛型标识符可以有多个.</span></span><br><span class="line"><span class="comment">//4. 普通成员可以使用泛型 (属性、方法)</span></span><br><span class="line"><span class="comment">//5. 使用泛型的数组，不能初始化</span></span><br><span class="line"><span class="comment">//6. 静态方法中不能使用类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T, R, M&gt; &#123;</span><br><span class="line">    String name;</span><br><span class="line">    R r; <span class="comment">//属性使用到泛型</span></span><br><span class="line">    M m;</span><br><span class="line">    T t;</span><br><span class="line">    <span class="comment">//因为数组在new 不能确定T的类型，就无法在内存开空间</span></span><br><span class="line">    T[] ts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name, R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为静态是和类相关的，在类加载时，对象还没有创建</span></span><br><span class="line">    <span class="comment">//所以，如果静态方法和静态属性使用了泛型，JVM就无法完成初始化</span></span><br><span class="line"><span class="comment">//    static R r2;</span></span><br><span class="line"><span class="comment">//    public static void m1(M m) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法使用泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getR</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setR</span><span class="params">(R r)</span> &#123;<span class="comment">//方法使用到泛型</span></span><br><span class="line">        <span class="built_in">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> M <span class="title function_">getM</span><span class="params">()</span> &#123;<span class="comment">//返回类型可以使用泛型.</span></span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM</span><span class="params">(M m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tiger&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, r=&quot;</span> + r +</span><br><span class="line">                <span class="string">&quot;, m=&quot;</span> + m +</span><br><span class="line">                <span class="string">&quot;, t=&quot;</span> + t +</span><br><span class="line">                <span class="string">&quot;, ts=&quot;</span> + Arrays.toString(ts) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="13-2-2泛型接口"><a href="#13-2-2泛型接口" class="headerlink" title="13.2.2泛型接口"></a>13.2.2泛型接口</h3><ul><li><h4 id="基本语法：-20"><a href="#基本语法：-20" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&lt;T,R...&gt;&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-56"><a href="#注意事项和细节：-56" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>静态成员不能使用泛型</p></li><li><p><strong>泛型接口的类型，在继承接口或者实现接口时确定</strong></p></li><li><p>没有指定类型，默认为Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomInterfaceGeneric</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  泛型接口使用的说明</span></span><br><span class="line"><span class="comment"> *  1. 接口中，静态成员也不能使用泛型</span></span><br><span class="line"><span class="comment"> *  2. 泛型接口的类型, 在继承接口或者实现接口时确定</span></span><br><span class="line"><span class="comment"> *  3. 没有指定类型，默认为Object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在继承接口 指定泛型接口的类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> <span class="keyword">extends</span> <span class="title class_">IUsb</span>&lt;String, Double&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当我们去实现IA接口时，因为IA在继承IUsu 接口时，指定了U 为String R为Double</span></span><br><span class="line"><span class="comment">//，在实现IUsu接口的方法时，使用String替换U, 是Double替换R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> <span class="keyword">implements</span> <span class="title class_">IA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">get</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Double aDouble)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Double r1, Double r2, String u1, String u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口时，直接指定泛型接口的类型</span></span><br><span class="line"><span class="comment">//给U 指定Integer 给 R 指定了 Float</span></span><br><span class="line"><span class="comment">//所以，当我们实现IUsb方法时，会使用Integer替换U, 使用Float替换R</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span>&lt;Integer, Float&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">get</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Float aFloat)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Float r1, Float r2, Integer u1, Integer u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有指定类型，默认为Object</span></span><br><span class="line"><span class="comment">//建议直接写成 IUsb&lt;Object,Object&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">implements</span> <span class="title class_">IUsb</span> &#123; <span class="comment">//等价 class CC implements IUsb&lt;Object,Object&gt; &#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Object r1, Object r2, Object u1, Object u2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IUsb</span>&lt;U, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//U name; 不能这样使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法中，可以使用接口泛型</span></span><br><span class="line">    R <span class="title function_">get</span><span class="params">(U u)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R r)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(R r1, R r2, U u1, U u2)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span></span><br><span class="line">    <span class="keyword">default</span> R <span class="title function_">method</span><span class="params">(U u)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="13-2-3泛型方法"><a href="#13-2-3泛型方法" class="headerlink" title="13.2.3泛型方法"></a>13.2.3泛型方法</h3><ul><li><h4 id="基本语法：-21"><a href="#基本语法：-21" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符&lt;T,R...&gt;返回类型 方法名(参数列表)&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-57"><a href="#注意事项和细节：-57" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>泛型方法，可以定义在普通类中，也可以定义在泛型类中</p></li><li><p>当泛型方法被调用时，类型会确定</p></li><li><p>public void eat(E e) {},<br>修饰符后没有&lt;T,R…＞ eat<br>方法不是泛型方法，而是使用了泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomMethodGeneric</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        car.fly(<span class="string">&quot;宝马&quot;</span>, <span class="number">100</span>);<span class="comment">//当调用方法时，传入参数，编译器，就会确定类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        car.fly(<span class="number">300</span>, <span class="number">100.1</span>);<span class="comment">//当调用方法时，传入参数，编译器，就会确定类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//T-&gt;String, R-&gt; ArrayList</span></span><br><span class="line">        Fish&lt;String, ArrayList&gt; fish = <span class="keyword">new</span> <span class="title class_">Fish</span>&lt;&gt;();</span><br><span class="line">        fish.hello(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(), <span class="number">11.3f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型方法，可以定义在普通类中, 也可以定义在泛型类中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;<span class="comment">//普通类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明 泛型方法</span></span><br><span class="line">    <span class="comment">//1. &lt;T,R&gt; 就是泛型</span></span><br><span class="line">    <span class="comment">//2. 是提供给 fly使用的</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">(T t, R r)</span> &#123;<span class="comment">//泛型方法</span></span><br><span class="line">        System.out.println(t.getClass());<span class="comment">//String</span></span><br><span class="line">        System.out.println(r.getClass());<span class="comment">//Integer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>&lt;T, R&gt; &#123;<span class="comment">//泛型类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>&lt;U,M&gt; <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(U u, M m)</span> &#123;<span class="comment">//泛型方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 下面hi方法不是泛型方法</span></span><br><span class="line">    <span class="comment">//2. 是hi方法使用了类声明的 泛型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span></span><br><span class="line">    <span class="keyword">public</span>&lt;K&gt; <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(R r, K k)</span> &#123;</span><br><span class="line">        System.out.println(r.getClass());<span class="comment">//ArrayList</span></span><br><span class="line">        System.out.println(k.getClass());<span class="comment">//Float</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="13-3-泛型继承和通配符"><a href="#13-3-泛型继承和通配符" class="headerlink" title="13.3 泛型继承和通配符"></a>13.3 泛型继承和通配符</h2><ul><li><h4 id="注意事项和细节：-58"><a href="#注意事项和细节：-58" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>泛型不具备继承性</p></li><li><?>：支持任意泛型类型</li><li><? extends A>：支持A类以及A类的子类，规定了泛型的上限</li><li><? super A>：支持A类以及A类的父类，不限于直接父类，规定了泛型的下限<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExtends</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型没有继承性</span></span><br><span class="line">        <span class="comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例说明下面三个方法的使用</span></span><br><span class="line">        List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">        printCollection1(list1);</span><br><span class="line">        printCollection1(list2);</span><br><span class="line">        printCollection1(list3);</span><br><span class="line">        printCollection1(list4);</span><br><span class="line">        printCollection1(list5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line"><span class="comment">//        printCollection2(list1);//×</span></span><br><span class="line"><span class="comment">//        printCollection2(list2);//×</span></span><br><span class="line">        printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">        printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span></span><br><span class="line">        printCollection3(list1);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">        printCollection3(list3);<span class="comment">//√</span></span><br><span class="line">        <span class="comment">//printCollection3(list4);//×</span></span><br><span class="line">        <span class="comment">//printCollection3(list5);//×</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ? extends AA 表示 上限，可以接受 AA或者AA子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是Object</span></span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ? super 子类类名AA:支持AA类以及AA类的父类，不限于直接父类，</span></span><br><span class="line">    <span class="comment">//规定了泛型的下限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">            System.out.println(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="例：-2"><a href="#例：-2" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeWork01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span> &#123;</span><br><span class="line">         DAO&lt;User&gt; dao = <span class="keyword">new</span> <span class="title class_">DAO</span>&lt;User&gt;();</span><br><span class="line">         dao.save(<span class="string">&quot;001&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">         dao.save(<span class="string">&quot;002&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="string">&quot;tom&quot;</span>));</span><br><span class="line">         dao.save(<span class="string">&quot;003&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="number">12</span>,<span class="string">&quot;mike&quot;</span>));</span><br><span class="line">        List&lt;User&gt; list = dao.list();</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        dao.update(<span class="string">&quot;002&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">14</span>,<span class="string">&quot;faker&quot;</span>));</span><br><span class="line">        List&lt;User&gt; list1 = dao.list();</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        dao.delete(<span class="string">&quot;001&quot;</span>);</span><br><span class="line">        List&lt;User&gt; list2 = dao.list();</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DAO</span>&lt;T&gt; &#123;<span class="comment">//泛型类</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, T&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String id,T entity)</span> &#123;</span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回 map 中存放的所有 T 对象</span></span><br><span class="line">    <span class="comment">//遍历map [k-v],将map的 所有value(T entity),封装到ArrayList返回即可</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建 Arraylist</span></span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历map</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//map.get(key) 返回就是 User对象-&gt;ArrayList</span></span><br><span class="line">            list.add(map.get(key));<span class="comment">//也可以直接使用本类的 get(String id)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        map.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String id,T entity)</span> &#123;<span class="comment">//把entity保存到map</span></span><br><span class="line">        map.put(id, entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="14-GUI"><a href="#14-GUI" class="headerlink" title="14  GUI"></a>14  GUI</h1><h2 id="14-1-绘图"><a href="#14-1-绘图" class="headerlink" title="14.1 绘图"></a>14.1 绘图</h2><ul><li><h4 id="绘图原理："><a href="#绘图原理：" class="headerlink" title="绘图原理："></a>绘图原理：</h4><ul><li>Component类提供了两个和绘图相关最重要的方法：<ol><li>paint(Graphics g)绘制组件的外观</li><li>repaint()刷新组件的外观</li></ol></li><li>当组件第一次在屏幕显示的时候,程序会自动的调用paint0方法来绘制组件，在以下情况paintQ将会被调用：<ol><li>窗口最小化,再最大化</li><li>窗口的大小发生变化</li><li>repaint函数被调用</li></ol></li></ul></li><li><h4 id="Graphics类："><a href="#Graphics类：" class="headerlink" title="Graphics类："></a>Graphics类：</h4><ul><li>画直线 drawLine(int x1,int yl,int x2,int y2)</li><li>画矩形边框 drawRect(int x, int y, int width, int height)</li><li>画椭圆边框 drawOval(int x, int y, int width, int height)</li><li>填充矩形fillRect(int x, int y, int width, int height)</li><li>填充椭园 fillOval(int x, int y. int width, int height)</li><li>画图片 drawlmage(Image img, int x, int y, …)</li><li>画字符串 drawString(String str, int x, inty)</li><li>设置画笔的字体 setFont (Font font)</li><li>设置画笔的颜色 setColor(Color c)</li></ul></li></ul><h2 id="14-2-事件控制"><a href="#14-2-事件控制" class="headerlink" title="14.2 事件控制"></a>14.2 事件控制</h2><ul><li><h4 id="基本介绍：-62"><a href="#基本介绍：-62" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>java事件处理是采取“委派事件模型”。当事件发生时,产生事件的对象,会把此”信息”传递给”事件的监听者” 处理，这里所说的”信息”实际上就是 java.awt.event 事件类库里某个类所创建的对象，把它称为”事件的对象“</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-01%2023.33.57.jpg" alt="截屏2022-06-01 23.33.57"></p></li><li><h4 id="深入理解："><a href="#深入理解：" class="headerlink" title="深入理解："></a>深入理解：</h4><ol><li><p>事件源：事件源是一个产生事件的对象，比如按钮，窗口等</p></li><li><p>事件：事件就是承载事件源状态改变时的对象，比如当键盘事件、鼠标事件、窗口事件等等，会生成一个事件对象，该对家保存着当前事件很多信息，比如KeyEvent 对象有含有被按下键的Gode值。java.awt.event包 和javax.swing.event包中定义了各种事<br>件类型</p></li><li><p>事件类型：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-01%2023.39.47.jpg" alt="截屏2022-06-01 23.39.47"></p></li><li><p>事件监听噐号接口：<br>(1)当事件源产生一个事件，可以传送给事件监听者处理Interfaces<br>(2) 事件监听者本质是一个类，该类实现了某个事件监听器接口比如前面我们案例中的MyPanle就是一个类，它实现了<br>KeyListener接口，它就可以作为一个事件监听者，对接受到的事件进行处理<br>(3)事件监听器接口有多种，不同的事件监听器接口可以监听不同的事件 一个类可以实现多个监听接口<br>(4)这些接口在java.awt.event包和javax.swing.event包中定义，列出常用的事件监听器接口，查看jdk 文档聚集了</p></li></ol></li></ul><h1 id="15-线程-基础"><a href="#15-线程-基础" class="headerlink" title="15 线程(基础)"></a>15 线程(基础)</h1><ul><li><h4 id="基本介绍：-63"><a href="#基本介绍：-63" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>线程由进程创建的，是进程的一个实体</li><li>一个进程可以拥有多个线程</li><li>单线程：同一个时刻，只允许执行一个线程</li><li>多线程：同一个时刻，可以执行多个线程</li><li>并发：同一个时刻，多个任务交替执行，造成一种“貌似同时”的错觉</li><li>并行：同一个时刻，多个任务同时执行，多核cpu可以实现并行</li></ul></li></ul><h2 id="16-1-线程使用"><a href="#16-1-线程使用" class="headerlink" title="16.1 线程使用"></a>16.1 线程使用</h2><h3 id="16-1-1-继承Thread"><a href="#16-1-1-继承Thread" class="headerlink" title="16.1.1 继承Thread"></a>16.1.1 继承Thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Cat对象，可以当做线程使用</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//源码</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            (1)</span></span><br><span class="line"><span class="comment">            public synchronized void start() &#123;</span></span><br><span class="line"><span class="comment">                start0();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            (2)</span></span><br><span class="line"><span class="comment">            //start0() 是本地方法，是JVM调用, 底层是c/c++实现</span></span><br><span class="line"><span class="comment">            //真正实现多线程的效果，是start0(), 而不是 run</span></span><br><span class="line"><span class="comment">            private native void start0();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        cat.start();<span class="comment">//启动线程-&gt; 最终会执行cat的run方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//cat.run();//run方法就是一个普通的方法, 没有真正的启动一个线程，就会把run方法执行完毕，才向下执行</span></span><br><span class="line">        <span class="comment">//说明: 当main线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span></span><br><span class="line">        <span class="comment">//这时 主线程和子线程是交替执行..</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程继续执行&quot;</span> + Thread.currentThread().getName());<span class="comment">//名字main</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i=&quot;</span> + i);</span><br><span class="line">            <span class="comment">//让主线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span></span><br><span class="line"><span class="comment">//2. 我们会重写 run方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment">//3. run Thread 类 实现了 Runnable 接口的run方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;<span class="comment">//重写run方法，写上自己的业务逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//该线程每隔1秒。在控制台输出 “喵喵, 我是小猫咪”</span></span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵, 我是小猫咪&quot;</span> + (++times) + <span class="string">&quot; 线程名=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">//让该线程休眠1秒 ctrl+alt+t</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(times == <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//当times 到80, 退出while, 这时线程也就退出..</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="16-1-2-实现Runnable"><a href="#16-1-2-实现Runnable" class="headerlink" title="16.1.2 实现Runnable"></a>16.1.2 实现Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 这里不能调用start</span></span><br><span class="line">        <span class="comment">//创建了Thread对象，把 dog对象(实现Runnable),放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Tiger tiger = new Tiger();//实现了 Runnable</span></span><br><span class="line"><span class="comment">//        ThreadProxy threadProxy = new ThreadProxy(tiger);</span></span><br><span class="line"><span class="comment">//        threadProxy.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类 , 模拟了一个极简的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy类当做 ThreadProxy</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是 Runnable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//通过实现Runnable接口，开发线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="对比：-2"><a href="#对比：-2" class="headerlink" title="对比："></a>对比：</h4><ol><li>java的设计来看，通过继承Thread或者实现Runnable接口来创建线程本质上没有区别,从jidk帮助文档我们可以看到Thread类本身就实现了Runnable接口</li><li>实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</li></ol></li><li><h4 id="线程退出："><a href="#线程退出：" class="headerlink" title="线程退出："></a>线程退出：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果希望main线程去控制t1 线程的终止, 必须可以修改 loop</span></span><br><span class="line">        <span class="comment">//让t1 退出run方法，从而终止 t1线程 -&gt; 通知方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//让主线程休眠 10 秒，再通知 t1线程退出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main线程休眠10s...&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">        t1.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//设置一个控制变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);<span class="comment">// 让当前线程休眠50ms</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T 运行中....&quot;</span> + (++count));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="代理模式模拟："><a href="#代理模式模拟：" class="headerlink" title="代理模式模拟："></a>代理模式模拟：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//dog.start(); 这里不能调用start</span></span><br><span class="line">        <span class="comment">//创建了Thread对象，把 dog对象(实现Runnable),放入Thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(dog);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Tiger tiger = new Tiger();//实现了 Runnable</span></span><br><span class="line"><span class="comment">//        ThreadProxy threadProxy = new ThreadProxy(tiger);</span></span><br><span class="line"><span class="comment">//        threadProxy.start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老虎嗷嗷叫....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程代理类 , 模拟了一个极简的Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadProxy</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//你可以把Proxy类当做 ThreadProxy</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//属性，类型是 Runnable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">            target.run();<span class="comment">//动态绑定（运行类型Tiger）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadProxy</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        start0();<span class="comment">//这个方法时真正实现多线程方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span> &#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//通过实现Runnable接口，开发线程</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪叫..hi&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-2-线程方法"><a href="#16-2-线程方法" class="headerlink" title="16.2 线程方法"></a>16.2 线程方法</h2><ul><li><h4 id="常用方法1："><a href="#常用方法1：" class="headerlink" title="常用方法1："></a>常用方法1：</h4><ul><li><p>setName：设置线程名称，使之与参数 name 相同</p></li><li><p>getName：返回该线程的名称</p></li><li><p>start：使该线程开始执行;Java 虚拟机底层调用该线程的 start0方法</p></li><li><p>run ：调用线程对象 run 方法</p></li><li><p>setPriority：更改线程的优先级</p></li><li><p>getPriority：获取线程的优先级</p></li><li><p>sleep：在指定的毫秒数内让当前正在执行的线程休眠（暂停执行)</p></li><li><p>interrupt：中断线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//测试相关的方法</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;老韩&quot;</span>);</span><br><span class="line">        t.setPriority(Thread.MIN_PRIORITY);<span class="comment">//1</span></span><br><span class="line">        t.start();<span class="comment">//启动子线程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程打印5 hi ,然后我就中断 子线程的休眠</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;hi &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 线程的优先级 =&quot;</span> + t.getPriority());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        t.interrupt();<span class="comment">//当执行到这里，就会中断 t线程的休眠.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; <span class="comment">//自定义的线程类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//Thread.currentThread().getName() 获取当前线程的名称</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  吃包子~~~~&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 休眠中~~~&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">20000</span>);<span class="comment">//20秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">//当该线程执行到一个interrupt 方法时，就会catch 一个 异常, 可以加入自己的业务代码</span></span><br><span class="line">                <span class="comment">//InterruptedException 是捕获到一个中断异常.</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;被 interrupt了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="注意事项和细节：-59"><a href="#注意事项和细节：-59" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>start：底层会创建新的线程，调用run，run 就是一个简单的方法调用，不会启动新线程</li><li>interrupt：中断线程，但并没有真正的结束线程，所以一般用于中断正在休眠线程</li><li>sleep：线程的静态方法，使当前线程休眠</li></ol></li><li><h4 id="常用方法2"><a href="#常用方法2" class="headerlink" title="常用方法2:"></a>常用方法2:</h4><ul><li><p>yield：线程的礼让。让出Cpu，让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</p></li><li><p>join：线程的插队。插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">T2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">T2</span>();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程(小弟) 吃了 &quot;</span> + i  + <span class="string">&quot; 包子&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程(小弟) 让 子线程(老大) 先吃&quot;</span>);</span><br><span class="line">                <span class="comment">//join, 线程插队</span></span><br><span class="line">                <span class="comment">//t2.join();// 这里相当于让t2 线程先执行完毕</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>();<span class="comment">//礼让，不一定成功..</span></span><br><span class="line">                System.out.println(<span class="string">&quot;线程(老大) 吃完了 主线程(小弟) 接着吃..&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程(老大) 吃了 &quot;</span> + i +  <span class="string">&quot; 包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="用户线程和守护线程："><a href="#用户线程和守护线程：" class="headerlink" title="用户线程和守护线程："></a>用户线程和守护线程：</h4><ul><li><p>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</p></li><li><p>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</p><p>setDaemon(True)</p></li><li><p>常见的守护线程：垃圾回收机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMethod03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyDaemonThread</span> <span class="variable">myDaemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDaemonThread</span>();</span><br><span class="line">        <span class="comment">//如果我们希望当main线程结束后，子线程自动结束</span></span><br><span class="line">        <span class="comment">//只需将子线程设为守护线程即可</span></span><br><span class="line">        myDaemonThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        myDaemonThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;<span class="comment">//main线程</span></span><br><span class="line">            System.out.println(<span class="string">&quot;辛苦的工作...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDaemonThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;<span class="comment">//无限循环</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);<span class="comment">//休眠1000毫秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;快乐聊天，哈哈哈~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="16-3-线程生命周期"><a href="#16-3-线程生命周期" class="headerlink" title="16.3 线程生命周期"></a>16.3 线程生命周期</h2><ul><li><h4 id="周期图："><a href="#周期图：" class="headerlink" title="周期图："></a>周期图：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-03%2015.58.12.jpg" alt="截屏2022-06-03 15.58.12"></li></ul><h2 id="16-4-Synchronized⭐️"><a href="#16-4-Synchronized⭐️" class="headerlink" title="16.4  Synchronized⭐️"></a>16.4  Synchronized⭐️</h2><ul><li><h4 id="线程同步机制："><a href="#线程同步机制：" class="headerlink" title="线程同步机制："></a>线程同步机制：</h4><p>线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作</p></li><li><h4 id="基本语法：-22"><a href="#基本语法：-22" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(对象) &#123; <span class="comment">// 得到对象的锁，才能操作同步代码</span></span><br><span class="line">  需要被同步代码；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(String name)</span>&#123;</span><br><span class="line">  需要被同步代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="例：-3"><a href="#例：-3" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SellTicket03</span> <span class="variable">sellTicket03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket03</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第1个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第2个线程-窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(sellTicket03).start();<span class="comment">//第3个线程-窗口</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口方式, 使用synchronized实现线程同步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicket03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//让多个线程共享 ticketNum</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;<span class="comment">//控制run方法变量</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//同步方法（静态的）的锁为当前类本身</span></span><br><span class="line">    <span class="comment">//老韩解读</span></span><br><span class="line">    <span class="comment">//1. public synchronized static void m1() &#123;&#125; 锁是加在 SellTicket03.class</span></span><br><span class="line">    <span class="comment">//2. 如果在静态方法中，实现一个同步代码块.</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        synchronized (SellTicket03.class) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;m2&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SellTicket03.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老韩说明</span></span><br><span class="line">    <span class="comment">//1. public synchronized void sell() &#123;&#125; 就是一个同步方法</span></span><br><span class="line">    <span class="comment">//2. 这时锁在 this对象</span></span><br><span class="line">    <span class="comment">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在this对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123; <span class="comment">//同步方法, 在同一时刻， 只能有一个线程来执行sell方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;售票结束...&quot;</span>);</span><br><span class="line">                loop = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休眠50毫秒, 模拟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口 &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span></span><br><span class="line">                    + <span class="string">&quot; 剩余票数=&quot;</span> + (--ticketNum));<span class="comment">//1 - 0 - -1  - -2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line"></span><br><span class="line">            sell();<span class="comment">//sell方法是一共同步方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-5-互斥锁⭐️"><a href="#16-5-互斥锁⭐️" class="headerlink" title="16.5 互斥锁⭐️"></a>16.5 互斥锁⭐️</h2><ul><li><h4 id="基本介绍：-64"><a href="#基本介绍：-64" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性</li><li>每个对象都对应于一个可称为“互斥锁〞 的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象</li><li>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时表明该对象在任一时刻只能由一个线程访问</li><li>同步的局限性：导致程序的执行效率要降低</li><li>同步方法（非静态的）的锁可以是this，也可以是其他对象（要求是同一个对象）</li><li>同步方法（静态的）的锁为当前类本身</li></ul></li><li><h4 id="注意事项和细节：-60"><a href="#注意事项和细节：-60" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li><p>同步方法如果没有使用static修饰：默认锁对象为this</p></li><li><p>如果方法使用static修饰，默认锁对象：当前类.class</p></li><li><p>实现的落地步骤：</p><ol><li><p>需要先分析上锁的代码</p></li><li><p>选择同步代码块或同步方法</p></li><li><p>要求多个线程的锁对象为同一个即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟死锁现象</span></span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">        A.setName(<span class="string">&quot;A线程&quot;</span>);</span><br><span class="line">        <span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">        B.setName(<span class="string">&quot;B线程&quot;</span>);</span><br><span class="line">        A.start();</span><br><span class="line">        B.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面业务逻辑的分析</span></span><br><span class="line">        <span class="comment">//1. 如果flag 为 T, 线程A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line">        <span class="comment">//2. 如果线程A 得不到 o2 对象锁，就会Blocked</span></span><br><span class="line">        <span class="comment">//3. 如果flag 为 F, 线程B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line">        <span class="comment">//4. 如果线程B 得不到 o1 对象锁，就会Blocked</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入3&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得li对象的监视权</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入4&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><h2 id="16-6-死锁"><a href="#16-6-死锁" class="headerlink" title="16.6 死锁"></a>16.6 死锁</h2><ul><li><h4 id="基本介绍：-65"><a href="#基本介绍：-65" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁，在编程是一定要避免死锁的发生</p></li><li><h4 id="释放锁："><a href="#释放锁：" class="headerlink" title="释放锁："></a>释放锁：</h4><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块、同步方法中遇到break、return</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait0方法，当前线程暂停，井释放锁</li></ul></li><li><h4 id="不释放锁："><a href="#不释放锁：" class="headerlink" title="不释放锁："></a>不释放锁：</h4><ul><li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的suspendO方法将该线程挂起</li></ul></li></ul><h1 id="16-IO流"><a href="#16-IO流" class="headerlink" title="16  IO流"></a>16  IO流</h1><h2 id="16-0-文件"><a href="#16-0-文件" class="headerlink" title="16.0 文件"></a>16.0 文件</h2><ul><li><h4 id="基本介绍：-66"><a href="#基本介绍：-66" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>文件是保存数据的地方</p></li><li><h4 id="文件流："><a href="#文件流：" class="headerlink" title="文件流："></a>文件流：</h4><p>输入流：数据从数据源(文件)到程序(内存)的路径</p><p>输出流：数据从程序(内存)到数据源(文件)的路径</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-06%2016.06.15.jpg" alt="截屏2022-06-06 16.06.15"></p></li><li><h4 id="创建文件："><a href="#创建文件：" class="headerlink" title="创建文件："></a>创建文件：</h4><ul><li><p>new File(String pathname) &#x2F;&#x2F;根据文件路径构建</p></li><li><p>new File(File parent,String child) &#x2F;&#x2F;根据父目录文件+子路径构建</p></li><li><p>new File(String parent,String child) &#x2F;&#x2F;根据父目录+子路径构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCreate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1 new File(String pathname)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/henghengzhu/Downloads/代码/news1.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式2 new File(File parent,String child) //根据父目录文件+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/henghengzhu/Downloads/代码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//这里的file对象，在java程序中，只是一个对象</span></span><br><span class="line">        <span class="comment">//只有执行了createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3 new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//String parentPath = &quot;e:\\&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/henghengzhu/Downloads/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news3.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="常用方法：-15"><a href="#常用方法：-15" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>file.getName()</p></li><li><p>file.getAbsolutePath()</p></li><li><p>file.getParent()</p></li><li><p>file.exists()</p></li><li><p>file.isFile()</p></li><li><p>file.isFile()</p></li><li><p>isDirectory()</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先创建文件对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\news1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用相应的方法，得到对应信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名字=&quot;</span> + file.getName());</span><br><span class="line">        <span class="comment">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件绝对路径=&quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件父级目录=&quot;</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小(字节)=&quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件是否存在=&quot;</span> + file.exists());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个文件=&quot;</span> + file.isFile());<span class="comment">//T</span></span><br><span class="line">        System.out.println(<span class="string">&quot;是不是一个目录=&quot;</span> + file.isDirectory());<span class="comment">//F</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-1-IO流原理及分类"><a href="#16-1-IO流原理及分类" class="headerlink" title="16.1  IO流原理及分类"></a>16.1  IO流原理及分类</h2><ul><li><h4 id="基本介绍：-67"><a href="#基本介绍：-67" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>I&#x2F;O是Input&#x2F;Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理数据传输</p></li><li><p>Java程序中，对于数据的输入&#x2F;输出操作以”流(stream)”的方式进行</p></li><li><p>java.io包下提供了各种”流”类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</p></li><li><p>输入input：读取外部数据（磁盛、光盘等存储设备的数据）到程序（内存）中</p></li><li><p>输出output：将程序（内存）数据输出到磁盘、光盘等存储设备中</p></li></ul></li><li><h4 id="流的分类："><a href="#流的分类：" class="headerlink" title="流的分类："></a>流的分类：</h4><ul><li><p>按操作数据单位不同分为：字节流(8 bit)，字符流(按字符）</p></li><li><p>按数据流的流向不同分为：输入流，输出流</p></li><li><p>按流的角色的不同分为：节点流，处理流&#x2F;包装流</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-07%2019.14.25.jpg" alt="截屏2022-06-07 19.14.25"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-07%2019.26.09.jpg" alt="截屏2022-06-07 19.26.09"></p></li></ul></li></ul><h2 id="16-2-节点流和处理流"><a href="#16-2-节点流和处理流" class="headerlink" title="16.2 节点流和处理流"></a>16.2 节点流和处理流</h2><ul><li><h4 id="基本介绍：-68"><a href="#基本介绍：-68" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>节点流可以从一个特定的数据源读写数据，如FileReader、FileWriter</p></li><li><p>处理流(也叫包装流)是 “连接〞在已存在的流（节点流或处理流）之上，为程序提供更为强大的读写功能，如BufferedReader、BufferedWriter</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-12%2019.34.04.jpg" alt="截屏2022-06-12 19.34.04"></p></li></ul></li><li><h4 id="区别和联系："><a href="#区别和联系：" class="headerlink" title="区别和联系："></a>区别和联系：</h4><ol><li>节点流是底层流&#x2F;低级流,直接跟数据源相接</li><li>处理流包装节点流，既可以消除不同节点流的实现差异，也可以提供重方便的方法来完成输入输出</li><li>处理流(也叫包装流)对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连</li></ol></li><li><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>性能的提高：主要以增加缓冲的方式来提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据，使用重加灵活方便</li></ul></li><li><h4 id="模拟："><a href="#模拟：" class="headerlink" title="模拟："></a>模拟：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">FileReader_</span>());</span><br><span class="line">        bufferedReader_.readFiles(<span class="number">10</span>);</span><br><span class="line">        <span class="type">BufferedReader_</span> <span class="variable">bufferedReader_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader_</span>(<span class="keyword">new</span> <span class="title class_">StringReader_</span>());</span><br><span class="line">        bufferedReader_2.readString(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Reader_</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在Reader_ 抽象类，使用read方法统一管理.</span></span><br><span class="line">    <span class="comment">//后面在调用时，利于对象动态绑定机制， 绑定到对应的实现子类即可.</span></span><br><span class="line">    <span class="comment">//public abstract void read();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取字符串&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> <span class="keyword">extends</span> <span class="title class_">Reader_</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Reader_ reader_; <span class="comment">//属性是 Reader_类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收Reader_ 子类对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedReader_</span><span class="params">(Reader_ reader_)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader_ = reader_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span> &#123; <span class="comment">//封装一层</span></span><br><span class="line">        reader_.readFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让方法更加灵活， 多次读取文件, 或者加缓冲byte[] ....</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFiles</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            reader_.readFile();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展 readString, 批量处理字符串数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readStrings</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;num; i++) &#123;</span><br><span class="line">            reader_.readString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-3-输入流⭐️"><a href="#16-3-输入流⭐️" class="headerlink" title="16.3 输入流⭐️"></a>16.3 输入流⭐️</h2><ul><li><h4 id="基本介绍：-69"><a href="#基本介绍：-69" class="headerlink" title="基本介绍："></a>基本介绍：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-12%2019.16.25.jpg" alt="截屏2022-06-12 19.16.25"></h4></li></ul><h3 id="16-3-1-InputStream"><a href="#16-3-1-InputStream" class="headerlink" title="16.3.1  InputStream"></a>16.3.1  InputStream</h3><h4 id="16-3-1-1-FileInputStream"><a href="#16-3-1-1-FileInputStream" class="headerlink" title="16.3.1.1  FileInputStream"></a>16.3.1.1  FileInputStream</h4><ul><li><h4 id="常用方法：-16"><a href="#常用方法：-16" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2838.jpg" alt="IMG_2838"></p></li><li><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示读取文件...</span></span><br><span class="line"><span class="comment">     * 单个字节的读取，效率比较低</span></span><br><span class="line"><span class="comment">     * -&gt; 使用 read(byte[] b)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readData = fileInputStream.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)readData);<span class="comment">//转成char显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 read(byte[] b) 读取文件，提高效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>]; <span class="comment">//一次读取8个字节.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建 FileInputStream 对象，用于读取 文件</span></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">            <span class="comment">//从该输入流读取最多b.length字节的数据到字节数组。 此方法将阻塞，直到某些输入可用。</span></span><br><span class="line">            <span class="comment">//如果返回-1 , 表示读取完毕</span></span><br><span class="line">            <span class="comment">//如果读取正常, 返回实际读取的字节数</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));<span class="comment">//显示</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭文件流，释放资源.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-3-1-2-BufferedInputStream"><a href="#16-3-1-2-BufferedInputStream" class="headerlink" title="16.3.1.2  BufferedInputStream"></a>16.3.1.2  BufferedInputStream</h4><ul><li><h4 id="基本介绍：-70"><a href="#基本介绍：-70" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Bufferedlnputstream是字节流在创建 Bufferedlnputstream时，会创建一个内部缓沖区数组</p></li><li><h4 id="常用方法：-17"><a href="#常用方法：-17" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2858.jpg" alt="IMG_2858"></p></li><li><h4 id="例：-4"><a href="#例：-4" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\Koala.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.avi&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a3.java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象BufferedInputStream对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//因为 FileInputStream  是 InputStream 子类</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取文件，并写入到 destFilePath</span></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件拷贝完毕~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-3-1-3-ObjectInputStream"><a href="#16-3-1-3-ObjectInputStream" class="headerlink" title="16.3.1.3  ObjectInputStream"></a>16.3.1.3  ObjectInputStream</h4><ul><li><h4 id="基本介绍：-71"><a href="#基本介绍：-71" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>Objectlnputstream 提供反序列化功能</li><li>反序列化就是在恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：Serializable和Externalizable</li></ul></li><li><h4 id="例：-5"><a href="#例：-5" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定反序列化的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解读</span></span><br><span class="line">        <span class="comment">//1. 读取(反序列化)的顺序需要和你保存数据(序列化)的顺序一致</span></span><br><span class="line">        <span class="comment">//2. 否则会出现异常</span></span><br><span class="line"></span><br><span class="line">        System.out.println(ois.readInt());</span><br><span class="line">        System.out.println(ois.readBoolean());</span><br><span class="line"></span><br><span class="line">        System.out.println(ois.readChar());</span><br><span class="line">        System.out.println(ois.readDouble());</span><br><span class="line">        System.out.println(ois.readUTF());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//dog 的编译类型是 Object , dog 的运行类型是 Dog</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">dog</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行类型=&quot;</span> + dog.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;dog信息=&quot;</span> + dog);<span class="comment">//底层 Object -&gt; Dog</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里是特别重要的细节:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 如果我们希望调用Dog的方法, 需要向下转型</span></span><br><span class="line">        <span class="comment">//2. 需要我们将Dog类的定义，放在到可以引用的位置</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> (Dog)dog;</span><br><span class="line">        System.out.println(dog2.getName()); <span class="comment">//旺财..</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流, 关闭外层流即可，底层会关闭 FileInputStream 流</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="16-3-2-Reader"><a href="#16-3-2-Reader" class="headerlink" title="16.3.2  Reader"></a>16.3.2  Reader</h3><h4 id="16-3-2-1-FileReader"><a href="#16-3-2-1-FileReader" class="headerlink" title="16.3.2.1  FileReader"></a>16.3.2.1  FileReader</h4><ul><li><h4 id="常用方法：-18"><a href="#常用方法：-18" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>read：每次读取单个字符，返回该字符，如果到文件末尾返回-1</li><li>read(char)：批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回-1</li></ul></li><li><h4 id="方法使用："><a href="#方法使用：" class="headerlink" title="方法使用："></a>方法使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单个字符读取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. 创建FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取 使用read, 单个字符读取</span></span><br><span class="line">            <span class="keyword">while</span> ((data = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字符数组读取文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile02</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~readFile02 ~~~&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\story.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//1. 创建FileReader对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath);</span><br><span class="line">            <span class="comment">//循环读取 使用read(buf), 返回的是实际读取到的字符数</span></span><br><span class="line">            <span class="comment">//如果返回-1, 说明到文件结束</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileReader.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="number">0</span>, readLen));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-3-2-2-BufferedReader"><a href="#16-3-2-2-BufferedReader" class="headerlink" title="16.3.2.2  BufferedReader"></a>16.3.2.2  BufferedReader</h4><ul><li><h4 id="例：-6"><a href="#例：-6" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="comment">//创建bufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filePath));</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        String line; <span class="comment">//按行读取, 效率高</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. bufferedReader.readLine() 是按行读取文件</span></span><br><span class="line">        <span class="comment">//2. 当返回null 时，表示文件读取完毕</span></span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭流, 这里注意，只需要关闭 BufferedReader ，因为底层会自动的去关闭 节点流</span></span><br><span class="line">        <span class="comment">//FileReader。</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public void close() throws IOException &#123;</span></span><br><span class="line"><span class="comment">                synchronized (lock) &#123;</span></span><br><span class="line"><span class="comment">                    if (in == null)</span></span><br><span class="line"><span class="comment">                        return;</span></span><br><span class="line"><span class="comment">                    try &#123;</span></span><br><span class="line"><span class="comment">                        in.close();//in 就是我们传入的 new FileReader(filePath), 关闭了.</span></span><br><span class="line"><span class="comment">                    &#125; finally &#123;</span></span><br><span class="line"><span class="comment">                        in = null;</span></span><br><span class="line"><span class="comment">                        cb = null;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-3-2-3-InputStreamReader"><a href="#16-3-2-3-InputStreamReader" class="headerlink" title="16.3.2.3  InputStreamReader"></a>16.3.2.3  InputStreamReader</h4><ul><li><h4 id="基本介绍：-72"><a href="#基本介绍：-72" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>InputStreamReader：Reader的子类，可以将lnputStream(字节流)包装成Reader(字符流）</p></li><li><p>当处理纯文本数据时，如果使用宇符流效率重高，井且可以有效解決中文问题，所以建议字节流转换成字符流</p></li></ul></li><li><h4 id="例：-7"><a href="#例：-7" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//解读</span></span><br><span class="line">        <span class="comment">//1. 把 FileInputStream 转成 InputStreamReader</span></span><br><span class="line">        <span class="comment">//2. 指定编码 gbk</span></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span></span><br><span class="line">        <span class="comment">//3. 把 InputStreamReader 传入 BufferedReader</span></span><br><span class="line">        <span class="comment">//BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将2 和 3 合在一起</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                                                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath), <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 读取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取内容=&quot;</span> + s);</span><br><span class="line">        <span class="comment">//5. 关闭外层流</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-4-输出流⭐️"><a href="#16-4-输出流⭐️" class="headerlink" title="16.4 输出流⭐️"></a>16.4 输出流⭐️</h2><ul><li><h4 id="基本介绍：-73"><a href="#基本介绍：-73" class="headerlink" title="基本介绍："></a>基本介绍：</h4><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-14%2010.49.52.jpg" alt="截屏2022-06-14 10.49.52"></li></ul><h3 id="16-4-1-OutputStream"><a href="#16-4-1-OutputStream" class="headerlink" title="16.4.1  OutputStream"></a>16.4.1  OutputStream</h3><h4 id="16-4-1-1-FileOutputStream"><a href="#16-4-1-1-FileOutputStream" class="headerlink" title="16.4.1.1  FileOutputStream"></a>16.4.1.1  FileOutputStream</h4><ul><li><h4 id="常用方法：-19"><a href="#常用方法：-19" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2848.jpg" alt="IMG_2848"></p></li><li><h4 id="使用方法：-1"><a href="#使用方法：-1" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStream01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示使用FileOutputStream 将数据写到文件中,</span></span><br><span class="line"><span class="comment">     * 如果该文件不存在，则创建该文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建 FileOutputStream对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//得到 FileOutputStream对象</span></span><br><span class="line">            <span class="comment">//说明</span></span><br><span class="line">            <span class="comment">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span></span><br><span class="line">            <span class="comment">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span></span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//写入一个字节</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(&#x27;H&#x27;);//</span></span><br><span class="line">            <span class="comment">//写入字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hsp,world!&quot;</span>;</span><br><span class="line">            <span class="comment">//str.getBytes() 可以把 字符串-&gt; 字节数组</span></span><br><span class="line">            <span class="comment">//fileOutputStream.write(str.getBytes());</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            write(byte[] b, int off, int len) 将 len字节从位于偏移量 off的指定字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            fileOutputStream.write(str.getBytes(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-4-1-2-BufferedOutputStream"><a href="#16-4-1-2-BufferedOutputStream" class="headerlink" title="16.4.1.2  BufferedOutputStream"></a>16.4.1.2  BufferedOutputStream</h4><ul><li><h4 id="基本介绍：-74"><a href="#基本介绍：-74" class="headerlink" title="基本介绍："></a>基本介绍：</h4></li></ul><p>BufferedOutputstream是字节流，实现缓冲的输出流，可以将多个字节写入底层输出流中，而不必对每次字节写入调用底层<br>系统</p><ul><li><h4 id="常用方法：-20"><a href="#常用方法：-20" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2859.jpg" alt="IMG_2859"></p></li><li><h4 id="例：-8"><a href="#例：-8" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\Koala.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.jpg&quot;;</span></span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\hsp.avi&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a3.java&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建BufferedOutputStream对象BufferedInputStream对象</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//因为 FileInputStream  是 InputStream 子类</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath));</span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环的读取文件，并写入到 destFilePath</span></span><br><span class="line">            <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//当返回 -1 时，就表示文件读取完毕</span></span><br><span class="line">            <span class="keyword">while</span> ((readLen = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buff, <span class="number">0</span>, readLen);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;文件拷贝完毕~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-4-1-3-ObjectOutputStream"><a href="#16-4-1-3-ObjectOutputStream" class="headerlink" title="16.4.1.3  ObjectOutputStream"></a>16.4.1.3  ObjectOutputStream</h4><ul><li><h4 id="基本介绍：-75"><a href="#基本介绍：-75" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>Objectoutputstream 提供序列化功能</p></li><li><p>序列化就是在保存数据时，保存数据的值和数据类型</p></li><li><p>列化就是在恢复数据时，恢复数据的值和数据类型</p></li><li><p>需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：Serializable和Externalizable</p></li></ul></li><li><h4 id="例：-9"><a href="#例：-9" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectOutStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\data.dat&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化数据到 e:\data.dat</span></span><br><span class="line">        oos.writeInt(<span class="number">100</span>);<span class="comment">// int -&gt; Integer (实现了 Serializable)</span></span><br><span class="line">        oos.writeBoolean(<span class="literal">true</span>);<span class="comment">// boolean -&gt; Boolean (实现了 Serializable)</span></span><br><span class="line">        oos.writeChar(<span class="string">&#x27;a&#x27;</span>);<span class="comment">// char -&gt; Character (实现了 Serializable)</span></span><br><span class="line">        oos.writeDouble(<span class="number">9.5</span>);<span class="comment">// double -&gt; Double (实现了 Serializable)</span></span><br><span class="line">        oos.writeUTF(<span class="string">&quot;韩顺平教育&quot;</span>);<span class="comment">//String</span></span><br><span class="line">        <span class="comment">//保存一个dog对象</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>, <span class="number">10</span>, <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;白色&quot;</span>));</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据保存完毕(序列化形式)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-61"><a href="#注意事项和细节：-61" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>读写顺序要一致</li><li>要求实现序列化或反序列化对象，需要实现 Serializable</li><li>序列化的类中建议添加SerialVersionUID，为了提高版本兼容性</li><li>序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口</li><li>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也己经默认实现了序列化</li></ol></li></ul><h4 id="16-4-1-4-PrintStream"><a href="#16-4-1-4-PrintStream" class="headerlink" title="16.4.1.4  PrintStream"></a>16.4.1.4  PrintStream</h4><ul><li><h4 id="例：-10"><a href="#例：-10" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">out</span> <span class="operator">=</span> System.out;</span><br><span class="line">        <span class="comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             public void print(String s) &#123;</span></span><br><span class="line"><span class="comment">                if (s == null) &#123;</span></span><br><span class="line"><span class="comment">                    s = &quot;null&quot;;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                write(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        out.print(<span class="string">&quot;john, hello&quot;</span>);</span><br><span class="line">        <span class="comment">//因为print底层使用的是write , 所以我们可以直接调用write进行打印/输出</span></span><br><span class="line">        out.write(<span class="string">&quot;韩顺平,你好&quot;</span>.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们可以去修改打印流输出的位置/设备</span></span><br><span class="line">        <span class="comment">//1. 输出修改成到 &quot;e:\\f1.txt&quot;</span></span><br><span class="line">        <span class="comment">//2. &quot;hello, 韩顺平教育~&quot; 就会输出到 e:\f1.txt</span></span><br><span class="line">        <span class="comment">//3. public static void setOut(PrintStream out) &#123;</span></span><br><span class="line">        <span class="comment">//        checkIO();</span></span><br><span class="line">        <span class="comment">//        setOut0(out); // native 方法，修改了out</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        System.setOut(<span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;e:\\f1.txt&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, 韩顺平教育~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="16-4-2-Writer"><a href="#16-4-2-Writer" class="headerlink" title="16.4.2  Writer"></a>16.4.2  Writer</h3><h4 id="16-4-2-1-FileWriter"><a href="#16-4-2-1-FileWriter" class="headerlink" title="16.4.2.1  FileWriter"></a>16.4.2.1  FileWriter</h4><ul><li><h4 id="常用方法：-21"><a href="#常用方法：-21" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>new File Writer (File&#x2F;String)：覆盖模式，相当于流的指针在首端</li><li>new FileWriter (File&#x2F;String.true)：追加模式，相当于流的指针在尾端</li><li>write(int)：写入单个字符</li><li>write(char[])：写入指定数组</li><li>write(char[],off len)：写入指定数组的指定部分</li><li>write (string)：写入整个字符律</li><li>write(string,off,len)：写入字符串的指定部分</li></ul></li><li><h4 id="方法使用：-1"><a href="#方法使用：-1" class="headerlink" title="方法使用："></a>方法使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\note.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fileWriter = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath);<span class="comment">//默认是覆盖写入</span></span><br><span class="line"><span class="comment">//            3) write(int):写入单个字符</span></span><br><span class="line">            fileWriter.write(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line"><span class="comment">//            4) write(char[]):写入指定数组</span></span><br><span class="line">            fileWriter.write(chars);</span><br><span class="line"><span class="comment">//            5) write(char[],off,len):写入指定数组的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;韩顺平教育&quot;</span>.toCharArray(), <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//            6) write（string）：写入整个字符串</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot; 你好北京~&quot;</span>);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;风雨之后，定见彩虹&quot;</span>);</span><br><span class="line"><span class="comment">//            7) write(string,off,len):写入字符串的指定部分</span></span><br><span class="line">            fileWriter.write(<span class="string">&quot;上海天津&quot;</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//在数据量大的情况下，可以使用循环操作.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</span></span><br><span class="line">            <span class="comment">//老韩看源码就知道原因.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                看看代码</span></span><br><span class="line"><span class="comment">                private void writeBytes() throws IOException &#123;</span></span><br><span class="line"><span class="comment">        this.bb.flip();</span></span><br><span class="line"><span class="comment">        int var1 = this.bb.limit();</span></span><br><span class="line"><span class="comment">        int var2 = this.bb.position();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        assert var2 &lt;= var1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        int var3 = var2 &lt;= var1 ? var1 - var2 : 0;</span></span><br><span class="line"><span class="comment">        if (var3 &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">            if (this.ch != null) &#123;</span></span><br><span class="line"><span class="comment">                assert this.ch.write(this.bb) == var3 : var3;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                this.out.write(this.bb.array(), this.bb.arrayOffset() + var2, var3);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        this.bb.clear();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//fileWriter.flush();</span></span><br><span class="line">                <span class="comment">//关闭文件流，等价 flush() + 关闭</span></span><br><span class="line">                fileWriter.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="文件拷贝："><a href="#文件拷贝：" class="headerlink" title="文件拷贝："></a>文件拷贝：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileCopy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//完成 文件拷贝，将 e:\\Koala.jpg 拷贝 c:\\</span></span><br><span class="line">        <span class="comment">//思路分析</span></span><br><span class="line">        <span class="comment">//1. 创建文件的输入流 , 将文件读入到程序</span></span><br><span class="line">        <span class="comment">//2. 创建文件的输出流， 将读取到的文件数据，写入到指定的文件.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala.jpg&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\Koala3.jpg&quot;</span>;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            fileInputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFilePath);</span><br><span class="line">            fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath);</span><br><span class="line">            <span class="comment">//定义一个字节数组,提高读取效果</span></span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">readLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((readLen = fileInputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//读取到后，就写入到文件 通过 fileOutputStream</span></span><br><span class="line">                <span class="comment">//即，是一边读，一边写</span></span><br><span class="line">                fileOutputStream.write(buf, <span class="number">0</span>, readLen);<span class="comment">//一定要使用这个方法</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝ok~&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//关闭输入流和输出流，释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (fileInputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileInputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><strong>FileWriter使用后，必须要关闭(close)或刷新(flush），否则写入不到指定的文件</strong></li></ul></li></ul><h4 id="16-4-2-2-BufferedWriter"><a href="#16-4-2-2-BufferedWriter" class="headerlink" title="16.4.2.2  BufferedWriter"></a>16.4.2.2  BufferedWriter</h4><ul><li><h4 id="例：-11"><a href="#例：-11" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\ok.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//创建BufferedWriter</span></span><br><span class="line">        <span class="comment">//说明:</span></span><br><span class="line">        <span class="comment">//1. new FileWriter(filePath, true) 表示以追加的方式写入</span></span><br><span class="line">        <span class="comment">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(filePath));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个和系统相关的换行</span></span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello2, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello3, 韩顺平教育!&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明：关闭外层流即可 ， 传入的 new FileWriter(filePath) ,会在底层关闭</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="文件拷贝：-1"><a href="#文件拷贝：-1" class="headerlink" title="文件拷贝："></a>文件拷贝：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedCopy_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. BufferedReader 和 BufferedWriter 是安装字符操作</span></span><br><span class="line">        <span class="comment">//2. 不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</span></span><br><span class="line">        <span class="comment">//BufferedInputStream</span></span><br><span class="line">        <span class="comment">//BufferedOutputStream</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a.java&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\a2.java&quot;</span>;</span><br><span class="line"><span class="comment">//        String srcFilePath = &quot;e:\\0245_韩顺平零基础学Java_引出this.avi&quot;;</span></span><br><span class="line"><span class="comment">//        String destFilePath = &quot;e:\\a2韩顺平.avi&quot;;</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFilePath));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFilePath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明: readLine 读取一行内容，但是没有换行</span></span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//每读取一行，就写入</span></span><br><span class="line">                bw.write(line);</span><br><span class="line">                <span class="comment">//插入一个换行</span></span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;拷贝完毕...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(br != <span class="literal">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-4-2-3-OutputStreamWriter"><a href="#16-4-2-3-OutputStreamWriter" class="headerlink" title="16.4.2.3  OutputStreamWriter"></a>16.4.2.3  OutputStreamWriter</h4><ul><li><h4 id="基本介绍：-76"><a href="#基本介绍：-76" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>OutputStreamWriter：Writer的子类，实现将Outputstream(字节流)包装成Writer(字符流)</li><li>当处理纯文本数据时，如果使用宇符流效率重高，井且可以有效解決中文问题，所以建议格字节流转快成字符流</li><li>可以在使用时指定编码格式</li></ul></li><li><h4 id="例：-12"><a href="#例：-12" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\hsp.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">charSet</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath), charSet);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">        bw.write(<span class="string">&quot;hi, 韩顺平教育&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;按照 &quot;</span> + charSet + <span class="string">&quot; 保存文件成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-4-2-4-PrintWrite"><a href="#16-4-2-4-PrintWrite" class="headerlink" title="16.4.2.4  PrintWrite"></a>16.4.2.4  PrintWrite</h4><ul><li><h4 id="例：-13"><a href="#例：-13" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter printWriter = new PrintWriter(System.out);</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;e:\\f2.txt&quot;</span>));</span><br><span class="line">        printWriter.print(<span class="string">&quot;hi, 北京你好~~~~&quot;</span>);</span><br><span class="line">        printWriter.close();<span class="comment">//flush + 关闭流, 才会将数据写入到文件..</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="16-5-Properties"><a href="#16-5-Properties" class="headerlink" title="16.5 Properties"></a>16.5 Properties</h2><ul><li><h4 id="基本介绍：-77"><a href="#基本介绍：-77" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>专门用于读号配置文件的集合类配置文件的格式：键&#x3D;值</p></li><li><p>键值对不需要有空格，值不需要用引号一起来</p></li><li><p>默认类型是String</p></li><li></li></ul></li><li><h4 id="常用方法：-22"><a href="#常用方法：-22" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li>load：加载配置文件的键值对到Properties对象</li><li>list：将数据显示到指定设备</li><li>getProperty (key)：根据键获取值</li><li>setProperty(key value)：设置键值对到Properties对象</li><li>store：将Properties中的键值对存储到配置文件，在idea 中，保存信息到配置文件，如果含有中文，会存储为unicode码</li></ul></li><li><h4 id="读取："><a href="#读取：" class="headerlink" title="读取："></a>读取：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//使用Properties 类来读取mysql.properties 文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//2. 加载指定配置文件</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//3. 把k-v显示控制台</span></span><br><span class="line">        properties.list(System.out);</span><br><span class="line">        <span class="comment">//4. 根据key 获取对应的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名=&quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码是=&quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//使用Properties 类来创建 配置文件, 修改配置文件内容</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//创建</span></span><br><span class="line">        <span class="comment">//1.如果该文件没有key 就是创建</span></span><br><span class="line">        <span class="comment">//2.如果该文件有key ,就是修改</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Properties 父类是 Hashtable ， 底层就是Hashtable 核心方法</span></span><br><span class="line"><span class="comment">            public synchronized V put(K key, V value) &#123;</span></span><br><span class="line"><span class="comment">                // Make sure the value is not null</span></span><br><span class="line"><span class="comment">                if (value == null) &#123;</span></span><br><span class="line"><span class="comment">                    throw new NullPointerException();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                // Makes sure the key is not already in the hashtable.</span></span><br><span class="line"><span class="comment">                Entry&lt;?,?&gt; tab[] = table;</span></span><br><span class="line"><span class="comment">                int hash = key.hashCode();</span></span><br><span class="line"><span class="comment">                int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span></span><br><span class="line"><span class="comment">                @SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="comment">                Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span></span><br><span class="line"><span class="comment">                for(; entry != null ; entry = entry.next) &#123;</span></span><br><span class="line"><span class="comment">                    if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span></span><br><span class="line"><span class="comment">                        V old = entry.value;</span></span><br><span class="line"><span class="comment">                        entry.value = value;//如果key 存在，就替换</span></span><br><span class="line"><span class="comment">                        return old;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                addEntry(hash, key, value, index);//如果是新k, 就addEntry</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;汤姆&quot;</span>);<span class="comment">//注意保存时，是中文的 unicode码值</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;888888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将k-v 存储文件中即可</span></span><br><span class="line">        properties.store(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\mysql2.properties&quot;</span>), <span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;保存配置文件成功~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h1><h2 id="17-1-网络基础"><a href="#17-1-网络基础" class="headerlink" title="17.1 网络基础"></a>17.1 网络基础</h2><ul><li><h4 id="ip地址："><a href="#ip地址：" class="headerlink" title="ip地址："></a>ip地址：</h4><ul><li>用于唯一标识网络中的每台计算机&#x2F;主机</li><li>查看ip地址：ipconfig</li><li>ip地址的表示形式：点分十进制 xx.xx.xx.xx</li><li>每一个十进制数的范围：0~255</li><li>ip地址的组成&#x3D;网络地址＋主机地址，比如：192.168.16.69</li><li>ilPv6是互联网工程任务组设计的用于替代1PV4的下一代IP协议</li></ul></li><li><h4 id="ipv4地址分类："><a href="#ipv4地址分类：" class="headerlink" title="ipv4地址分类："></a>ipv4地址分类：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.42.09.jpg" alt="截屏2022-06-20 10.42.09"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.43.05.jpg" alt="截屏2022-06-20 10.43.05"></p></li><li><h4 id="域名："><a href="#域名：" class="headerlink" title="域名："></a>域名：</h4><ul><li>将ip地址映射成域名</li></ul></li><li><h4 id="端口号："><a href="#端口号：" class="headerlink" title="端口号："></a>端口号：</h4><ul><li>用于标识计算机上某个特定的网络程序</li><li>表示形式：以整数形式，范围0~65535</li><li>0~1024己经被占用，比如ssh 22,ftp 21, smtp 25 http 80</li><li>常见的网络程序端口号：<br>tomcat :8080<br>mysql:3306<br>oracle:1521<br>sqlserver:1433</li></ul></li><li><h4 id="网络通信协议："><a href="#网络通信协议：" class="headerlink" title="网络通信协议："></a>网络通信协议：</h4><ul><li><p>TCP&#x2F;IP (Transmission Control Protocol&#x2F;Internet Protocol的简写，中文译名为传输控制协议&#x2F;因特网互联协议，又叫网络通讯协议，这个协议是internet最基本的协议，internet国际互联网络的基础就是由网络层的IP协议和传输层的TCP协议组成的</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.46.15.jpg" alt="截屏2022-06-20 10.46.15"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2010.46.39.jpg" alt="截屏2022-06-20 10.46.39"></p></li></ul></li><li><h4 id="TCP："><a href="#TCP：" class="headerlink" title="TCP："></a>TCP：</h4><ul><li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li><li>传输前，采用”三次握手”方式，是可靠的</li><li>TCP协议进行通信的两个应用进程：客户端、服务端</li><li>在连接中可进行大数据量的传输</li><li>传输完毕，需释放已建立的连接，效率低</li></ul></li><li><h4 id="UDP："><a href="#UDP：" class="headerlink" title="UDP："></a>UDP：</h4><ul><li>格数据源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内</li><li>因无需连接，故是不可靠的</li><li>发送数据结束时无需释放资源(因为不是面向连接的)，速度快</li></ul></li></ul><h2 id="17-2-InetAddress"><a href="#17-2-InetAddress" class="headerlink" title="17.2  InetAddress"></a>17.2  InetAddress</h2><ul><li><h4 id="常用方法：-23"><a href="#常用方法：-23" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p>获取本机InetAddress对象 getLocalHost</p></li><li><p>根据指定主机名&#x2F;域名获取ip地址对象 getByName</p></li><li><p>获取InetAddress对象的主机名 getHostName</p></li><li><p>获取InetAddress对象的地址 getHostAddress</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">API_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 获取本机的InetAddress 对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);<span class="comment">//DESKTOP-S4MP84S/192.168.12.1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据指定主机名 获取 InetAddress对象</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host1</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-S4MP84S&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host1=&quot;</span> + host1);<span class="comment">//DESKTOP-S4MP84S/192.168.12.1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据域名返回 InetAddress对象, 比如 www.baidu.com 对应</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host2</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;host2=&quot;</span> + host2);<span class="comment">//www.baidu.com / 110.242.68.4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 通过 InetAddress 对象，获取对应的地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> host2.getHostAddress();<span class="comment">//IP 110.242.68.4</span></span><br><span class="line">        System.out.println(<span class="string">&quot;host2 对应的ip = &quot;</span> + hostAddress);<span class="comment">//110.242.68.4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 通过 InetAddress 对象，获取对应的主机名/或者的域名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> host2.getHostName();</span><br><span class="line">        System.out.println(<span class="string">&quot;host2对应的主机名/域名=&quot;</span> + hostName); <span class="comment">// www.baidu.com</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="17-3-Socket"><a href="#17-3-Socket" class="headerlink" title="17.3  Socket"></a>17.3  Socket</h2><ul><li><h4 id="基本介绍：-78"><a href="#基本介绍：-78" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>通信的两端都要有Socket，是两台机器间通信的端点</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li></ul></li><li><h4 id="TCP网络通信编程："><a href="#TCP网络通信编程：" class="headerlink" title="TCP网络通信编程："></a>TCP网络通信编程：</h4><ul><li><p>基于客户端——服务端的网络通信</p></li><li><p>底层使用TCP&#x2F;IP协议</p></li><li><p>基于Socket的TCP编程</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-20%2011.27.52.jpg" alt="截屏2022-06-20 11.27.52"></p></li></ul></li></ul><h2 id="17-4-TCP编程⭐️"><a href="#17-4-TCP编程⭐️" class="headerlink" title="17.4  TCP编程⭐️"></a>17.4  TCP编程⭐️</h2><ul><li><h4 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP03Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 在本机 的9999端口监听, 等待连接</span></span><br><span class="line">        <span class="comment">//   细节: 要求在本机没有其它服务在监听9999</span></span><br><span class="line">        <span class="comment">//   细节：这个 ServerSocket 可以通过 accept() 返回多个Socket[多个客户端连接服务器的并发]</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待连接..&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 当没有客户端连接9999端口时，程序会 阻塞, 等待连接</span></span><br><span class="line">        <span class="comment">//   如果有客户端连接，则会返回Socket对象，程序继续</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端 socket =&quot;</span> + socket.getClass());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 通过socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. IO读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 获取socket相关联的输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//   使用字符输出流的方式回复信息</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello client 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">// 插入一个换行符，表示回复内容的结束</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">//注意需要手动的flush</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭流和socket</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();<span class="comment">//关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SocketTCP03Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1. 连接服务端 (ip , 端口）</span></span><br><span class="line">        <span class="comment">//解读: 连接本机的 9999端口, 如果连接成功，返回Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 socket返回=&quot;</span> + socket.getClass());</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//2. 连接上后，生成Socket, 通过socket.getOutputStream()</span></span><br><span class="line">        <span class="comment">//   得到 和 socket对象关联的输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(outputStream));</span><br><span class="line">        bufferedWriter.write(<span class="string">&quot;hello, server 字符流&quot;</span>);</span><br><span class="line">        bufferedWriter.newLine();<span class="comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span></span><br><span class="line">        bufferedWriter.flush();<span class="comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 获取和socket关联的输入流. 读取数据(字符)，并显示</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭流对象和socket, 必须关闭</span></span><br><span class="line">        bufferedReader.close();<span class="comment">//关闭外层流</span></span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端退出.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="图片拷贝"><a href="#图片拷贝" class="headerlink" title="图片拷贝"></a>图片拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 服务端在本机监听8888端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端在8888端口监听....&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 等待连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 读取客户端发送的数据</span></span><br><span class="line">        <span class="comment">//   通过Socket得到输入流</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> <span class="string">&quot;src\\abc.mp4&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        bos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端回复 &quot;收到图片&quot;</span></span><br><span class="line">        <span class="comment">// 通过socket 获取到输出流(字符)</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        writer.write(<span class="string">&quot;收到图片&quot;</span>);</span><br><span class="line">        writer.flush();<span class="comment">//把内容刷新到数据通道</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭其他资源</span></span><br><span class="line">        writer.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPFileUploadClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户端连接服务端 8888，得到Socket对象</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//创建读取磁盘文件的输入流</span></span><br><span class="line">        <span class="comment">//String filePath = &quot;e:\\qie.png&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\abc.mp4&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//bytes 就是filePath对应的字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过socket获取到输出流, 将bytes数据发送给服务端</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        bos.write(bytes);<span class="comment">//将文件对应的字节数组的内容，写入到数据通道</span></span><br><span class="line">        bis.close();</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//设置写入数据的结束标记</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//=====接收从服务端回复的消息=====</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//使用StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StreamUtils.streamToString(inputStream);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭相关的流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="音乐拷贝："><a href="#音乐拷贝：" class="headerlink" title="音乐拷贝："></a>音乐拷贝：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 监听 9999端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2.等待客户端连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务端，在9999端口监听，等待下载文件&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//3.读取 客户端发送要下载的文件名</span></span><br><span class="line">        <span class="comment">//  这里老师使用了while读取文件名，时考虑将来客户端发送的数据较大的情况</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">downLoadFileName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            downLoadFileName += <span class="keyword">new</span> <span class="title class_">String</span>(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端希望下载文件名=&quot;</span> + downLoadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老师在服务器上有两个文件, 无名.mp3 高山流水.mp3</span></span><br><span class="line">        <span class="comment">//如果客户下载的是 高山流水 我们就返回该文件，否则一律返回 无名.mp3</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resFileName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;高山流水&quot;</span>.equals(downLoadFileName)) &#123;</span><br><span class="line">            resFileName = <span class="string">&quot;src\\高山流水.mp3&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resFileName = <span class="string">&quot;src\\无名.mp3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建一个输入流，读取文件</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(resFileName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 使用工具类StreamUtils ，读取文件到一个字节数组</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//6. 得到Socket关联的输出流</span></span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="comment">//7. 写入到数据通道，返回给客户端</span></span><br><span class="line">        bos.write(bytes);</span><br><span class="line">        socket.shutdownOutput();<span class="comment">//很关键.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8 关闭相关的资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端退出...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Homework03Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 接收用户输入，指定下载文件名</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入下载文件名&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadFileName</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 客户端连接服务端，准备发送</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getLocalHost(), <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//3. 获取和Socket关联的输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(downloadFileName.getBytes());</span><br><span class="line">        <span class="comment">//设置写入结束的标志</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 读取服务端返回的文件(字节数据)</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = StreamUtils.streamToByteArray(bis);</span><br><span class="line">        <span class="comment">//5. 得到一个输出流，准备将 bytes 写入到磁盘文件</span></span><br><span class="line">        <span class="comment">//比如你下载的是 高山流水 =&gt; 下载的就是 高山流水.mp3</span></span><br><span class="line">        <span class="comment">//    你下载的是 韩顺平 =&gt; 下载的就是 无名.mp3  文件名 韩顺平.mp3</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span> + downloadFileName + <span class="string">&quot;.mp3&quot;</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath));</span><br><span class="line">        bos.write(bytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 关闭相关的资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端下载完毕，正确退出..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="netstat指令："><a href="#netstat指令：" class="headerlink" title="netstat指令："></a>netstat指令：</h4><ul><li>netstat-an 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</li><li>netstat -an l more 可以分页显示</li><li>要求在dos控制台下执行</li></ul></li></ul><h2 id="17-5-UDP编程"><a href="#17-5-UDP编程" class="headerlink" title="17.5  UDP编程"></a>17.5  UDP编程</h2><ul><li><h4 id="基本介绍：-79"><a href="#基本介绍：-79" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序</li><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达</li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号</li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li></ul></li><li><h4 id="基本流程："><a href="#基本流程：" class="headerlink" title="基本流程："></a>基本流程：</h4><ol><li><p>核心的两个类&#x2F;对象 Datagramsocket与DatagramPacket</p></li><li><p>建立发送端，接收端</p></li><li><p>建立数据包</p></li><li><p>调用DatagramSocket的发送、接收方法</p></li><li><p>关网DatagramSocket</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2889.jpg" alt="IMG_2889"></p></li></ol></li><li><h4 id="注意事项和细节：-62"><a href="#注意事项和细节：-62" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>没有明确的服务端和客户端，演变成数据的发送端和接收端</li><li>接收数据和发送数据是通过 DatagramSocket 对象完成</li><li>将数据封装到DatagramPacket 对象&#x2F; 装包</li><li>当接收到 DatagramPacket 对象，需要进行拆包，取出数据</li><li>DatagramSocket 可以指定在哪个端口接收数据</li></ol></li><li><h4 id="例：-14"><a href="#例：-14" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPReceiverA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. 创建一个 DatagramSocket 对象，准备在9999接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//老师提示: 当有数据包发送到 本机的9999端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9999端口, 就会阻塞等待.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收端A 等待接收数据..&quot;</span>);</span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        <span class="type">byte</span>[] data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//===回复信息给B端</span></span><br><span class="line">        <span class="comment">//将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        data = <span class="string">&quot;好的, 明天见&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        packet =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);<span class="comment">//发送</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;A端退出...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPSenderB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建 DatagramSocket 对象，准备在9998端口 接收数据</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9998</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 将需要发送的数据，封装到 DatagramPacket对象</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明: 封装的 DatagramPacket对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="string">&quot;192.168.12.1&quot;</span>), <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.=== 接收从A端回复的信息</span></span><br><span class="line">        <span class="comment">//(1)   构建一个 DatagramPacket 对象，准备接收数据</span></span><br><span class="line">        <span class="comment">//   在前面讲解UDP 协议时，老师说过一个数据包最大 64k</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        packet = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, buf.length);</span><br><span class="line">        <span class="comment">//(2)    调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span></span><br><span class="line">        <span class="comment">//   填充到 packet对象</span></span><br><span class="line">        <span class="comment">//老师提示: 当有数据包发送到 本机的9998端口时，就会接收到数据</span></span><br><span class="line">        <span class="comment">//   如果没有数据包发送到 本机的9998端口, 就会阻塞等待.</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)  可以把packet 进行拆包，取出数据，并显示.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> packet.getLength();<span class="comment">//实际接收到的数据字节长度</span></span><br><span class="line">        data = packet.getData();<span class="comment">//接收到数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, length);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;B端退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="18-反射"><a href="#18-反射" class="headerlink" title="18 反射"></a>18 反射</h1><h2 id="18-1-反射机制"><a href="#18-1-反射机制" class="headerlink" title="18.1 反射机制"></a>18.1 反射机制</h2><ul><li><h4 id="基本介绍：-80"><a href="#基本介绍：-80" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>反射机制允许程序在执行期借助子Reflection API取得任何类的内部信息(比如成员变量，构造器，成员方法等等），并能操作对象的属性及方法</p></li><li><p>加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.19.26.jpg" alt="截屏2022-06-27 23.19.26"></p></li></ul></li></ul><h2 id="18-2-反射相关类"><a href="#18-2-反射相关类" class="headerlink" title="18.2 反射相关类"></a>18.2 反射相关类</h2><ul><li>java.lang.Class：代表一个类，Class对象表示某个类加载后在堆中的对象</li><li>java.lang.reflect.Method：代表该类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 使用Properties 类, 可以读写配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\re.properties&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classfullpath</span> <span class="operator">=</span> properties.get(<span class="string">&quot;classfullpath&quot;</span>).toString();<span class="comment">//&quot;com.hspedu.Cat&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> properties.get(<span class="string">&quot;method&quot;</span>).toString();<span class="comment">//&quot;hi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用反射机制解决</span></span><br><span class="line">        <span class="comment">//(1) 加载类, 返回Class类型的对象cls</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(classfullpath);</span><br><span class="line">        <span class="comment">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;o的运行类型=&quot;</span> + o.getClass()); <span class="comment">//运行类型</span></span><br><span class="line">        <span class="comment">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName&quot;hi&quot;  的方法对象</span></span><br><span class="line">        <span class="comment">//    即：在反射中，可以把方法视为对象（万物皆对象）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//(4) 通过method1 调用方法: 即通过方法对象来实现调用方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">        method1.invoke(o); <span class="comment">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Field: 代表类的成员变量, Field对象表示某个类的成员变量</span></span><br><span class="line">        <span class="comment">//得到name字段</span></span><br><span class="line">        <span class="comment">//getField不能得到私有的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;age&quot;</span>); <span class="comment">//</span></span><br><span class="line">        System.out.println(nameField.get(o)); <span class="comment">// 传统写法 对象.成员变量 , 反射 :  成员变量对象.get(对象)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor对象表示构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> cls.getConstructor(); <span class="comment">//()中可以指定构造器参数类型, 返回无参构造器</span></span><br><span class="line">        System.out.println(constructor);<span class="comment">//Cat()</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> cls.getConstructor(String.class); <span class="comment">//这里传入的 String.class 就是String类的Class对象</span></span><br><span class="line">        System.out.println(constructor2);<span class="comment">//Cat(String name)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-3-Class类"><a href="#18-3-Class类" class="headerlink" title="18.3 Class类"></a>18.3 Class类</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.33.40.jpg" alt="截屏2022-06-27 23.33.40"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2925.jpg" alt="IMG_2925"></p><ul><li><h4 id="基本介绍：-81"><a href="#基本介绍：-81" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li>Class也是类，因此也继承Object类</li><li>Class类对象不是new出来的，而是系统创建的</li><li>类的Class类对象，在内存中只有一份，且只加载一次</li><li>每个类的实例都会记录它属于哪个Class实例生成</li><li>通过Class可以完整地得到一个类的完整结构，通过一系列API</li><li>Class对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据(包括 方法代码，变量名，方法名，访问权限等等）</li></ul></li><li><h4 id="Class类对象获取："><a href="#Class类对象获取：" class="headerlink" title="Class类对象获取："></a>Class类对象获取：</h4><ol><li><p>前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取</p><p>Class cls1 &#x3D; Class.forName(“java.lang.Cat” )</p><p>应用场景：多用于配置文件，读取类全路径，加载类</p></li><li><p>前提：若已知具体的类，通过类的class 获取，该方式最为安全可靠，程序性能最高</p><p>Class cls2 &#x3D; Cat.class</p><p>应用场景：多用于参数传递，比如通过反射得到对应构造器对象</p></li><li><p>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><p>Class class &#x3D; 对象.getClass();</p><p>应用场景：通过创建好的对象，获取Class对象</p></li><li><p>其他方式(类加载器)<br>ClassLoader cl &#x3D; 对象.getClass().getClassLoader();<br>Class class4 &#x3D; cl.loadClass(“类的全类名”);</p></li><li><p>基本数据(int, char boolean,float,double.byte.long,short) </p><p>Class cls &#x3D; 基本数据类型.class</p></li><li><p>基本数据类型对应的包装类，可以通过.type 得到Class类对象</p><p>Class cls &#x3D; 包装类.TYPE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClass_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. Class.forName</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hspedu.Car&quot;</span>; <span class="comment">//通过读取配置文件获取</span></span><br><span class="line">        Class&lt;?&gt; cls1 = Class.forName(classAllPath);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 类名.class , 应用场景: 用于参数传递</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls2</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 对象.getClass(), 应用场景，有对象实例</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls3</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 通过类加载器【4种】来获取到类的Class对象</span></span><br><span class="line">        <span class="comment">//(1)先得到类加载器 car</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> car.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//(2)通过类加载器得到Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls4</span> <span class="operator">=</span> classLoader.loadClass(classAllPath);</span><br><span class="line">        System.out.println(cls4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cls1 , cls2 , cls3 , cls4 其实是同一个对象</span></span><br><span class="line">        System.out.println(cls1.hashCode());</span><br><span class="line">        System.out.println(cls2.hashCode());</span><br><span class="line">        System.out.println(cls3.hashCode());</span><br><span class="line">        System.out.println(cls4.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 基本数据(int, char,boolean,float,double,byte,long,short) 按如下方式得到Class类对象</span></span><br><span class="line">        Class&lt;Integer&gt; integerClass = <span class="type">int</span>.class;</span><br><span class="line">        Class&lt;Character&gt; characterClass = <span class="type">char</span>.class;</span><br><span class="line">        Class&lt;Boolean&gt; booleanClass = <span class="type">boolean</span>.class;</span><br><span class="line">        System.out.println(integerClass);<span class="comment">//int</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 基本数据类型对应的包装类，可以通过 .TYPE 得到Class类对象</span></span><br><span class="line">        Class&lt;Integer&gt; type1 = Integer.TYPE;</span><br><span class="line">        Class&lt;Character&gt; type2 = Character.TYPE; <span class="comment">//其它包装类BOOLEAN, DOUBLE, LONG,BYTE等待</span></span><br><span class="line">        System.out.println(type1);</span><br><span class="line"></span><br><span class="line">        System.out.println(integerClass.hashCode());<span class="comment">//?</span></span><br><span class="line">        System.out.println(type1.hashCode());<span class="comment">//?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="有Class对象的类型："><a href="#有Class对象的类型：" class="headerlink" title="有Class对象的类型："></a>有Class对象的类型：</h4><ol><li><p>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</p></li><li><p>interface :接口</p></li><li><p>数组</p></li><li><p>enum：枚举</p></li><li><p>annotation ：注解</p></li><li><p>基本数据类型</p></li><li><p>void</p></li></ol></li><li><h4 id="常用方法：-24"><a href="#常用方法：-24" class="headerlink" title="常用方法："></a>常用方法：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-27%2023.37.22.jpg" alt="截屏2022-06-27 23.37.22"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classAllPath</span> <span class="operator">=</span> <span class="string">&quot;com.hspedu.Car&quot;</span>;</span><br><span class="line">        <span class="comment">//1 . 获取到Car类 对应的 Class对象</span></span><br><span class="line">        <span class="comment">//&lt;?&gt; 表示不确定的Java类型</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line">        <span class="comment">//2. 输出cls</span></span><br><span class="line">        System.out.println(cls); <span class="comment">//显示cls对象, 是哪个类的Class对象 com.hspedu.Car</span></span><br><span class="line">        System.out.println(cls.getClass());<span class="comment">//输出cls运行类型 java.lang.Class</span></span><br><span class="line">        <span class="comment">//3. 得到包名</span></span><br><span class="line">        System.out.println(cls.getPackage().getName());<span class="comment">//包名</span></span><br><span class="line">        <span class="comment">//4. 得到全类名</span></span><br><span class="line">        System.out.println(cls.getName());</span><br><span class="line">        <span class="comment">//5. 通过cls创建对象实例</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car) cls.newInstance();</span><br><span class="line">        System.out.println(car);<span class="comment">//car.toString()</span></span><br><span class="line">        <span class="comment">//6. 通过反射获取属性 brand</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">brand</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;brand&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//宝马</span></span><br><span class="line">        <span class="comment">//7. 通过反射给属性赋值</span></span><br><span class="line">        brand.set(car, <span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">        System.out.println(brand.get(car));<span class="comment">//奔驰</span></span><br><span class="line">        <span class="comment">//8 我希望大家可以得到所有的属性(字段)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======所有的字段属性====&quot;</span>);</span><br><span class="line">        Field[] fields = cls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f.getName());<span class="comment">//名称</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="18-4-类加载"><a href="#18-4-类加载" class="headerlink" title="18.4 类加载"></a>18.4 类加载</h2><ul><li><h4 id="基本介绍：-82"><a href="#基本介绍：-82" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>反射机制是 java实现动态语言的关键，也就是通过反射实现类动态加载</li><li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</li></ol></li><li><h4 id="类加载时机："><a href="#类加载时机：" class="headerlink" title="类加载时机："></a>类加载时机：</h4><ol><li>当创建对象时 (new）&#x2F;&#x2F;静态加载</li><li>当子类被加载时，父类也加载 &#x2F;&#x2F;静态加载</li><li>调用类中的静态成员时 &#x2F;&#x2F;静态加载</li><li>通过反射 &#x2F;&#x2F;动态加载</li></ol></li><li><h4 id="过程图："><a href="#过程图：" class="headerlink" title="过程图："></a>过程图：</h4><p><img src="/../../../Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-06-28%2023.20.21.jpg" alt="截屏2022-06-28 23.20.21"></p></li><li><h4 id="各个阶段任务："><a href="#各个阶段任务：" class="headerlink" title="各个阶段任务："></a>各个阶段任务：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-06-28%2023.22.18.jpg" alt="截屏2022-06-28 23.22.18"></p></li></ul><h4 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1 加载阶段"></a>1 加载阶段</h4><p>JM 在该阶段的主要目的是将字节码从不同的数据源（可能是class 文件、也可能是jar 包，甚至网络）转化为二进制字节流加载到内存中，并生成一个代表该类的java.lang.Class 对象</p><h4 id="2-1-连接阶段——验证"><a href="#2-1-连接阶段——验证" class="headerlink" title="2.1 连接阶段——验证"></a>2.1 连接阶段——验证</h4><ol><li>目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</li><li>包括：文件格式验证(是否以魔数 oxcafebabe开头)、元数据验证、字节码验证和符号引用验证</li><li>可以考虑使用-Xverify:none 参数来关闭大部分的类验证措施，缩短虛拟机类加载的时间</li></ol><h4 id="2-2-连接阶段——准备"><a href="#2-2-连接阶段——准备" class="headerlink" title="2.2 连接阶段——准备"></a>2.2 连接阶段——准备</h4><ol><li>JVM 会在该阶段对静态变量，分配内存井初始化（对应数据类型的默认初始值如0、OL、null false 等），这些变量所使用的内存都将在方法区中进行分配</li></ol><h4 id="2-3-连接阶段——解析"><a href="#2-3-连接阶段——解析" class="headerlink" title="2.3 连接阶段——解析"></a>2.3 连接阶段——解析</h4><ol><li>虛拟机将常量池内的符号引用替换为直接引用的过程</li></ol><h4 id="3-初始化："><a href="#3-初始化：" class="headerlink" title="3 初始化："></a>3 初始化：</h4><ol><li><p>到初始化阶段，才真正开始执行类中定义的 Java 程序代码，此阶段是执行&lt;clinit&gt;() 方法的过程</p></li><li><p>&lt;clinit&gt;() 方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句，</p><p>井进行合井</p></li><li><p>虚拟机会保证一个类的 &lt;Clinit&gt;()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;Clinit&gt;()方其他线程都需要阻塞等待，直到活动线程执行&lt;Clinit&gt;()方法完毕</p></li></ol><h2 id="18-5-反射获取类的结构信息"><a href="#18-5-反射获取类的结构信息" class="headerlink" title="18.5 反射获取类的结构信息"></a>18.5 反射获取类的结构信息</h2><ul><li><h4 id="第一组Class类方法："><a href="#第一组Class类方法：" class="headerlink" title="第一组Class类方法："></a>第一组Class类方法：</h4><ul><li><p>getName:获取全类名</p></li><li><p>getSimpleName:获取简单类名</p></li><li><p>getFields:获取所有public修饰的属性，包含本类以及父类的</p></li><li><p>getDeclaredFields:获取本类中所有属性</p></li><li><p>getMethods:获取所有public修饰的方法，包含本类以及父类的</p></li><li><p>getDeclaredMethods:获取本类中所有方法</p></li><li><p>getConstructors:获取所有public修饰的构造器，包含本类</p></li><li><p>getDeclaredConstructors:获取本类中所有构造器</p></li><li><p>getPackage:lPackage形式返回 包信息</p></li><li><p>getSuperClass:以Class形式返回父类信息</p></li><li><p>getlnterfaces:以Class[]形式返回接口信息</p></li><li><p>getAnnotations:以Annotation[] 形式返回注解信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//第一组方法API</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">api_01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Class对象</span></span><br><span class="line">        Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line">        <span class="comment">//getName:获取全类名</span></span><br><span class="line">        System.out.println(personCls.getName());<span class="comment">//com.hspedu.reflection.Person</span></span><br><span class="line">        <span class="comment">//getSimpleName:获取简单类名</span></span><br><span class="line">        System.out.println(personCls.getSimpleName());<span class="comment">//Person</span></span><br><span class="line">        <span class="comment">//getFields:获取所有public修饰的属性，包含本类以及父类的</span></span><br><span class="line">        Field[] fields = personCls.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;<span class="comment">//增强for</span></span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的属性=&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line">        Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getConstructors: 获取所有public修饰的构造器，包含本类</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personCls.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类的构造器=&quot;</span> + constructor.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里老师只是输出名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getPackage:以Package形式返回 包信息</span></span><br><span class="line">        System.out.println(personCls.getPackage());<span class="comment">//com.hspedu.reflection</span></span><br><span class="line">        <span class="comment">//getSuperClass:以Class形式返回父类信息</span></span><br><span class="line">        Class&lt;?&gt; superclass = personCls.getSuperclass();</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的class对象=&quot;</span> + superclass);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//getInterfaces:以Class[]形式返回接口信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = personCls.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接口信息=&quot;</span> + anInterface);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getAnnotations:以Annotation[] 形式返回注解信息</span></span><br><span class="line">        Annotation[] annotations = personCls.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;注解信息=&quot;</span> + annotation);<span class="comment">//注解</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IB</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">IA</span>, IB &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 4 + 8 = 12</span></span><br><span class="line">    String job;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> sal;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> sal)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="第二组Field类方法："><a href="#第二组Field类方法：" class="headerlink" title="第二组Field类方法："></a>第二组Field类方法：</h4><ul><li><p>getModifiers:以int形式返回修饰符<br>public 是 1，private 是 2 ，protected 是 4，static是8，final是 16</p></li><li><p>getType:以Class形式返回类型</p></li><li><p>getName:返回属性名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到Class对象</span></span><br><span class="line">Class&lt;?&gt; personCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Person&quot;</span>);</span><br><span class="line"><span class="comment">//getDeclaredFields:获取本类中所有属性</span></span><br><span class="line"><span class="comment">//规定 说明: 默认修饰符 是0 ， public  是1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span></span><br><span class="line">Field[] declaredFields = personCls.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;本类中所有属性=&quot;</span> + declaredField.getName()</span><br><span class="line">            + <span class="string">&quot; 该属性的修饰符值=&quot;</span> + declaredField.getModifiers()</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="第三组Method类方法："><a href="#第三组Method类方法：" class="headerlink" title="第三组Method类方法："></a>第三组Method类方法：</h4><ul><li><p>getModifiers:以int形式返回修饰符<br>public 是 1，private 是 2 ，protected 是 4，static是8，final是 16</p></li><li><p>getName:返回方法名</p></li><li><p>getParameterTypes:以Class[]返回参数类型数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getMethods:获取所有public修饰的方法，包含本类以及父类的</span></span><br><span class="line">        Method[] methods = personCls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类以及父类的方法=&quot;</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//getDeclaredMethods:获取本类中所有方法</span></span><br><span class="line">        Method[] declaredMethods = personCls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有方法=&quot;</span> + declaredMethod.getName());</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="第四组Constructor类方法："><a href="#第四组Constructor类方法：" class="headerlink" title="第四组Constructor类方法："></a>第四组Constructor类方法：</h4><ul><li><p>getModifiers: 以int形式返回修饰符</p></li><li><p>getName:返回构造器名</p></li><li><p>getParameterTypes:以Class[]返回参数类型数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getDeclaredConstructors:获取本类中所有构造器</span></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personCls.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;本类中所有构造器=&quot;</span> + declaredConstructor.getName());<span class="comment">//这里老师只是输出名</span></span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = declaredConstructor.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; parameterType : parameterTypes) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;该构造器的形参类型=&quot;</span> + parameterType);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="18-6-通过反射创建对象"><a href="#18-6-通过反射创建对象" class="headerlink" title="18.6 通过反射创建对象"></a>18.6 通过反射创建对象</h2><ul><li><h4 id="Class相关方法："><a href="#Class相关方法：" class="headerlink" title="Class相关方法："></a>Class相关方法：</h4><ul><li>newlnstance：调用类中的无参构造器，获取对应类的对象</li><li>getConstructor(Class.…clazz):根据参数列表，获取对应的public构造器对象</li><li>getDecalared Constructor(Class..clazz):根据参数列表，获取对应的所有构造器对象</li></ul></li><li><h4 id="Constructor类相关方法："><a href="#Constructor类相关方法：" class="headerlink" title="Constructor类相关方法："></a>Constructor类相关方法：</h4><ul><li>SetAccessible:暴破</li><li>newlnstance(Obiect…obj):调用构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecCreateInstance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 先获取到User类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; userClass = Class.forName(<span class="string">&quot;com.hspedu.reflection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 通过public的无参构造器创建实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> userClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//3. 通过public的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            constructor 对象就是</span></span><br><span class="line"><span class="comment">            public User(String name) &#123;//public的有参构造器</span></span><br><span class="line"><span class="comment">                this.name = name;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.1 先得到对应构造器</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = userClass.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//3.2 创建实例，并传入实参</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">hsp</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;hsp&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hsp=&quot;</span> + hsp);</span><br><span class="line">        <span class="comment">//4. 通过非public的有参构造器创建实例</span></span><br><span class="line">        <span class="comment">//4.1 得到private的构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor1 = userClass.getDeclaredConstructor(<span class="type">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//4.2 创建实例</span></span><br><span class="line">        <span class="comment">//暴破【暴力破解】 , 使用反射可以访问private构造器/方法/属性, 反射面前，都是纸老虎</span></span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user2</span> <span class="operator">=</span> constructor1.newInstance(<span class="number">100</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2=&quot;</span> + user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//User类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;韩顺平教育&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;<span class="comment">//无参 public</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;<span class="comment">//public的有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;<span class="comment">//private 有参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="18-7-通过反射访问类"><a href="#18-7-通过反射访问类" class="headerlink" title="18.7 通过反射访问类"></a>18.7 通过反射访问类</h2><ul><li><h4 id="通过反射访问类中属性："><a href="#通过反射访问类中属性：" class="headerlink" title="通过反射访问类中属性："></a>通过反射访问类中属性：</h4><ul><li><p>根据属性名获取Field对象<br>Field f&#x3D; class对象.getDeclaredField(属性名);</p></li><li><p>暴破：f.setAccessible(true);</p></li><li><p>访问:<br>f.set(o,值);<br>System.out.print(f.get(o));</p></li><li><p>如果是静态属性，则set和get中的参数o，可以写成null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessProperty</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Student类对应的 Class对象</span></span><br><span class="line">        Class&lt;?&gt; stuClass = Class.forName(<span class="string">&quot;com.hspedu.reflection.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stuClass.newInstance();<span class="comment">//o 的运行类型就是Student</span></span><br><span class="line">        System.out.println(o.getClass());<span class="comment">//Student</span></span><br><span class="line">        <span class="comment">//3. 使用反射得到age 属性对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(o, <span class="number">88</span>);<span class="comment">//通过反射来操作属性</span></span><br><span class="line">        System.out.println(o);<span class="comment">//</span></span><br><span class="line">        System.out.println(age.get(o));<span class="comment">//返回age属性的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用反射操作name 属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//对name 进行暴破, 可以操作private 属性</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//name.set(o, &quot;老韩&quot;);</span></span><br><span class="line">        name.set(<span class="literal">null</span>, <span class="string">&quot;老韩~&quot;</span>);<span class="comment">//因为name是static属性，因此 o 也可以写出null</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(name.get(o)); <span class="comment">//获取属性值</span></span><br><span class="line">        System.out.println(name.get(<span class="literal">null</span>));<span class="comment">//获取属性值, 要求name是static</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [age=&quot;</span> + age + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="通过反射访问类中方法："><a href="#通过反射访问类中方法：" class="headerlink" title="通过反射访问类中方法："></a>通过反射访问类中方法：</h4></li><li><ol><li><p>根据方法名和参数列表获取Method方法对象：Method m:<br>clazz.getDeclaredMethod(方法名，xx.class);</p></li><li><p>获取对象：Object o&#x3D;class.newlnstance();</p></li><li><p>暴破：o.setAccessible(true);</p></li><li><p>访问：Object returnValue &#x3D;m.invoke(o,实参列表)：可以写成null</p></li><li><p>注意：如果是静态方法，则invoke的参数o，可以写成null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflecAccessMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到Boss类对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; bossCls = Class.forName(<span class="string">&quot;com.hspedu.reflection.Boss&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> bossCls.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用public的hi方法</span></span><br><span class="line">        <span class="comment">//Method hi = bossCls.getMethod(&quot;hi&quot;, String.class);//OK</span></span><br><span class="line">        <span class="comment">//3.1 得到hi方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;hi&quot;</span>, String.class);<span class="comment">//OK</span></span><br><span class="line">        <span class="comment">//3.2 调用</span></span><br><span class="line">        hi.invoke(o, <span class="string">&quot;韩顺平教育~&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 调用private static 方法</span></span><br><span class="line">        <span class="comment">//4.1 得到 say 方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">say</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;say&quot;</span>, <span class="type">int</span>.class, String.class, <span class="type">char</span>.class);</span><br><span class="line">        <span class="comment">//4.2 因为say方法是private, 所以需要暴破，原理和前面讲的构造器和属性一样</span></span><br><span class="line">        say.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(say.invoke(o, <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">        <span class="comment">//4.3 因为say方法是static的，还可以这样调用 ，可以传入null</span></span><br><span class="line">        System.out.println(say.invoke(<span class="literal">null</span>, <span class="number">200</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&#x27;女&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 在反射中，如果方法有返回值，统一返回Object , 但是他运行类型和方法定义的返回类型一致</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal</span> <span class="operator">=</span> say.invoke(<span class="literal">null</span>, <span class="number">300</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal 的运行类型=&quot;</span> + reVal.getClass());<span class="comment">//String</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在演示一个返回的案例</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m1</span> <span class="operator">=</span> bossCls.getDeclaredMethod(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">reVal2</span> <span class="operator">=</span> m1.invoke(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;reVal2的运行类型=&quot;</span> + reVal2.getClass());<span class="comment">//Monster</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monster</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boss</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">say</span><span class="params">(<span class="type">int</span> n, String s, <span class="type">char</span> c)</span> &#123;<span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">return</span> n + <span class="string">&quot; &quot;</span> + s + <span class="string">&quot; &quot;</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(String s)</span> &#123;<span class="comment">//普通public方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hi &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="18-8-反射性能优化"><a href="#18-8-反射性能优化" class="headerlink" title="18.8 反射性能优化"></a>18.8 反射性能优化</h2><ul><li><h4 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h4><ul><li><p>优点：可以动态的创建和使用对象(也是框架底层孩心)，使用灵活，没有反射机制，框架技术就失去底层支撑</p></li><li><p>缺点：使用反射基本是解释执行，对执行速度有影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field</span></span><br><span class="line">        <span class="comment">//Method</span></span><br><span class="line">        <span class="comment">//Constructor</span></span><br><span class="line">        m1();</span><br><span class="line">        m2();</span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传统方法来调用hi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">90</span>; i++) &#123;</span><br><span class="line">            cat.hi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射机制调用方法hi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.hspedu.Cat&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">900000000</span>; i++) &#123;</span><br><span class="line">            hi.invoke(o);<span class="comment">//反射调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m2() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射调用优化 + 关闭访问检查</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.hspedu.Cat&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        hi.setAccessible(<span class="literal">true</span>);<span class="comment">//在反射调用方法时，取消访问检查</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">900000000</span>; i++) &#123;</span><br><span class="line">            hi.invoke(o);<span class="comment">//反射调用方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;m3() 耗时=&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="关闭访问检查："><a href="#关闭访问检查：" class="headerlink" title="关闭访问检查："></a>关闭访问检查：</h4><ul><li>Method和Field、Constructor对象都有setAccessible()方法</li><li>setAccessible作用是启动和禁用访问安全检查的开关</li><li>参数值为true表示 反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li></ul></li></ul><h1 id="19-MySQL数据库"><a href="#19-MySQL数据库" class="headerlink" title="19 MySQL数据库"></a>19 MySQL数据库</h1><h2 id="19-0-数据库"><a href="#19-0-数据库" class="headerlink" title="19.0 数据库"></a>19.0 数据库</h2><ul><li><h4 id="基本介绍：-83"><a href="#基本介绍：-83" class="headerlink" title="基本介绍："></a>基本介绍：</h4><h2 id><a href="#" class="headerlink" title></a><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-09%2013.25.41-20220809132619560.jpg"></h2></li><li><h4 id="创建指令："><a href="#创建指令：" class="headerlink" title="创建指令："></a>创建指令：</h4><ul><li><p>创建数据库：CREATE DATABASE syh_db01;</p></li><li><p>创建一个使用 utf8 字符集的 hsp_db02 数据库：</p><p>CREATE DATABASE syh_db02 CHARACTER SET utf8;</p></li><li><p>创建一个使用 utf8 字符集，并带校对规则的的syh_db03 数据库：</p><p>CREATE DATABASE hsp_db03 CHARACTER SET utf8 COLLATE utf8_bin;</p></li></ul></li><li><h4 id="注意事项和细节：-63"><a href="#注意事项和细节：-63" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>CHARACTER SET：指定数据库采用的字符集，如果不指定字符集，<strong>默认utf8</strong></li><li>COLLATE：指定数据库字符集的校对规则（常用的 utf8 bin、 utf8 general ci <strong>注意默认是 utf8 general ci</strong>）</li><li>校对规则：utf8_bin 区分大小，utf8_general_ci不区分大小写</li><li><strong>表不指定字符集和校对规则则默认使用数据库的字符集和校对规则</strong></li></ol></li><li><h4 id="查看、删除指令："><a href="#查看、删除指令：" class="headerlink" title="查看、删除指令："></a>查看、删除指令：</h4><ul><li>显示数据库语句：SHOW DATABASES</li><li>品示数据库创建语句：SHOW CREATE DATABASE db name</li><li>数据库删除语句：DROP DATABASE [IF EXISTS] db name</li></ul></li><li><h4 id="备份、恢复指令："><a href="#备份、恢复指令：" class="headerlink" title="备份、恢复指令："></a>备份、恢复指令：</h4><ul><li>备份数据库(注意：在DOS执行) 命令行：mysqldump-u 用户名 -p -B 数据库1 数据库2 数据库n＞文件名.sql</li><li>恢复数据库(注意：进入Mysql命令行再执行)：Source 文件名.sql</li></ul></li></ul><h2 id="19-1-表"><a href="#19-1-表" class="headerlink" title="19.1 表"></a>19.1 表</h2><ul><li><h4 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` ( </span><br><span class="line">  `id` INT NOT NULL AUTO_INCREMENT, </span><br><span class="line">  `name` VARCHAR(255), </span><br><span class="line">  `password` VARCHAR(255),</span><br><span class="line">  `biethday` DATE) </span><br><span class="line">  CHARACTER SET utf8 COLLATE utf8_bin ENGING INNODB;</span><br></pre></td></tr></table></figure></li><li><h4 id="添加："><a href="#添加：" class="headerlink" title="添加："></a>添加：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">ADD (column datatype [DEFAULI expr],</span><br><span class="line">     column datatype...);</span><br></pre></td></tr></table></figure></li><li><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">MODIFY(column datatype [DEFAULTexpr],</span><br><span class="line">            column datatype...);</span><br></pre></td></tr></table></figure></li><li><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tablename</span><br><span class="line">DROP(column);</span><br></pre></td></tr></table></figure></li><li><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看表的结构： desc 表名;</span><br><span class="line">修改表名： Rename table 表名 to 新表名;</span><br><span class="line">修改表宇符集： alter table 表名 character set 字符集;</span><br><span class="line">不允许为空： NOT NULL;</span><br><span class="line">自增长： AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-2-数据类型⭐️"><a href="#19-2-数据类型⭐️" class="headerlink" title="19.2 数据类型⭐️"></a>19.2 数据类型⭐️</h2><ul><li><h4 id="Mysql常用数据类型："><a href="#Mysql常用数据类型：" class="headerlink" title="Mysql常用数据类型："></a>Mysql常用数据类型：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_2997.jpg" alt="IMG_2997"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-11%2009.18.11.jpg" alt="截屏2022-08-11 09.18.11"></p></li><li><h4 id="无符号："><a href="#无符号：" class="headerlink" title="无符号："></a>无符号：</h4><ul><li>create table t10 (id tinyint );&#x2F;&#x2F;默认是有符号的</li><li>create table t11 (id tinyint <strong>unsigned</strong> );&#x2F;&#x2F;无符号的</li></ul></li></ul><h3 id="19-2-1-数值型"><a href="#19-2-1-数值型" class="headerlink" title="19.2.1 数值型"></a>19.2.1 数值型</h3><ul><li><h4 id="整数："><a href="#整数：" class="headerlink" title="整数："></a>整数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-11%2009.23.42-20220811092459795-20220811092605703.jpg"></p></li><li><h4 id="bit："><a href="#bit：" class="headerlink" title="bit："></a>bit：</h4><ul><li>mysql&gt; create table t05 (num bit (8));</li><li>mysql&gt; insert into t05 (1, 3);</li><li>mysql&gt; insert into t05 values(2, 65);</li></ul></li><li><h4 id="bit注意事项和细节："><a href="#bit注意事项和细节：" class="headerlink" title="bit注意事项和细节："></a>bit注意事项和细节：</h4><ol><li>bit 字段显示时，按照位的方式显示</li><li>查询的时候仍然可以用使用<strong>数值</strong>查询</li><li>如果一个值只有 0,1可以考虑使用 bit(1)可以节约空间位类型</li><li>M指定位数，默认值1，范围1-64使用不多</li></ol></li><li><h4 id="小数："><a href="#小数：" class="headerlink" title="小数："></a>小数：</h4><ul><li>FLOAT&#x2F;&#x2F;Float&#x2F;&#x2F;单精度精度</li><li>DOUBLE [UNSIGNED]&#x2F;&#x2F;Double&#x2F;&#x2F;双精度</li><li>DECIMAL[M, D] [UNSIGNED]&#x2F;&#x2F;自定义</li></ul></li><li><h4 id="小数注意事项和细节："><a href="#小数注意事项和细节：" class="headerlink" title="小数注意事项和细节："></a>小数注意事项和细节：</h4><ol><li>decimal可以支持更加精确的小数位</li><li>M是小数位数(精度)的总数，D是小数点(标度)后面的位数。</li><li>如果D是0，则值没有小数点或分数部分。M最大65，D最大是30。如果D被省略，默认是0。如果M被省略，默认是10</li><li>建议：如果希望小数的精度高，推荐使用decimal</li></ol></li></ul><h3 id="19-2-2-字符串型"><a href="#19-2-2-字符串型" class="headerlink" title="19.2.2 字符串型"></a>19.2.2 字符串型</h3><ul><li><h4 id="字符串："><a href="#字符串：" class="headerlink" title="字符串："></a>字符串：</h4><ul><li>CHAR (size)固定长度宇符串 最大255 字符</li><li>VARCHAR(size)可变长度字符串最大65532字节[utf8编码最大21844字符1-3个字节用子记录大小]</li></ul></li><li><h4 id="字符串注意事项和细节："><a href="#字符串注意事项和细节：" class="headerlink" title="字符串注意事项和细节："></a>字符串注意事项和细节：</h4><ol><li>char(4)&#x2F;&#x2F;这个4表示字符数(最大255)，不是字节数，不管是中文还是宇母都是放四个,按字符计算</li><li>varchar(4)&#x2F;&#x2F;这个4表示字符数，不管是字母还是中文都以定义好的表的编码来存放数据</li><li>char(4) 是定长</li><li>varchar(4) 是变长，就是说，如果你插入了’aa’,实际占用空间大小并不是4个字符，而是按照实际占用空间来分配（说明：varchar本身还需要占用1-3个字节来记录存放内容长度）</li><li>查询速度：char &gt; varchar</li><li>存放文果时，也可以使用 Text 数据类型、可以将TEXT列视为VARCHAR列，注意 Text 不能有默认值．大小 0-2^16字节<br>如果希望存放更多字符，可以选择MEDIUMTEXT 0-2^24 或者 LONGTEXT 0~2^32</li></ol></li></ul><h3 id="19-2-3-日期型"><a href="#19-2-3-日期型" class="headerlink" title="19.2.3 日期型"></a>19.2.3 日期型</h3><ul><li><h4 id="日期类："><a href="#日期类：" class="headerlink" title="日期类："></a>日期类：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE birthday6</span><br><span class="line">(t1 DATE, </span><br><span class="line">  t2 DATETIME,</span><br><span class="line">   †3 TIMESTAMP NOT NULL DEFAULT</span><br><span class="line">  CURRENT TIMESTAMP ON UPDATE</span><br><span class="line">  CURRENT_TIMESTAMP );</span><br><span class="line">    //timestamp时间戳</span><br></pre></td></tr></table></figure></li><li><h4 id="日期类注意事项和细节："><a href="#日期类注意事项和细节：" class="headerlink" title="日期类注意事项和细节："></a>日期类注意事项和细节：</h4><ol><li>TimeStamp在Insert和update时，自动更新</li></ol></li></ul><h2 id="19-3-CRUD⭐️"><a href="#19-3-CRUD⭐️" class="headerlink" title="19.3 CRUD⭐️"></a>19.3 CRUD⭐️</h2><h3 id="19-3-1-Insert"><a href="#19-3-1-Insert" class="headerlink" title="19.3.1 Insert"></a>19.3.1 Insert</h3><ul><li><h4 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename (column ,column...)</span><br><span class="line">VALUES(value , value...) ;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-64"><a href="#注意事项和细节：-64" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>插入的数据应与字段的数据类型相同</li><li>数据的长度应在列的规定范围内</li><li>在values中列出的数据位置必须与被加入的列的排列位置相对应</li><li>字符和日期型数据应包含在单引号中</li><li>列可以插入空值[前提是该字段允许为空]</li><li>insert into tab name (列名…）values ().().() 形式添加多条记录</li><li>如果是给表中的所有字段添加数据，可以不写前面的字段名称</li><li>默认值的使用，当不给某个字段值时，如果有默认值就会添加，否则报错</li></ol></li></ul><h3 id="19-3-2-Update"><a href="#19-3-2-Update" class="headerlink" title="19.3.2 Update"></a>19.3.2 Update</h3><ul><li><h4 id="基本使用：-1"><a href="#基本使用：-1" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE  employee</span><br><span class="line">SET salary = 1000</span><br><span class="line">WHERE user_name = &#x27;jack&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-65"><a href="#注意事项和细节：-65" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>UPDATE语法可以用新值重新原有表行中的各列</li><li>SET子句指示要修改哪些列和要给子哪些值</li><li>WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行</li><li>如果需要修改多个字段，可以通过 set 字段1&#x3D;值1，字段2&#x3D;值2…</li></ol></li></ul><h3 id="19-3-3-Delete"><a href="#19-3-3-Delete" class="headerlink" title="19.3.3 Delete"></a>19.3.3 Delete</h3><ul><li><h4 id="基本使用：-2"><a href="#基本使用：-2" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE  FROM employee</span><br><span class="line">WHERE user_name = &#x27;jack&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-66"><a href="#注意事项和细节：-66" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>如果不使用where子句，将删除表中所有数据</li><li>Delete语句不能删除某一列的值（可使用update 设为 null 或者”)</li><li>使用delete语句仅删除记录，不删除表本身，可以使用drop删除表</li></ol></li></ul><h3 id="19-3-4-Select"><a href="#19-3-4-Select" class="headerlink" title="19.3.4 Select"></a>19.3.4 Select</h3><ul><li><h4 id="基本使用：-3"><a href="#基本使用：-3" class="headerlink" title="基本使用："></a>基本使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCT] *|&#123;column1,column2,...&#125;</span><br><span class="line">FROM tablename;</span><br><span class="line">GROUP BY column</span><br><span class="line">having condition</span><br><span class="line">ORDER BY column</span><br><span class="line">limit start,rows;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-67"><a href="#注意事项和细节：-67" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>Select 指定查询哪些列的数据</li><li>column指定列名</li><li>*表示指定查询哪张表</li><li>DISTINCT可选，指显示结果时，是否去掉重复数据</li></ol></li><li><h4 id="表达式进行列运算："><a href="#表达式进行列运算：" class="headerlink" title="表达式进行列运算："></a>表达式进行列运算：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT *|&#123;column1|expression,column2|expression,...&#125;</span><br><span class="line">FROM tablename;</span><br></pre></td></tr></table></figure></li><li><h4 id="as："><a href="#as：" class="headerlink" title="as："></a>as：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT columname as 别名 from tablename;</span><br></pre></td></tr></table></figure></li><li><h4 id="where："><a href="#where：" class="headerlink" title="where："></a>where：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM tablename</span><br><span class="line"> WHERE 条件；</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2014.45.09.jpg" alt="截屏2022-08-14 14.45.09"></p></li><li><h4 id="between-and"><a href="#between-and" class="headerlink" title="between and:"></a>between and:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT empno,ename,dname,grade</span><br><span class="line">FROM emp,dept,salgrade </span><br><span class="line">WHERE emp.deptno = dept.deptno </span><br><span class="line">AND (sal BETWEEN losal AND hisal);</span><br></pre></td></tr></table></figure></li><li><h4 id="order-by："><a href="#order-by：" class="headerlink" title="order by："></a>order by：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">FROM tablename</span><br><span class="line">order by colum asc|desc;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-68"><a href="#注意事项和细节：-68" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>Order by 指定排序的列，排序的列既可以是表中的列名，也可以是select语句后指定的列名</li><li>AsC 升序[默认]、Desc 降序</li><li>ORDER BY 子句应位于SELECT语句的结尾</li></ol></li><li><h4 id="group-by-x2F-having："><a href="#group-by-x2F-having：" class="headerlink" title="group by&#x2F;having："></a>group by&#x2F;having：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">FROM tablename</span><br><span class="line">GROUP BY column2 </span><br><span class="line">having condition;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-69"><a href="#注意事项和细节：-69" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>group by用于对查询的结果分组统计</li><li>having子句用于限制分组显示结果</li></ol></li><li><h4 id="limit："><a href="#limit：" class="headerlink" title="limit："></a>limit：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1,column2,...</span><br><span class="line">FROM tablename</span><br><span class="line">LIMIT star , row;</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-3-5-Select增强查询"><a href="#19-3-5-Select增强查询" class="headerlink" title="19.3.5 Select增强查询"></a>19.3.5 Select增强查询</h3><ul><li><h4 id="增强查询："><a href="#增强查询：" class="headerlink" title="增强查询："></a>增强查询：</h4><ul><li>WHERE</li></ul></li><li><h4 id="模糊查询："><a href="#模糊查询：" class="headerlink" title="模糊查询："></a>模糊查询：</h4><ul><li>LIKE</li></ul></li><li><h4 id="排序查询："><a href="#排序查询：" class="headerlink" title="排序查询："></a>排序查询：</h4><ul><li>ORDER BY ASC&#x2F;DESC</li></ul></li><li><h4 id="分页查询："><a href="#分页查询：" class="headerlink" title="分页查询："></a>分页查询：</h4><ul><li>LIMIT star , row</li></ul></li></ul><h3 id="19-3-6-Select多表查询"><a href="#19-3-6-Select多表查询" class="headerlink" title="19.3.6 Select多表查询"></a>19.3.6 Select多表查询</h3><ul><li><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename,sal,dname,emp.deptno</span><br><span class="line">FROM emp, dept</span><br><span class="line">WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure></li><li><h4 id="自连接："><a href="#自连接：" class="headerlink" title="自连接："></a>自连接：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT worker.ename AS &#x27;职员名&#x27; , boss.ename AS &#x27;上级名&#x27; </span><br><span class="line">FROM emp worker, emp boss</span><br><span class="line">WHERE worker.mgr = boss.empno;</span><br></pre></td></tr></table></figure></li><li><h4 id="多行子查询："><a href="#多行子查询：" class="headerlink" title="多行子查询："></a>多行子查询：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select ename, job, sal, deptno</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE job IN (</span><br><span class="line">        SELECT DISTINCT job</span><br><span class="line">        FROM emp</span><br><span class="line">        WHERE deptno = 10</span><br><span class="line">        ) AND deptno != 10;</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-70"><a href="#注意事项和细节：-70" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>多行子查询指返回多行数据的子查询 使用关键字 in</li></ol></li><li><h4 id="多列子查询："><a href="#多列子查询：" class="headerlink" title="多列子查询："></a>多列子查询：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM emp</span><br><span class="line">WHERE (deptno,job) = (</span><br><span class="line">          SELECT deptno,job</span><br><span class="line">          FROM emp</span><br><span class="line">          WHERE ename = &#x27;ALLEN&#x27;</span><br><span class="line">        ) AND ename != &#x27;ALLEN&#x27;;</span><br></pre></td></tr></table></figure></li><li><h4 id="表复制："><a href="#表复制：" class="headerlink" title="表复制："></a>表复制：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO my_table</span><br><span class="line">SELECT * FROM my_table;</span><br></pre></td></tr></table></figure></li><li><h4 id="结构复制："><a href="#结构复制：" class="headerlink" title="结构复制："></a>结构复制：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE my_table LIKE emp;</span><br></pre></td></tr></table></figure></li><li><h4 id="返回表的所有列："><a href="#返回表的所有列：" class="headerlink" title="返回表的所有列："></a>返回表的所有列：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT tmp.* ,dname,loc</span><br><span class="line">FROM dept,(</span><br><span class="line">          SELECT COUNT(*) AS per_num,deptno</span><br><span class="line">          FROM emp</span><br><span class="line">          GROUP BY deptno</span><br><span class="line">        )tmp</span><br><span class="line">        WHERE tmp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-4-函数⭐️"><a href="#19-4-函数⭐️" class="headerlink" title="19.4 函数⭐️"></a>19.4 函数⭐️</h2><ul><li><h4 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数:"></a>统计函数:</h4><ol><li>SUM &#x2F;&#x2F;合计</li><li>AVG &#x2F;&#x2F;平均</li><li>MAX&#x2F;MIN</li><li>COUNT &#x2F;&#x2F;统计 (null不计入)</li></ol></li><li><h4 id="字符串函数："><a href="#字符串函数：" class="headerlink" title="字符串函数："></a>字符串函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2015.16.55.jpg" alt="截屏2022-08-14 15.16.55"></p></li><li><h4 id="数学函数："><a href="#数学函数：" class="headerlink" title="数学函数："></a>数学函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2015.48.16.jpg" alt="截屏2022-08-14 15.48.16"></p></li><li><h4 id="时间函数："><a href="#时间函数：" class="headerlink" title="时间函数："></a>时间函数：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2016.05.37.jpg" alt="截屏2022-08-14 16.05.37"></p></li><li><h4 id="注意事项和细节：-71"><a href="#注意事项和细节：-71" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>DATE ADD0 中的 interval 后面可以是 year minute second day 等</li><li>DATE SUB0 中的 interval 后面可以是 jear minute second dav 等</li><li>DATEDIFF(date1.date2）得到的是天数，而且是date 1-date2 的天数，因此可以取负数这四个西数的日期类型可以是 date, datetime 或者 timestamp</li><li>使用int来保存一个unix时间个unix时间戳，然后使用 from unixtime()进行转换</li></ol></li><li><h4 id="加密和系统："><a href="#加密和系统：" class="headerlink" title="加密和系统："></a>加密和系统：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-14%2017.22.35.jpg" alt="截屏2022-08-14 17.22.35"></p></li><li><h4 id="流程控制："><a href="#流程控制：" class="headerlink" title="流程控制："></a>流程控制：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-15%2014.20.30.jpg" alt="截屏2022-08-15 14.20.30"></p></li></ul><h2 id="19-5-内连接"><a href="#19-5-内连接" class="headerlink" title="19.5 内连接"></a>19.5 内连接</h2><ul><li><h4 id="基本介绍：-84"><a href="#基本介绍：-84" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>只返回两表相连相等的行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT ename,sal,dname,emp.deptno</span><br><span class="line">FROM emp, dept</span><br><span class="line">WHERE emp.deptno = dept.deptno;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-6-外连接⭐️"><a href="#19-6-外连接⭐️" class="headerlink" title="19.6 外连接⭐️"></a>19.6 外连接⭐️</h2><ul><li><h4 id="左外连接："><a href="#左外连接：" class="headerlink" title="左外连接："></a>左外连接：</h4><p>左侧的表完全显示我们就说是左外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`,stu.id,grade</span><br><span class="line">FROM stu LEFT JOIN exam</span><br><span class="line">ON stu.id = exam.id;</span><br></pre></td></tr></table></figure></li><li><h4 id="右外连接："><a href="#右外连接：" class="headerlink" title="右外连接："></a>右外连接：</h4><p>右侧的表完全显示我们就说是右外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name`,stu.id,grade</span><br><span class="line">FROM stu RIGHT JOIN exam</span><br><span class="line">ON stu.id = exam.id;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-7-约束"><a href="#19-7-约束" class="headerlink" title="19.7 约束"></a>19.7 约束</h2><ul><li><h4 id="基本介绍：-85"><a href="#基本介绍：-85" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>约束用于确保数据库的数据满足特定的商业规则</p><p>约束包括：not null 、unique、primary key、foreign key、check</p></li></ul><h3 id="19-7-1-primary-key"><a href="#19-7-1-primary-key" class="headerlink" title="19.7.1 primary key"></a>19.7.1 primary key</h3><ul><li><h4 id="基本介绍：-86"><a href="#基本介绍：-86" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于唯一的标示表行的数据，当定义主键约束后，该列不能重复</p></li><li><h4 id="基本语法：-23"><a href="#基本语法：-23" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">(id INT PRIMARY KEY,</span><br><span class="line">        `name` VARCHAR(32));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">(id INT,</span><br><span class="line">        `name` VARCHAR(32)</span><br><span class="line">        PRIMARY KEY(id,`name`)); //复合主键</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-72"><a href="#注意事项和细节：-72" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>primary key不能重复而且<strong>不能为null</strong></li><li>一张表最多只能有一个主键，但可以是复合主键</li><li>主键的指定方式有两种：<br>直接在字段名后指定：字段名 primakry key<br>在表定义最后写： primary key(列名)</li><li>使用desc 表名，可以看到primary key的情况</li></ol></li></ul><h3 id="19-7-2-not-null"><a href="#19-7-2-not-null" class="headerlink" title="19.7.2 not null"></a>19.7.2 not null</h3><ul><li><h4 id="基本介绍：-87"><a href="#基本介绍：-87" class="headerlink" title="基本介绍："></a>基本介绍：</h4>如果在列上定义了not null,那么当插入数据时，必须为列提供数据</li></ul><h3 id="19-7-3-unique"><a href="#19-7-3-unique" class="headerlink" title="19.7.3 unique"></a>19.7.3 unique</h3><ul><li><h4 id="基本介绍：-88"><a href="#基本介绍：-88" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>如果在列上定义了not null,那么当插入数据时，必须为列提供数据</p></li><li><h4 id="注意事项和细节：-73"><a href="#注意事项和细节：-73" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>如果没有指定not null ，则 unique 字段可以有多个null</li><li>一张表可以有多个unique字段</li></ol></li></ul><h3 id="19-7-3-foreign-key"><a href="#19-7-3-foreign-key" class="headerlink" title="19.7.3 foreign key"></a>19.7.3 foreign key</h3><ul><li><h4 id="基本介绍：-89"><a href="#基本介绍：-89" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于定义主表和从表之间的关系：外键约束要定义在从表上，主表则必须具有主键约束或是unique约束，当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为null</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-16%2015.38.13.jpg" alt="截屏2022-08-16 15.38.13"></p></li><li><h4 id="基本语法：-24"><a href="#基本语法：-24" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">(id INT ,</span><br><span class="line">        `name` VARCHAR(32))</span><br><span class="line">FOREIGN KEY (本表字段) REFERENCES 主表名(主键或unique字段));</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-74"><a href="#注意事项和细节：-74" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>外键指向的表的字段，要求是primary key 或者是unique</li><li>表的类型是innodb，这样的表才支持外键</li><li>外键字段的类型要和主键字段的类型一致(长度可以不同)</li><li>外键宇段的值，必须在主键字段中出现过，或者为null 前提是外键字段允许为null</li><li>一旦建立主外键的关系，数据不能随意删除了</li></ol></li></ul><h3 id="19-7-4-check"><a href="#19-7-4-check" class="headerlink" title="19.7.4 check"></a>19.7.4 check</h3><ul><li><h4 id="基本介绍：-90"><a href="#基本介绍：-90" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用于强制行数据必须满足的条件</p></li><li><h4 id="基本语法：-25"><a href="#基本语法：-25" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字段 数据类型 CHECK (条件)</span><br><span class="line">sex VARCHAR(32) CHECK(sex IN(&#x27;man&#x27;,&#x27;woman&#x27;))</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-8-自增长"><a href="#19-8-自增长" class="headerlink" title="19.8 自增长"></a>19.8 自增长</h2><ul><li><h4 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>整数列添加记录时进行自我增长</p></li><li><h4 id="基本语法：-26"><a href="#基本语法：-26" class="headerlink" title="基本语法："></a>基本语法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `uesr` AUTO_INCREMENT = 100;</span><br><span class="line">CREATE TABLE `user` ( </span><br><span class="line">  `id` INT NOT NULL AUTO_INCREMENT);</span><br></pre></td></tr></table></figure></li><li><h4 id="添加方式："><a href="#添加方式：" class="headerlink" title="添加方式："></a>添加方式：</h4><ul><li>insert into xxx (字段1，字段2..…）values(null，’值’…);</li><li>insert into xxx (字段2…）values(‘值1’，’值2’…);</li><li>insert into xxx values(null,’值1’，…)</li></ul></li><li><h4 id="注意事项和细节：-75"><a href="#注意事项和细节：-75" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>一般来说自增长是和primary key 配合使用的</li><li>自增长也可以单独使用[但是需要配合一个unique</li><li>自增长修饰的字段为整数型(也可以为小数)</li><li>自增长默认从 1开始，你也可以通过如下命令修改alter<br>table 表名 auto increment&#x3D;新的开始值</li><li>如果你添加数据时，给自增长字段(列） 指定的有值，则以指定的值为准</li></ol></li></ul><h2 id="19-9-索引⭐️"><a href="#19-9-索引⭐️" class="headerlink" title="19.9 索引⭐️"></a>19.9 索引⭐️</h2><ul><li><h4 id="查询索引："><a href="#查询索引：" class="headerlink" title="查询索引："></a>查询索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW KEYS FROM 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM 表名;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM 表名;</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-9-1-主键索引"><a href="#19-9-1-主键索引" class="headerlink" title="19.9.1 主键索引"></a>19.9.1 主键索引</h3><ul><li><h4 id="创建索引："><a href="#创建索引：" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename</span><br><span class="line">(id INT PRIMARY KEY);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD PRIMARY KEY(字段);</span><br></pre></td></tr></table></figure></li><li><h4 id="删除索引："><a href="#删除索引：" class="headerlink" title="删除索引："></a>删除索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-9-2-唯一索引"><a href="#19-9-2-唯一索引" class="headerlink" title="19.9.2 唯一索引"></a>19.9.2 唯一索引</h3><ul><li><h4 id="创建索引：-1"><a href="#创建索引：-1" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX 索引名 ON 表名(字段);</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-9-3-普通索引"><a href="#19-9-3-普通索引" class="headerlink" title="19.9.3 普通索引"></a>19.9.3 普通索引</h3><ul><li><h4 id="创建索引：-2"><a href="#创建索引：-2" class="headerlink" title="创建索引："></a>创建索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX 索引名 ON 表名(字段);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD INDEX 索引名(字段);</span><br></pre></td></tr></table></figure></li><li><h4 id="删除索引：-1"><a href="#删除索引：-1" class="headerlink" title="删除索引："></a>删除索引：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX 索引名 ON 表名;</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-9-4-全文索引"><a href="#19-9-4-全文索引" class="headerlink" title="19.9.4 全文索引"></a>19.9.4 全文索引</h3><h3 id="19-9-5-总结"><a href="#19-9-5-总结" class="headerlink" title="19.9.5 总结"></a>19.9.5 总结</h3><ul><li><h4 id="注意事项和细节：-76"><a href="#注意事项和细节：-76" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>较频繁的作为查询条件字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</li><li>更新非常频繁的字段不适合创建索引</li><li>不会出现在WHERE子句中字段不该创建索引</li></ol></li></ul><h2 id="19-10-事物"><a href="#19-10-事物" class="headerlink" title="19.10 事物"></a>19.10 事物</h2><h3 id="19-10-1-事物"><a href="#19-10-1-事物" class="headerlink" title="19.10.1 事物"></a>19.10.1 事物</h3><ul><li><h4 id="基本介绍：-91"><a href="#基本介绍：-91" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>事务用于保证数据的一致性,它由一组相关的dml语句组成,该组的dml语句要么全部成功，要么全部失败</p></li><li><h4 id="事物和锁："><a href="#事物和锁：" class="headerlink" title="事物和锁："></a>事物和锁：</h4><p>当执行事务操作时(dml语句)，mysql会在表上加锁,防止其它用户改表的数据</p></li><li><h4 id="回退事物："><a href="#回退事物：" class="headerlink" title="回退事物："></a>回退事物：</h4><p>保存点是事务中的点 用于取消部分事务，当结束事务时 (commit），会自动的删除该事务所定义的所有保存意，当执行回退事务时，通过指定保存点可以回退到指定的点</p></li><li><h4 id="提交事物："><a href="#提交事物：" class="headerlink" title="提交事物："></a>提交事物：</h4><p>使用commit语句可以提交事务.当执行了commit语句子后,会确认事务的变化、结束事务、删除保存点、 释放锁，数据生效。当使用commit语句结束事务子后，其它会话将可以查看到事务变化后的新数据</p></li><li><h4 id="事物操作："><a href="#事物操作：" class="headerlink" title="事物操作："></a>事物操作：</h4><ul><li>start transaction — 开始一个事务</li><li>savepoint 保存点名 一 设置保存点</li><li>rollback to 保存点名一 回退事务到保存点</li><li>rollback — 回退全部事务</li><li>commit — 提交事务，所有的操作生效，不能回退</li></ul></li><li><h4 id="注意事项和细节：-77"><a href="#注意事项和细节：-77" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>如果不开始事务，默认情况下，dml操作是自动提交的，不能回滚</li><li>如果开始一个事务，你没有创建保存点． 你可以执行rollback，默认就是回退到<br>你事务开始的状态</li><li>你也可以在这个事务中(还没有提交时)，创建多个保存点•比如：savepoint<br>aaa;执行 dml , savepoint bbb;</li><li>回退到更早的保存点则无法会退更晚的保存点</li><li>mysql的事务机制需要innodb的存储引擎还可以使用，myisam不好使</li><li>开始一个事务 start transaction，set autocommit&#x3D;off:</li></ol></li></ul><h3 id="19-10-2-事物隔离"><a href="#19-10-2-事物隔离" class="headerlink" title="19.10.2 事物隔离"></a>19.10.2 事物隔离</h3><ul><li><h4 id="基本介绍：-92"><a href="#基本介绍：-92" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的淮确性</p></li><li><h4 id="事物隔离级别："><a href="#事物隔离级别：" class="headerlink" title="事物隔离级别："></a>事物隔离级别：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2015.12.42.jpg" alt="截屏2022-08-17 15.12.42"></p></li><li><h4 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h4><p>当一个事务读取另一个事务尚<strong>未提交</strong>的修改时，产生脏读</p></li><li><h4 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h4><p>同一查询在同一事务中多次进行，由于其他<strong>提交</strong>事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读</p></li><li><h4 id="幻读："><a href="#幻读：" class="headerlink" title="幻读："></a>幻读：</h4><p>同一查询在同一事务中多次进行，由于其他<strong>提交</strong>事务所做的插入操作，每次返回不同的结果集，此时发生幻读</p></li><li><h4 id="可串行化："><a href="#可串行化：" class="headerlink" title="可串行化："></a>可串行化：</h4><p>只有当其他事物提交改动时，返回不同结果集，且只允许一个事物进行操作</p></li><li><h4 id="隔离操作指令："><a href="#隔离操作指令：" class="headerlink" title="隔离操作指令："></a>隔离操作指令：</h4><ul><li>查看当前会话隔离级别——select @@tx isolation;</li><li>查看系统当前隔离级别——select @@global.tx isolation;</li><li>设置当前会话隔离级别——set session transaction isolation level repeatable read;</li><li>设置系统当前隔离级别——set global transaction isolation level repeatable read;</li><li>mysql 默认的事务隔离级别是repeatable read</li></ul></li><li><h4 id="事物特性："><a href="#事物特性：" class="headerlink" title="事物特性："></a>事物特性：</h4><ol><li>原子性 (Atomicity)原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li>一致性 (Consistency)事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li><li>隔离性 (Isolation)事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离</li><li>持久性 (Durability)持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来郎使数据库发生故障也不应该对其有任何影响</li></ol></li></ul><h2 id="19-11-表类型和存储引擎"><a href="#19-11-表类型和存储引擎" class="headerlink" title="19.11 表类型和存储引擎"></a>19.11 表类型和存储引擎</h2><ul><li><h4 id="基本介绍：-93"><a href="#基本介绍：-93" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ul><li><p>MySQL表类型由存储引擎(Storage Engines)决定，主要包括MyISAM,innoDB、Memory等</p></li><li><p>MysQL 数据表主要支持六种类型，<br>分别是：CSV、 Memory、ARCHIVE、MRG MYISAM、 MYISAM、InnoBDB</p></li><li><p>分为两类，一类是“事务安全型”(transaction-safe)， 比如：InnoDB；其余都是“非事物安全型”(non-transactionsafe)[mysiam] 和 memory]</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2016.10.56.jpg" alt="截屏2022-08-17 16.10.56"></p></li></ul></li><li><h4 id="注意事项和细节：-78"><a href="#注意事项和细节：-78" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>MyLSAM不支持事物，也不支持外键，访问速度快，对事物完整性没有要求</li><li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引</li><li>MEMORY存储引擎使用存在内存中的内容来创建表。每个MEMORY表只实际对应一个磁盘文件。MEMORY类型的表访问非常得快，因为它的数据是放在内存中的，并且默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢失掉，表的结构还在</li></ol></li><li><h4 id="引擎选择："><a href="#引擎选择：" class="headerlink" title="引擎选择："></a>引擎选择：</h4><ol><li>如果你的应用不需要事务，处理的只是基本的CRUD操作，那么MyISAM是不二选择，速度快</li><li>如果需要支持事务，选择InnoDB</li><li>Memory 存储引擎就是将数据存储在内存中，由于没有磁盘1&#x2F;0的等待，速度极快，但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失</li></ol></li><li><h4 id="修改存储引擎："><a href="#修改存储引擎：" class="headerlink" title="修改存储引擎："></a>修改存储引擎：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `表名` ENGINE = 存储引擎;</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-12-视图"><a href="#19-12-视图" class="headerlink" title="19.12 视图"></a>19.12 视图</h2><ul><li><h4 id="基本介绍：-94"><a href="#基本介绍：-94" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>视图是一个虛拟表，其内容由查询定义。同真实的表一样，视图包含列，其数据来自对应的真实表(基表）</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2016.35.47.jpg" alt="截屏2022-08-17 16.35.47"></p></li><li><h4 id="视图操作："><a href="#视图操作：" class="headerlink" title="视图操作："></a>视图操作：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW 视图名 AS SELECT 语句</span><br><span class="line">ALTER VIEW 视图名 AS SELECT 语句</span><br><span class="line">SHOW CREATE VIEW 视图名</span><br><span class="line">DROP VIEW 视图名1,视图名2</span><br></pre></td></tr></table></figure></li><li><h4 id="注意事项和细节：-79"><a href="#注意事项和细节：-79" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>创建视图后，到数据库去看，对应视图只有一个视图结构文件(形式：视图名.frm)</li><li>视图的数据变化会影响到基表，基表的数据变化也会影响到视圈[insert update delete]</li><li>视图中可以再使用视图，数据仍然来自基表</li></ol></li><li><h4 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h4><ol><li>安全：一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。这时就可以创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询自己需要的字段，不能查看保密的字段</li><li>性能：关系数据库的数据常常会分表存储，使用外键建立这些表的之间关系。这时，数据库查询通常会用到连接 (JOIN)。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用JOIN查询数据</li><li>灵活：如果系统中有一张1日的表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样就可以少做很多改动，也达到了升级数据表的目的</li></ol></li><li><h4 id="多基表视图："><a href="#多基表视图：" class="headerlink" title="多基表视图："></a>多基表视图：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW emp_view02 AS</span><br><span class="line">SELECT empno,ename,dname,grade</span><br><span class="line">FROM emp,dept,salgrade </span><br><span class="line">WHERE emp.deptno = dept.deptno </span><br><span class="line">AND (sal BETWEEN losal AND hisal);</span><br></pre></td></tr></table></figure></li></ul><h2 id="19-13-用户管理"><a href="#19-13-用户管理" class="headerlink" title="19.13 用户管理"></a>19.13 用户管理</h2><ul><li><h4 id="管理指令："><a href="#管理指令：" class="headerlink" title="管理指令："></a>管理指令：</h4><ul><li>创建用户：create user ‘用户名’ @ ‘允许登录位置’ identified by 密码</li><li>删除用户：drop user ‘用户名’ @ ‘允许登录位置’</li><li>修改密码：SET PASSWORD FOR  ‘用户名’ @ ‘允许登陆位置’ &#x3D; PASSWORD(‘123456’)</li></ul></li><li><h4 id="授权："><a href="#授权：" class="headerlink" title="授权："></a>授权：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.37.57.jpg" alt="截屏2022-08-17 19.37.57"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.41.20.jpg" alt="截屏2022-08-17 19.41.20"></p></li><li><h4 id="权限管理："><a href="#权限管理：" class="headerlink" title="权限管理："></a>权限管理：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-17%2019.36.52.jpg" alt="截屏2022-08-17 19.36.52"></p></li><li><h4 id="注意事项和细节：-80"><a href="#注意事项和细节：-80" class="headerlink" title="注意事项和细节："></a>注意事项和细节：</h4><ol><li>在创建用户的时候，如果不指定Host，则为%，%表示表示所有1P都有连接权限create user xxx;</li><li>create user ‘xoxx‘@’192.168.1.%’ 表示 xxx用户在 192.168.1.*的ip可以登<br>录mysq</li><li>在删除用户的时候，如果 host 不是 %，需要明确指定“用户’@’host值‘</li></ol></li></ul><h1 id="20-JDBC和连接池"><a href="#20-JDBC和连接池" class="headerlink" title="20 JDBC和连接池"></a>20 JDBC和连接池</h1><ul><li><h4 id="基本介绍：-95"><a href="#基本介绍：-95" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>是Java提供一套用于数据库操作的接口API，Java程序员只需要面向这套接口编程。不同的数据库厂商，针对接口提供品供不同实现</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-19%2016.27.42.jpg" alt="截屏2022-08-19 16.27.42"></p></li><li><h4 id="连接方式："><a href="#连接方式：" class="headerlink" title="连接方式："></a>连接方式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConn</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>(); <span class="comment">//创建driver对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(connect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载Driver类 , 动态加载，更加的灵活，减少依赖性</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="comment">//将 用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//说明 user 和 password 是规定好，后面的值根据实际情况写</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);<span class="comment">// 用户</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;hsp&quot;</span>); <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;方式2=&quot;</span> + connect);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3 使用DriverManager 替代 driver 进行统一管理</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用反射加载Driver</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">        DriverManager.registerDriver(driver);<span class="comment">//注册Driver驱动</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式4: 使用Class.forName 自动完成注册驱动，简化代码</span></span><br><span class="line">    <span class="comment">//这种方式获取连接是使用的最多，推荐使用</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect04</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//使用反射加载了 Driver类</span></span><br><span class="line">        <span class="comment">//在加载 Driver类时，完成注册</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            源码: 1. 静态代码块，在类加载时，会执行一次.</span></span><br><span class="line"><span class="comment">            2. DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">            3. 因此注册driver的工作已经完成</span></span><br><span class="line"><span class="comment">            static &#123;</span></span><br><span class="line"><span class="comment">                try &#123;</span></span><br><span class="line"><span class="comment">                    DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">                &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                    throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建url 和 user 和 password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;hsp&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第4种方式~ &quot;</span> + connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式5 , 在方式4的基础上改进，增加配置文件，让连接mysql更加灵活</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方式5 &quot;</span> + connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-1-JDBC-API⭐️"><a href="#20-1-JDBC-API⭐️" class="headerlink" title="20.1 JDBC API⭐️"></a>20.1 JDBC API⭐️</h2><h3 id="20-1-1-ResultSet"><a href="#20-1-1-ResultSet" class="headerlink" title="20.1.1 ResultSet"></a>20.1.1 ResultSet</h3><ul><li><h4 id="基本介绍：-96"><a href="#基本介绍：-96" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li><p>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成</p></li><li><p>Resultset对象保特一个光标指向基当前的数据行，最初的光标位于第一行之前</p></li><li><p>next方法将光标移动到下一行，并且由于在ResultSet对象中没有更多行时返回<br>false，因此可以在while循环中使用循环来遍历结果集</p></li></ol></li><li><h4 id="底层：-1"><a href="#底层：-1" class="headerlink" title="底层："></a>底层：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-19%2019.52.31.jpg" alt="截屏2022-08-19 19.52.31"></p></li><li><h4 id="例：-15"><a href="#例：-15" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="comment">//4. 组织SqL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name , sex, borndate from actor&quot;</span>;</span><br><span class="line">        <span class="comment">//执行给定的SQL语句，该语句返回单个 ResultSet对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+</span></span><br><span class="line"><span class="comment">        | id | name      | sex | borndate            |</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+-------+</span></span><br><span class="line"><span class="comment">        |  4 | 刘德华     | 男  | 1970-12-12 00:00:00 |</span></span><br><span class="line"><span class="comment">        |  5 | jack      | 男  | 1990-11-11 00:00:00 |</span></span><br><span class="line"><span class="comment">        +----+-----------+-----+---------------------+-------+</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            老韩阅读debug 代码 resultSet 对象的结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 使用while取出数据</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next()) &#123; <span class="comment">// 让光标向后移动，如果没有更多行，则返回false</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="number">1</span>); <span class="comment">//获取该行的第1列</span></span><br><span class="line">            <span class="comment">//int id1 = resultSet.getInt(&quot;id&quot;); 通过列名来获取值, 推荐</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="number">2</span>);<span class="comment">//获取该行的第2列</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> resultSet.getDate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + date);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="20-1-2-Statement"><a href="#20-1-2-Statement" class="headerlink" title="20.1.2 Statement"></a>20.1.2 Statement</h3><ul><li><h4 id="基本介绍：-97"><a href="#基本介绍：-97" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>Statement对象 用于执行静态SQL语句并返回其生成的结果的对象</li><li>在连接建立后，需要对数据库进行访问，执行 命名或是SQL语</li><li>Statement对象执行SQL 语句，存在SQL注入风险</li></ol></li><li><h4 id="例：-16"><a href="#例：-16" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Statement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//4. 组织SqL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd  from admin where name =&#x27;&quot;</span></span><br><span class="line">                + admin_name + <span class="string">&quot;&#x27; and pwd = &#x27;&quot;</span> + admin_pwd + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="20-1-3-PrepareStatement"><a href="#20-1-3-PrepareStatement" class="headerlink" title="20.1.3 PrepareStatement"></a>20.1.3 PrepareStatement</h3><ul><li><h4 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍:"></a>基本介绍:</h4><ol><li>PreparedStatement 执行的 SQL 语句中的参数用问号(?)来表示，调用Preparedstatement 对象的 setxxx()方法来设置这些参数.setxxx()方法有两个参数，第一个参数是要设置的SQL 语句中的参数的索引（从 1 开始），第二个是设置的 SOL 语句中的参数的值</li><li>调用 executeQuery()，返回 ResultSet 对象</li><li>调用 executeUpdate()，执行更新，包括增、删、修改</li></ol></li><li><h4 id="DML："><a href="#DML：" class="headerlink" title="DML："></a>DML：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementDML_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看 PreparedStatement类图</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输删除管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line"><span class="comment">//        System.out.print(&quot;请输入管理员的新密码: &quot;);</span></span><br><span class="line"><span class="comment">//        String admin_pwd = scanner.nextLine();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="comment">//添加记录</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into admin values(?, ?)&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update admin set pwd = ? where name = ?&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from  admin where name = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//preparedStatement.setString(2, admin_name);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行 dml 语句使用  executeUpdate</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行失败&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="查询："><a href="#查询：" class="headerlink" title="查询："></a>查询：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatement_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看 PreparedStatement类图</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让用户输入管理员名和密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的名字: &quot;</span>);  <span class="comment">//next(): 当接收到 空格或者 &#x27;就是表示结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine(); <span class="comment">// 老师说明，如果希望看到SQL注入，这里需要用nextLine</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入管理员的密码: &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties对象获取配置文件的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//获取相关的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(driver);<span class="comment">//建议写上</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 得到PreparedStatement</span></span><br><span class="line">        <span class="comment">//3.1 组织SqL , Sql 语句的 ? 就相当于占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name , pwd  from admin where name =? and pwd = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//3.2 preparedStatement 对象实现了 PreparedStatement 接口的实现类的对象</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.3 给 ? 赋值</span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 执行 select 语句使用  executeQuery</span></span><br><span class="line">        <span class="comment">//   如果执行的是 dml(update, insert ,delete) executeUpdate()</span></span><br><span class="line">        <span class="comment">//   这里执行 executeQuery ,不要在写 sql</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">//如果查询到一条记录，则说明该管理存在</span></span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜， 登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起，登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-2-JDBCUtils"><a href="#20-2-JDBCUtils" class="headerlink" title="20.2 JDBCUtils"></a>20.2 JDBCUtils</h2><ul><li><h4 id="基本介绍：-98"><a href="#基本介绍：-98" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>可以将其封装JDBC连接的工具类JDBCUtils</p></li><li><h4 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line">    <span class="comment">//定义相关的属性(4个), 因为只需要一份，因此，我们做出static</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user; <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password; <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url; <span class="comment">//url</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver; <span class="comment">//驱动名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在static代码块去初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">            <span class="comment">//读取相关的属性值</span></span><br><span class="line">            user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//在实际开发中，我们可以这样处理</span></span><br><span class="line">            <span class="comment">//1. 将编译异常转成 运行异常</span></span><br><span class="line">            <span class="comment">//2. 调用者，可以选择捕获该异常，也可以选择默认处理该异常，比较方便.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接数据库, 返回Connection</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//1. 将编译异常转成 运行异常</span></span><br><span class="line">            <span class="comment">//2. 调用者，可以选择捕获该异常，也可以选择默认处理该异常，比较方便.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭相关资源</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. ResultSet 结果集</span></span><br><span class="line"><span class="comment">        2. Statement 或者 PreparedStatement</span></span><br><span class="line"><span class="comment">        3. Connection</span></span><br><span class="line"><span class="comment">        4. 如果需要关闭资源，就传入对象，否则传入 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet set, Statement statement, Connection connection)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为null</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (set != <span class="literal">null</span>) &#123;</span><br><span class="line">                set.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//将编译异常转成运行异常抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="例：-17"><a href="#例：-17" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils_Use</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            System.out.println(connection.getClass()); <span class="comment">//com.mysql.jdbc.JDBC4Connection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">5</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + borndate + <span class="string">&quot;\t&quot;</span> + phone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> &#123;<span class="comment">//insert , update, delete</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 测试 delete 和 insert ,自己玩.</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给占位符赋值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="comment">//执行</span></span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-3-事务⭐️"><a href="#20-3-事务⭐️" class="headerlink" title="20.3 事务⭐️"></a>20.3 事务⭐️</h2><ul><li><h4 id="基本介绍：-99"><a href="#基本介绍：-99" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>JDBC程序中当一个Connection对象创建时，默认情况下是自动提交事务：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚</li><li>JDBC程序中为了让多个 SOL 语句作为一个整体执行，需要使用事务</li><li>调用 Connection 的 setAutoCommit(false） 可以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 commit()：方法提交事务</li><li>在其中某个操作失败或出现异常时，调用 rollback()：方法回滚事务</li></ol></li><li><h4 id="例：-18"><a href="#例：-18" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作转账的业务</span></span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection(); <span class="comment">// 在默认情况下，connection是默认自动提交</span></span><br><span class="line">            <span class="comment">//将 connection 设置为不自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">//开启了事务</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.executeUpdate(); <span class="comment">// 执行第1条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//抛出异常</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">            preparedStatement.executeUpdate(); <span class="comment">// 执行第3条sql</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//这里提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//这里我们可以进行回滚，即撤销执行的SQL</span></span><br><span class="line">            <span class="comment">//默认回滚到事务开始的状态.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;执行发生了异常，撤销执行的sql&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-4-批处理"><a href="#20-4-批处理" class="headerlink" title="20.4 批处理"></a>20.4 批处理</h2><ul><li><h4 id="基本介绍：-100"><a href="#基本介绍：-100" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li>当需要成批插入或者更新记录时。可以采用Java的批量更新机制，这一机制允许多条语句一次性提交给数据库批量处理</li><li>JDBC的批量处理语句包括下面方法：<br>addBatch()：添加需要批量处理的SQL语句或参数<br>executeBatch()：执行批量处理语句；<br>clearBatch()：清空批处理包的语句</li><li>JDBC连接MySQL时，如果要使用批处理功能，请再url中加参数  ?rewrite BatchedStatements&#x3D;true</li><li>批处理往往和PreparedStatement一起搭配使用，可以既减少编译次数，又減少运行次数，效率大大提高</li></ol></li><li><h4 id="底层：-2"><a href="#底层：-2" class="headerlink" title="底层："></a>底层：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-20%2016.58.02.jpg" alt="截屏2022-08-20 16.58.02"></p></li><li><h4 id="例：-19"><a href="#例：-19" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用批量方式添加数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admin2 values(null, ?, ?)&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();<span class="comment">//开始时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;<span class="comment">//5000执行</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span> + i);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">            <span class="comment">//将sql 语句加入到批处理包中 -&gt; 看源码</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1. //第一就创建 ArrayList - elementData =&gt; Object[]</span></span><br><span class="line"><span class="comment">            //2. elementData =&gt; Object[] 就会存放我们预处理的sql语句</span></span><br><span class="line"><span class="comment">            //3. 当elementData满后,就按照1.5扩容</span></span><br><span class="line"><span class="comment">            //4. 当添加到指定的值后，就executeBatch</span></span><br><span class="line"><span class="comment">            //5. 批量处理会减少我们发送sql语句的网络开销，而且减少编译次数，因此效率提高</span></span><br><span class="line"><span class="comment">            public void addBatch() throws SQLException &#123;</span></span><br><span class="line"><span class="comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span></span><br><span class="line"><span class="comment">                    if (this.batchedArgs == null) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        this.batchedArgs = new ArrayList();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span></span><br><span class="line"><span class="comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    this.batchedArgs.add(new PreparedStatement.BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            preparedStatement.addBatch();</span><br><span class="line">            <span class="comment">//当有1000条记录时，在批量执行</span></span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>) &#123;<span class="comment">//满1000条sql</span></span><br><span class="line">                preparedStatement.executeBatch();</span><br><span class="line">                <span class="comment">//清空一把</span></span><br><span class="line">                preparedStatement.clearBatch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;批量方式 耗时=&quot;</span> + (end - start));<span class="comment">//批量方式 耗时=108</span></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-5-连接池"><a href="#20-5-连接池" class="headerlink" title="20.5 连接池"></a>20.5 连接池</h2><ul><li><h4 id="基本介绍：-101"><a href="#基本介绍：-101" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li><p>传统的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，<br>再验证!P地址，用户名和密码(0.05s~1s时间）。需要数据库连接的时候，就向数据库要求一个，频繁地进行数据库连接操作将占用过多系统资源，容易造成服务器崩溃</p></li><li><p>传统数据库连接，每一次数据库连接使用完后都得断开，如果程序出现异常而未能关闭，将导致数据库内存泄漏，最终将导致重启数据库</p></li><li><p>传统获取连接的方式，不能控制创建的连接数量，如连接过多，也可能导致内存泄漏，MySQL崩溃</p></li><li><p>解解決传统开发中的数据库连接问题，可以采用数据库连接池技术</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-20%2019.44.02.jpg" alt="截屏2022-08-20 19.44.02"></p></li></ol></li><li><h4 id="连接池种类："><a href="#连接池种类：" class="headerlink" title="连接池种类："></a>连接池种类：</h4><ol><li>JDBC 的数据库连按池使用 javax.sql.DataSource 来表示，DataSource只是一个接口，该接口通常由第三方提供实现</li><li>C3PO数据库连接池，速度相对较慢，稳定性不错 (hibernate, spring)</li><li>DBCP数据库连接池，速度相对c3p0较快，但不稳定</li><li>Proxoo 数据库连接池，有监控连接池状态的功能，稳定性较c3po差一点</li><li>BoneCP 数据库连接池，速度快</li><li>Druid(德鲁伊)是阿里提供的数据库连接池，集DBCP、C3P0、Proxool优点于一身的数据库连接池</li></ol></li><li><h4 id="C3PO"><a href="#C3PO" class="headerlink" title="C3PO:"></a>C3PO:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1： 相关参数，在程序中指定user, url , password等</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建一个数据源对象</span></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        <span class="comment">//2. 通过配置文件mysql.properties 获取相关连接的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//读取相关的属性值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给数据源 comboPooledDataSource 设置相关的参数</span></span><br><span class="line">        <span class="comment">//注意：连接管理是由 comboPooledDataSource 来管理</span></span><br><span class="line">        comboPooledDataSource.setDriverClass(driver);</span><br><span class="line">        comboPooledDataSource.setJdbcUrl(url);</span><br><span class="line">        comboPooledDataSource.setUser(user);</span><br><span class="line">        comboPooledDataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始化连接数</span></span><br><span class="line">        comboPooledDataSource.setInitialPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//最大连接数</span></span><br><span class="line">        comboPooledDataSource.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//测试连接池的效率, 测试对mysql 5000次操作</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection(); <span class="comment">//这个方法就是从 DataSource 接口实现的</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接OK&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//c3p0 5000连接mysql 耗时=391</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0 5000连接mysql 耗时=&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式 使用配置文件模板来完成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 将c3p0 提供的 c3p0.config.xml 拷贝到 src目录下</span></span><br><span class="line">    <span class="comment">//2. 该文件指定了连接数据库和连接池的相关参数</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC3P0_02</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">comboPooledDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;hsp_edu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试5000次连接mysql</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始执行....&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comboPooledDataSource.getConnection();</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接OK~&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//c3p0的第二种方式 耗时=413</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c3p0的第二种方式(500000) 耗时=&quot;</span> + (end - start));<span class="comment">//1917</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="Druid："><a href="#Druid：" class="headerlink" title="Druid："></a>Druid：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Druid_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 加入 Druid jar包</span></span><br><span class="line">        <span class="comment">//2. 加入 配置文件 druid.properties , 将该文件拷贝项目的src目录</span></span><br><span class="line">        <span class="comment">//3. 创建Properties对象, 读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 创建一个指定参数的数据库连接池, Druid连接池</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span></span><br><span class="line">                DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());</span><br><span class="line">            <span class="comment">//System.out.println(&quot;连接成功!&quot;);</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//druid连接池 操作5000 耗时=412</span></span><br><span class="line">        System.out.println(<span class="string">&quot;druid连接池 操作500000 耗时=&quot;</span> + (end - start));<span class="comment">//539</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在静态代码块完成 ds初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\druid.properties&quot;</span>));</span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写getConnection方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接, 老师再次强调： 在数据库连接池技术中，close 不是真的断掉连接</span></span><br><span class="line">    <span class="comment">//而是把使用的Connection对象放回连接池</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtilsByDruid_USE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 druid方式完成&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());<span class="comment">//运行类型 com.alibaba.druid.pool.DruidPooledConnection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//getName()</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);<span class="comment">//getSex()</span></span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                System.out.println(id + <span class="string">&quot;\t&quot;</span> + name + <span class="string">&quot;\t&quot;</span> + sex + <span class="string">&quot;\t&quot;</span> + borndate + <span class="string">&quot;\t&quot;</span> + phone);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtilsByDruid.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-6-Apache—DBUtils"><a href="#20-6-Apache—DBUtils" class="headerlink" title="20.6 Apache—DBUtils"></a>20.6 Apache—DBUtils</h2><ul><li><h4 id="基本介绍：-102"><a href="#基本介绍：-102" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的封装，<br>使用dbutils能极大简化jdbc编码的工作量</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-21%2019.39.49.jpg" alt="截屏2022-08-21 19.39.49"></p></li></ol></li><li><h4 id="DbUtils："><a href="#DbUtils：" class="headerlink" title="DbUtils："></a>DbUtils：</h4><ol><li>QueryRunner类：该类封装了SQL的执行，是线程安全的，可以实现增、删、改、查、批处理</li><li>使用QueryRunner类实现查询</li><li>ResultSetHandler接口：该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式</li></ol></li><li><h4 id="DbUtils-API："><a href="#DbUtils-API：" class="headerlink" title="DbUtils API："></a>DbUtils API：</h4><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组</li><li>ArrayListHandler：把结果集中的每—行数据都转成一个数组，再存放到List中</li><li>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中</li><li>BeanListHandler：将结果集中的每一行数据都封装到一个对应的Java Bean实例中，存放到List中</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中</li><li>ScalarHandle：将结果集中的单行单列的数据存放到List中</li><li>KeyedHandler (name)：将结果集中的每行数据都封装到Map里，再把这些map再存到一个map里，其key为指定的key</li><li>MapHandler：将结果集中的第一行数据封装到一个Map里，key是列名，value就是对</li></ul></li><li><h4 id="土方法："><a href="#土方法：" class="headerlink" title="土方法："></a>土方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用老师的土方法来解决ResultSet =封装=&gt; Arraylist</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Actor&gt; <span class="title function_">testSelectToArrayList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用 druid方式完成&quot;</span>);</span><br><span class="line">        <span class="comment">//1. 得到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//2. 组织一个sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        ArrayList&lt;Actor&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建ArrayList对象,存放actor对象</span></span><br><span class="line">        <span class="comment">//3. 创建PreparedStatement 对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            System.out.println(connection.getClass());<span class="comment">//运行类型 com.alibaba.druid.pool.DruidPooledConnection</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//给?号赋值</span></span><br><span class="line">            <span class="comment">//执行, 得到结果集</span></span><br><span class="line">            set = preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该结果集</span></span><br><span class="line">            <span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> set.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> set.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//getName()</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> set.getString(<span class="string">&quot;sex&quot;</span>);<span class="comment">//getSex()</span></span><br><span class="line">                <span class="type">Date</span> <span class="variable">borndate</span> <span class="operator">=</span> set.getDate(<span class="string">&quot;borndate&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> set.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">                <span class="comment">//把得到的resultset 的记录，封装到 Actor对象，放入到list集合</span></span><br><span class="line">                list.add(<span class="keyword">new</span> <span class="title class_">Actor</span>(id, name, sex, borndate, phone));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;list集合数据=&quot;</span> + list);</span><br><span class="line">            <span class="keyword">for</span>(Actor actor : list) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id=&quot;</span> + actor.getId() + <span class="string">&quot;\t&quot;</span> + actor.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            JDBCUtilsByDruid.close(set, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为ArrayList 和 connection 没有任何关联，所以该集合可以复用.</span></span><br><span class="line">        <span class="keyword">return</span>  list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="例：-20"><a href="#例：-20" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBUtils_USE</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用apache-DBUtils 工具类 + druid 完成对表的crud操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryMany</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123; <span class="comment">//返回结果是多行的情况</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回ArrayList 结果集</span></span><br><span class="line">        <span class="comment">//String sql = &quot;select * from actor where id &gt;= ?&quot;;</span></span><br><span class="line">        <span class="comment">//   注意: sql 语句也可以查询部分列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, name from actor where id &gt;= ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 老韩解读</span></span><br><span class="line">        <span class="comment">//(1) query 方法就是执行sql 语句，得到resultset ---封装到 --&gt; ArrayList 集合中</span></span><br><span class="line">        <span class="comment">//(2) 返回集合</span></span><br><span class="line">        <span class="comment">//(3) connection: 连接</span></span><br><span class="line">        <span class="comment">//(4) sql : 执行的sql语句</span></span><br><span class="line">        <span class="comment">//(5) new BeanListHandler&lt;&gt;(Actor.class): 在将resultset -&gt; Actor 对象 -&gt; 封装到 ArrayList</span></span><br><span class="line">        <span class="comment">//    底层使用反射机制 去获取Actor 类的属性，然后进行封装</span></span><br><span class="line">        <span class="comment">//(6) 1 就是给 sql 语句中的? 赋值，可以有多个值，因为是可变参数Object... params</span></span><br><span class="line">        <span class="comment">//(7) 底层得到的resultset ,会在query 关闭, 关闭PreparedStatment</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 分析 queryRunner.query方法:</span></span><br><span class="line"><span class="comment">         * public &lt;T&gt; T query(Connection conn, String sql, ResultSetHandler&lt;T&gt; rsh, Object... params) throws SQLException &#123;</span></span><br><span class="line"><span class="comment">         *         PreparedStatement stmt = null;//定义PreparedStatement</span></span><br><span class="line"><span class="comment">         *         ResultSet rs = null;//接收返回的 ResultSet</span></span><br><span class="line"><span class="comment">         *         Object result = null;//返回ArrayList</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *         try &#123;</span></span><br><span class="line"><span class="comment">         *             stmt = this.prepareStatement(conn, sql);//创建PreparedStatement</span></span><br><span class="line"><span class="comment">         *             this.fillStatement(stmt, params);//对sql 进行 ? 赋值</span></span><br><span class="line"><span class="comment">         *             rs = this.wrap(stmt.executeQuery());//执行sql,返回resultset</span></span><br><span class="line"><span class="comment">         *             result = rsh.handle(rs);//返回的resultset --&gt; arrayList[result] [使用到反射，对传入class对象处理]</span></span><br><span class="line"><span class="comment">         *         &#125; catch (SQLException var33) &#123;</span></span><br><span class="line"><span class="comment">         *             this.rethrow(var33, sql, params);</span></span><br><span class="line"><span class="comment">         *         &#125; finally &#123;</span></span><br><span class="line"><span class="comment">         *             try &#123;</span></span><br><span class="line"><span class="comment">         *                 this.close(rs);//关闭resultset</span></span><br><span class="line"><span class="comment">         *             &#125; finally &#123;</span></span><br><span class="line"><span class="comment">         *                 this.close((Statement)stmt);//关闭preparedstatement对象</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *         &#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *         return result;</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Actor&gt; list =</span><br><span class="line">                queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Actor.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;输出集合的信息&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : list) &#123;</span><br><span class="line">            System.out.print(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示 apache-dbutils + druid 完成 返回的结果是单行记录(单个对象)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingle</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单个对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">// 老韩解读</span></span><br><span class="line">        <span class="comment">// 因为我们返回的单行记录&lt;---&gt;单个对象 , 使用的Hander 是 BeanHandler</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="number">10</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示apache-dbutils + druid 完成查询结果是单行单列-返回的就是object</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScalar</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 就可以执行相关的方法，返回单行单列 , 返回的就是Object</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from actor where id = ?&quot;</span>;</span><br><span class="line">        <span class="comment">//老师解读： 因为返回的是一个对象, 使用的handler 就是 ScalarHandler</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> queryRunner.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), <span class="number">4</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//演示apache-dbutils + druid 完成 dml (update, insert ,delete)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到 连接 (druid)</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtilsByDruid.getConnection();</span><br><span class="line">        <span class="comment">//2. 使用 DBUtils 类和接口 , 先引入DBUtils 相关的jar , 加入到本Project</span></span><br><span class="line">        <span class="comment">//3. 创建 QueryRunner</span></span><br><span class="line">        <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 这里组织sql 完成 update, insert delete</span></span><br><span class="line">        <span class="comment">//String sql = &quot;update actor set name = ? where id = ?&quot;;</span></span><br><span class="line">        <span class="comment">//String sql = &quot;insert into actor values(null, ?, ?, ?, ?)&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from actor where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老韩解读</span></span><br><span class="line">        <span class="comment">//(1) 执行dml 操作是 queryRunner.update()</span></span><br><span class="line">        <span class="comment">//(2) 返回的值是受影响的行数 (affected: 受影响)</span></span><br><span class="line">        <span class="comment">//int affectedRow = queryRunner.update(connection, sql, &quot;林青霞&quot;, &quot;女&quot;, &quot;1966-10-10&quot;, &quot;116&quot;);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">affectedRow</span> <span class="operator">=</span> queryRunner.update(connection, sql, <span class="number">1000</span>);</span><br><span class="line">        System.out.println(affectedRow &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响到表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-7-DAO—BasicDao"><a href="#20-7-DAO—BasicDao" class="headerlink" title="20.7 DAO—BasicDao"></a>20.7 DAO—BasicDao</h2><ul><li><h4 id="基本介绍：-103"><a href="#基本介绍：-103" class="headerlink" title="基本介绍："></a>基本介绍：</h4><ol><li><p>data access object效据访向对象</p></li><li><p>这样的通类，称为BasicDao，是专门和数据库交互的，即完成对数据库的crud操作</p></li><li><p>在 BaiscDao 的基础上，实现一张表 对应一个Dao，更好的完成功能，比如 Customer表<br>Customer.java类(javabean)—CustomerDao.java</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-21%2019.40.23.jpg" alt="截屏2022-08-21 19.40.23"></p></li></ol></li><li><h4 id="例：-21"><a href="#例：-21" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicDAO</span>&lt;T&gt; &#123; <span class="comment">//泛型指定具体类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">qr</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开发通用的dml方法, 针对任意的表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> qr.update(connection, sql, parameters);</span><br><span class="line">            <span class="keyword">return</span>  update;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回多个对象(即查询的结果是多行), 针对任意表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql 语句，可以有 ?</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 传入一个类的Class对象 比如 Actor.class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameters 传入 ? 的具体的值，可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 根据Actor.class 返回对应的 ArrayList 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">queryMulti</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span> qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询单行结果 的通用方法</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">querySingle</span><span class="params">(String sql, Class&lt;T&gt; clazz, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span>  qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;T&gt;(clazz), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询单行单列的方法,即返回单值的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryScalar</span><span class="params">(String sql, Object... parameters)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtilsByDruid.getConnection();</span><br><span class="line">            <span class="keyword">return</span>  qr.query(connection, sql, <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>(), parameters);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e); <span class="comment">//将编译异常-&gt;运行异常 ,抛出</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtilsByDruid.close(<span class="literal">null</span>, <span class="literal">null</span>, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试ActorDAO 对actor表crud操作</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testActorDAO</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ActorDAO</span> <span class="variable">actorDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActorDAO</span>();</span><br><span class="line">        <span class="comment">//1. 查询</span></span><br><span class="line">        List&lt;Actor&gt; actors = actorDAO.queryMulti(<span class="string">&quot;select * from actor where id &gt;= ?&quot;</span>, Actor.class, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;===查询结果===&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Actor actor : actors) &#123;</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 查询单行记录</span></span><br><span class="line">        <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> actorDAO.querySingle(<span class="string">&quot;select * from actor where id = ?&quot;</span>, Actor.class, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====查询单行结果====&quot;</span>);</span><br><span class="line">        System.out.println(actor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 查询单行单列</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> actorDAO.queryScalar(<span class="string">&quot;select name from actor where id = ?&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;====查询单行单列值===&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. dml操作  insert ,update, delete</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">update</span> <span class="operator">=</span> actorDAO.update(<span class="string">&quot;insert into actor values(null, ?, ?, ?, ?)&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;2000-11-11&quot;</span>, <span class="string">&quot;999&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(update &gt; <span class="number">0</span> ? <span class="string">&quot;执行成功&quot;</span> : <span class="string">&quot;执行没有影响表&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="21-正则表达式"><a href="#21-正则表达式" class="headerlink" title="21 正则表达式"></a>21 正则表达式</h1><ul><li><h4 id="基本介绍：-104"><a href="#基本介绍：-104" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>用某种模式去匹配字符串的一个公式</p></li><li><h4 id="底层实现：⭐️"><a href="#底层实现：⭐️" class="headerlink" title="底层实现：⭐️"></a>底层实现：⭐️</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.01.00.jpg" alt="截屏2022-08-28 15.01.00"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegTheory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;1998年12月8日，第二代Java平台的企业版J2EE发布。1999年6月，Sun公司发布了&quot;</span> +</span><br><span class="line">                <span class="string">&quot;第二代Java平台（简称为Java2）的3个版本：J2ME（Java2 Micro Edition，Java2平台的微型&quot;</span> +</span><br><span class="line">                <span class="string">&quot;版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2平台的&quot;</span> +</span><br><span class="line">                <span class="string">&quot;标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2平台的企业版），应&quot;</span> +</span><br><span class="line">                <span class="string">&quot;用3443于基于Java的应用服务器。Java 2平台的发布，是Java发展过程中最重要的一个&quot;</span> +</span><br><span class="line">                <span class="string">&quot;里程碑，标志着Java的应用开始普及9889 &quot;</span>;</span><br><span class="line">        <span class="comment">//目标：匹配所有四个数字</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. \\d 表示一个任意的数字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;(\\d\\d)(\\d\\d)&quot;</span>;</span><br><span class="line">        <span class="comment">//2. 创建模式对象[即正则表达式对象]</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="comment">//3. 创建匹配器</span></span><br><span class="line">        <span class="comment">//说明：创建匹配器matcher， 按照 正则表达式的规则 去匹配 content字符串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.开始匹配</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * matcher.find() 完成的任务 （考虑分组）</span></span><br><span class="line"><span class="comment">         * 什么是分组，比如  (\d\d)(\d\d) ,正则表达式中有() 表示分组,第1个()表示第1组,第2个()表示第2组...</span></span><br><span class="line"><span class="comment">         * 1. 根据指定的规则 ,定位满足规则的子字符串(比如(19)(98))</span></span><br><span class="line"><span class="comment">         * 2. 找到后，将 子字符串的开始的索引记录到 matcher对象的属性 int[] groups;</span></span><br><span class="line"><span class="comment">         *    2.1 groups[0] = 0 , 把该子字符串的结束的索引+1的值记录到 groups[1] = 4</span></span><br><span class="line"><span class="comment">         *    2.2 记录1组()匹配到的字符串 groups[2] = 0  groups[3] = 2</span></span><br><span class="line"><span class="comment">         *    2.3 记录2组()匹配到的字符串 groups[4] = 2  groups[5] = 4</span></span><br><span class="line"><span class="comment">         *    2.4.如果有更多的分组.....</span></span><br><span class="line"><span class="comment">         * 3. 同时记录oldLast 的值为 子字符串的结束的 索引+1的值即35, 即下次执行find时，就从35开始匹配</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * matcher.group(0) 分析</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 源码:</span></span><br><span class="line"><span class="comment">         * public String group(int group) &#123;</span></span><br><span class="line"><span class="comment">         *         if (first &lt; 0)</span></span><br><span class="line"><span class="comment">         *             throw new IllegalStateException(&quot;No match found&quot;);</span></span><br><span class="line"><span class="comment">         *         if (group &lt; 0 || group &gt; groupCount())</span></span><br><span class="line"><span class="comment">         *             throw new IndexOutOfBoundsException(&quot;No group &quot; + group);</span></span><br><span class="line"><span class="comment">         *         if ((groups[group*2] == -1) || (groups[group*2+1] == -1))</span></span><br><span class="line"><span class="comment">         *             return null;</span></span><br><span class="line"><span class="comment">         *         return getSubSequence(groups[group * 2], groups[group * 2 + 1]).toString();</span></span><br><span class="line"><span class="comment">         *     &#125;</span></span><br><span class="line"><span class="comment">         *  1. 根据 groups[0]=31 和 groups[1]=35 的记录的位置，从content开始截取子字符串返回</span></span><br><span class="line"><span class="comment">         *     就是 [31,35) 包含 31 但是不包含索引为 35的位置</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  如果再次指向 find方法.仍然安上面分析来执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            <span class="comment">//小结</span></span><br><span class="line">            <span class="comment">//1. 如果正则表达式有() 即分组</span></span><br><span class="line">            <span class="comment">//2. 取出匹配的字符串规则如下</span></span><br><span class="line">            <span class="comment">//3. group(0) 表示匹配到的子字符串</span></span><br><span class="line">            <span class="comment">//4. group(1) 表示匹配到的子字符串的第1组字串</span></span><br><span class="line">            <span class="comment">//5. group(2) 表示匹配到的子字符串的第2组字串</span></span><br><span class="line">            <span class="comment">//6. ... 但是分组的数不能越界.</span></span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第1组()匹配到的值=&quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;第2组()匹配到的值=&quot;</span> + matcher.group(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="21-1-基本语法"><a href="#21-1-基本语法" class="headerlink" title="21.1 基本语法"></a>21.1 基本语法</h2><ul><li><h4 id="基本介绍：-105"><a href="#基本介绍：-105" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>如果要想灵活的运用正则表达式，必须了解其中各种元字符的功能，元字符从功能上大致分为：</p><ol><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ol></li><li><h4 id="转义符-x2F-x2F"><a href="#转义符-x2F-x2F" class="headerlink" title="转义符 &#x2F;&#x2F;"></a>转义符 &#x2F;&#x2F;</h4><p>需要用到转义符号的字符有以下：.*+()$&#x2F;\[]^{}</p></li><li><h4 id="字符匹配符："><a href="#字符匹配符：" class="headerlink" title="字符匹配符："></a>字符匹配符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.02.02.jpg" alt="截屏2022-08-28 15.02.02"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2015.05.48.jpg" alt="截屏2022-08-28 15.05.48"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3129.jpg" alt="IMG_3129"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3130.jpg" alt="IMG_3130"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3131.jpg" alt="IMG_3131"></p></li><li><h4 id="选择匹配符："><a href="#选择匹配符：" class="headerlink" title="选择匹配符："></a>选择匹配符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2016.01.59.jpg" alt="截屏2022-08-28 16.01.59"></p></li><li><h4 id="限定符："><a href="#限定符：" class="headerlink" title="限定符："></a>限定符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2017.32.44.jpg" alt="截屏2022-08-28 17.32.44"></p></li><li><h4 id="定位符："><a href="#定位符：" class="headerlink" title="定位符："></a>定位符：</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-28%2017.35.25.jpg" alt="截屏2022-08-28 17.35.25"></p></li></ul><h2 id="21-2-分组、捕获、反向引用"><a href="#21-2-分组、捕获、反向引用" class="headerlink" title="21.2 分组、捕获、反向引用"></a>21.2 分组、捕获、反向引用</h2><ul><li><h4 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h4><p>我们可以用圆括号组成个比较复杂的匹配模式，那么一个圆括号的部分我们可以看作是一个子表达式&#x2F;一个分台品</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-29%2014.13.52.jpg" alt="截屏2022-08-29 14.13.52"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/%E6%88%AA%E5%B1%8F2022-08-29%2014.14.11.jpg" alt="截屏2022-08-29 14.14.11"></p></li><li><h4 id="捕获："><a href="#捕获：" class="headerlink" title="捕获："></a>捕获：</h4><p>把正则表达式中子表达式&#x2F;分组匹配的内容，保存到内存中以数字编号或显式命名的组里，方便后面引用，从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组O代表的是整个正则式</p></li><li><h4 id="反向引用："><a href="#反向引用：" class="headerlink" title="反向引用："></a>反向引用：</h4><p>圆括号的内容被捕获后，可以在这个括号后被使用，从而写出-一个比较实用的匹配模式，这个我们称为反向引用，这种引用既可以是在正则表达式内部，也可以是在正则表达式外部，内部反向引用 11分组号，外部反向引用 ＄分组号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegExp13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;我....我要....学学学学....编程java!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 去掉所有的.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        content = matcher.replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//       System.out.println(&quot;content=&quot; + content);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 去掉重复的字  我我要学学学学编程java!</span></span><br><span class="line">        <span class="comment">// 思路</span></span><br><span class="line">        <span class="comment">//(1) 使用 (.)\\1+</span></span><br><span class="line">        <span class="comment">//(2) 使用 反向引用$1 来替换匹配到的内容</span></span><br><span class="line">        <span class="comment">// 注意：因为正则表达式变化，所以需要重置 matcher</span></span><br><span class="line"><span class="comment">//        pattern = Pattern.compile(&quot;(.)\\1+&quot;);//分组的捕获内容记录到$1</span></span><br><span class="line"><span class="comment">//        matcher = pattern.matcher(content);</span></span><br><span class="line"><span class="comment">//        while (matcher.find()) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;找到=&quot; + matcher.group(0));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //使用 反向引用$1 来替换匹配到的内容</span></span><br><span class="line"><span class="comment">//        content = matcher.replaceAll(&quot;$1&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;content=&quot; + content);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用一条语句 去掉重复的字  我我要学学学学编程java!</span></span><br><span class="line">        content = Pattern.compile(<span class="string">&quot;(.)\\1+&quot;</span>).matcher(content).replaceAll(<span class="string">&quot;$1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="21-3-常用类"><a href="#21-3-常用类" class="headerlink" title="21.3 常用类"></a>21.3 常用类</h2><h3 id="21-3-1-Pattern"><a href="#21-3-1-Pattern" class="headerlink" title="21.3.1 Pattern"></a>21.3.1 Pattern</h3><ul><li><h4 id="基本介绍：-106"><a href="#基本介绍：-106" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>pattern 对象是一个正则表达式对象。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，调用其公共静态方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第个参数</p></li><li><h4 id="例：-22"><a href="#例：-22" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello abc hello, 韩顺平教育&quot;</span>;</span><br><span class="line">        <span class="comment">//String regStr = &quot;hello&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello.*&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> Pattern.matches(regStr, content);</span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配= &quot;</span> + matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="21-3-2-Matcher"><a href="#21-3-2-Matcher" class="headerlink" title="21.3.2 Matcher"></a>21.3.2 Matcher</h3><ul><li><h4 id="基本介绍：-107"><a href="#基本介绍：-107" class="headerlink" title="基本介绍："></a>基本介绍：</h4><p>Matcher 对象是对输入字符串进行解释和匹配的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的matcher 方法来获得一个 Matcher 对象</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3144.jpg" alt="IMG_3144"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/3833/IMG_3145.jpg" alt="IMG_3145"></p></li><li><h4 id="例：-23"><a href="#例：-23" class="headerlink" title="例："></a>例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatcherMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;hello edu jack hspedutom hello smith hello hspedu hspedu&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regStr</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regStr);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(content);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">            System.out.println(matcher.start());</span><br><span class="line">            System.out.println(matcher.end());</span><br><span class="line">            System.out.println(<span class="string">&quot;找到: &quot;</span> + content.substring(matcher.start(), matcher.end()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//整体匹配方法，常用于，去校验某个字符串是否满足某个规则</span></span><br><span class="line">        System.out.println(<span class="string">&quot;整体匹配=&quot;</span> + matcher.matches());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成如果content 有 hspedu 替换成 韩顺平教育</span></span><br><span class="line">        regStr = <span class="string">&quot;hspedu&quot;</span>;</span><br><span class="line">        pattern = Pattern.compile(regStr);</span><br><span class="line">        matcher = pattern.matcher(content);</span><br><span class="line">        <span class="comment">//注意：返回的字符串才是替换后的字符串 原来的 content 不变化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newContent</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;newContent=&quot;</span> + newContent);</span><br><span class="line">        System.out.println(<span class="string">&quot;content=&quot;</span> + content);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="21-3-3-PatternSyntaxException"><a href="#21-3-3-PatternSyntaxException" class="headerlink" title="21.3.3 PatternSyntaxException"></a>21.3.3 PatternSyntaxException</h3><ul><li><h4 id="基本介绍：-108"><a href="#基本介绍：-108" class="headerlink" title="基本介绍："></a>基本介绍：</h4>PatternSyntaxException是一个非强制异常类，他表示一个正则表达式模式中的语法错误</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax概述及其快速入门</title>
      <link href="/2023/01/20/Ajax%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%85%B6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/01/20/Ajax%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%85%B6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax概述及其快速入门"><a href="#Ajax概述及其快速入门" class="headerlink" title="Ajax概述及其快速入门"></a>Ajax概述及其快速入门</h1><p> <img src="image-20230120155127114.png" alt="image-20230120155127114"></p><p><img src="image-20230120155759573.png" alt="image-20230120155759573"></p><p><img src="image-20230120161436262-16742024802543.png" alt="image-20230120161436262"></p><p><img src="image-20230120163514017.png" alt="image-20230120163514017"></p><h1 id="AJAX（Asynchronous-Javascript-And-Xml）"><a href="#AJAX（Asynchronous-Javascript-And-Xml）" class="headerlink" title="AJAX（Asynchronous Javascript And Xml）"></a>AJAX（Asynchronous Javascript And Xml）</h1><h2 id="传统请求及缺点"><a href="#传统请求及缺点" class="headerlink" title="传统请求及缺点"></a>传统请求及缺点</h2><ul><li>传统的请求都有哪些？<ul><li>直接在浏览器地址栏上输入URL。</li><li>点击超链接</li><li>提交form表单</li><li>使用JS代码发送请求<ul><li>window.open(url)</li><li>document.location.href &#x3D; url</li><li>window.location.href &#x3D; url</li><li>….</li></ul></li></ul></li><li><h2 id="传统请求存在的问题-页面全部刷新导致了用户的体验较差。-传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）"><a href="#传统请求存在的问题-页面全部刷新导致了用户的体验较差。-传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）" class="headerlink" title="传统请求存在的问题- 页面全部刷新导致了用户的体验较差。- 传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）"></a>传统请求存在的问题<br>- 页面全部刷新导致了用户的体验较差。<br>- 传统的请求导致用户的体验有空白期。（用户的体验是不连贯的）</h2></li></ul><h2 id="AJAX概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><ul><li>AJAX不能称为一种技术，它是多种技术的综合产物。</li><li>AJAX可以让浏览器发送一种特殊的请求，这种请求可以是：异步的。</li><li>什么是异步，什么是同步？<ul><li>假设有t1和t2线程，t1和t2线程并发，就是异步。</li><li>假设有t1和t2线程，t2在执行的时候，必须等待t1线程执行到某个位置之后t2才能执行，那么t2在等t1，显然他们是排队的，排队的就是同步。</li><li>AJAX是可以发送异步请求的。也就是说，在同一个浏览器页面当中，可以发送多个ajax请求，这些ajax请求之间不需要等待，是并发的。</li></ul></li><li>AJAX代码属于WEB前端的JS代码。和后端的java没有关系，后端也可以是php语言，也可以是C语言。</li><li>AJAX 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</li><li>AJAX可以更新网页的部分，而不需要重新加载整个页面。（页面局部刷新）</li><li>AJAX可以做到在同一个网页中同时启动多个请求，类似于在同一个网页中启动“多线程”，一个“线程”一个“请求”。</li><li></li></ul><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><ul><li><p>XMLHttpRequest对象是AJAX的核心对象，发送请求以及接收服务器数据的返回，全靠它了。</p></li><li><p>XMLHttpRequest对象，现代浏览器都是支持的，都内置了该对象。直接用即可。</p></li><li><p>创建XMLHttpRequest对象</p><ul><li>&#96;&#96;&#96;javascript<br>var xhr &#x3D; new XMLHttpRequest();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- XMLHttpRequest对象的方法</span><br><span class="line"></span><br><span class="line">| 方法                                          | 描述                                                         |</span><br><span class="line">| :-------------------------------------------- | :----------------------------------------------------------- |</span><br><span class="line">| abort()                                       | 取消当前请求                                                 |</span><br><span class="line">| getAllResponseHeaders()                       | 返回头部信息                                                 |</span><br><span class="line">| getResponseHeader()                           | 返回特定的头部信息                                           |</span><br><span class="line">| open(*method*, *url*, *async*, *user*, *psw*) | 规定请求method：请求类型 GET 或 POSTurl：文件位置async：true（异步）或 false（同步）user：可选的用户名称psw：可选的密码 |</span><br><span class="line">| send()                                        | 将请求发送到服务器，用于 GET 请求                            |</span><br><span class="line">| send(*string*)                                | 将请求发送到服务器，用于 POST 请求                           |</span><br><span class="line">| setRequestHeader()                            | 向要发送的报头添加标签/值对                                  |</span><br><span class="line"></span><br><span class="line">- XMLHttpRequest对象的属性</span><br><span class="line"></span><br><span class="line">| 属性               | 描述                                                         |</span><br><span class="line">| :----------------- | :----------------------------------------------------------- |</span><br><span class="line">| onreadystatechange | 定义当 readyState 属性发生变化时被调用的函数                 |</span><br><span class="line">| readyState         | 保存 XMLHttpRequest 的状态。0：请求未初始化     1：服务器连接已建立     2：请求已收到    3：正在处理请求    4：请求已完成且响应已就绪 |</span><br><span class="line">| responseText       | 以字符串返回响应数据                                         |</span><br><span class="line">| responseXML        | 以 XML 数据返回响应数据                                      |</span><br><span class="line">| status             | 返回请求的状态号200: &quot;OK&quot;403: &quot;Forbidden&quot;404: &quot;Not Found&quot;    |</span><br><span class="line">| statusText         | 返回状态文本（比如 &quot;OK&quot; 或 &quot;Not Found&quot;）                     |</span><br><span class="line"></span><br><span class="line">## AJAX GET请求</span><br><span class="line"></span><br><span class="line">- 发送AJAX get请求，前端代码：</span><br><span class="line"></span><br><span class="line">  ```html</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;发送ajax get请求&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      window.onload = function () &#123;</span><br><span class="line">          document.getElementById(&quot;btn&quot;).onclick = function () &#123;</span><br><span class="line">              //1. 创建AJAX核心对象</span><br><span class="line">              var xhr = new XMLHttpRequest();</span><br><span class="line">              //2. 注册回调函数</span><br><span class="line">              xhr.onreadystatechange = function()&#123;</span><br><span class="line">                  if (this.readyState == 4) &#123;</span><br><span class="line">                      if (this.status == 200) &#123;</span><br><span class="line">                          // 通过XMLHttpRequest对象的responseText属性可以获取到服务器响应回来的内容。</span><br><span class="line">                          // 并且不管服务器响应回来的是什么，都以普通文本的形势获取。（服务器可能响应回来：普通文本、XML、JSON、HTML...）</span><br><span class="line">                          // innerHTML属性是javascript中的语法，和ajax的XMLHttpRequest对象无关。</span><br><span class="line">                          // innerHTML可以设置元素内部的HTML代码。（innerHTML可以将后面的内容当做一段HTML代码解释并执行）</span><br><span class="line">                          //document.getElementById(&quot;myspan&quot;).innerHTML = this.responseText</span><br><span class="line">                          document.getElementById(&quot;mydiv&quot;).innerHTML = this.responseText</span><br><span class="line">                          // innerText也不是AJAX中的，是javascript中的元素属性，和XMLHttpRequest无关。</span><br><span class="line">                          // innerText也是设置元素中的内容，但是即使后面是一段HTML代码，也是将其看做一个普通字符串设置进去。</span><br><span class="line">                          //document.getElementById(&quot;myspan&quot;).innerText = this.responseText</span><br><span class="line">                      &#125;else&#123;</span><br><span class="line">                          alert(this.status)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              //3. 开启通道</span><br><span class="line">              xhr.open(&quot;GET&quot;, &quot;/ajax/ajaxrequest2&quot;, true)</span><br><span class="line">              //4. 发送请求</span><br><span class="line">              xhr.send()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;发送ajax get请求&lt;/button&gt;</span><br><span class="line">  &lt;span id=&quot;myspan&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;div id=&quot;mydiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>发送AJAX get请求，后端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest2Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-13 10:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest2Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应的内容类型以及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取响应流</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已存在！！！&lt;/font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>AJAX get请求如何提交数据呢？</p><ul><li>get请求提交数据是在“请求行”上提交，格式是：url?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value….</li><li>其实这个get请求提交数据的格式是HTTP协议中规定的，遵循协议即可。</li></ul></li></ul><h2 id="AJAX-GET请求的缓存问题"><a href="#AJAX-GET请求的缓存问题" class="headerlink" title="AJAX GET请求的缓存问题"></a>AJAX GET请求的缓存问题</h2><ul><li>对于低版本的IE浏览器来说，AJAX的get请求可能会走缓存。存在缓存问题。对于现代的浏览器来说，大部分浏览器都已经不存在AJAX get缓存问题了。</li><li>什么是AJAX GET请求缓存问题呢？<ul><li>在HTTP协议中是这样规定get请求的：get请求会被缓存起来。</li><li>发送AJAX GET请求时，在同一个浏览器上，前后发送的AJAX请求路径一样的话，对于低版本的IE来说，第二次的AJAX GET请求会走缓存，不走服务器。</li></ul></li><li>POST请求在HTTP协议中规定的是：POST请求不会被浏览器缓存。</li><li>GET请求缓存的优缺点：<ul><li>优点：直接从浏览器缓存中获取资源，不需要从服务器上重新加载资源，速度较快，用户体验好。</li><li>缺点：无法实时获取最新的服务器资源。</li></ul></li><li>浏览器什么时候会走缓存？<ul><li>第一：是一个GET请求</li><li>第二：请求路径已经被浏览器缓存过了。第二次发送请求的时候，这个路径没有变化，会走浏览器缓存。</li></ul></li><li>如果是低版本的IE浏览器，怎么解决AJAX GET请求的缓存问题呢？<ul><li>可以在请求路径url后面添加一个时间戳，这个时间戳是随时变化的。所以每一次发送的请求路径都是不一样的，这样就不会走浏览器的缓存问题了。</li><li>可以采用时间戳：”url?t&#x3D;” + new Date().getTime()</li><li>或者可以通过随机数：”url?t&#x3D;” + Math.random()</li><li>也可以随机数+时间戳….</li></ul></li></ul><h2 id="AJAX-POST请求"><a href="#AJAX-POST请求" class="headerlink" title="AJAX POST请求"></a>AJAX POST请求</h2><ul><li><p>AJAX POST请求和GET请求的代码区别在哪里？就是前端代码有区别。后端代码没有区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 发送AJAX POST请求</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) <span class="comment">// 设置请求头的内容类型。模拟form表单提交数据。</span></span><br><span class="line"><span class="comment">// 获取表单中的数据</span></span><br><span class="line"><span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;username&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="keyword">var</span> password = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>).<span class="property">value</span>;</span><br><span class="line"><span class="comment">// send函数中的参数就是发送的数据，这个数据在“请求体”当中发送。</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span>+username+<span class="string">&quot;&amp;password=&quot;</span>+password)</span><br></pre></td></tr></table></figure></li><li><p>实现一个案例：使用AJAX POST请求实现用户注册的时候，用户名是否可用。（验证用户名是否可以注册）实现步骤如下：</p><ul><li>在前端，用户输入用户名之后，失去焦点事件blur发生，然后发送AJAX POST请求，提交用户名</li><li>在后端，接收到用户名，连接数据库，根据用户名去表中搜索</li><li>如果用户名已存在<ul><li>后端响应消息：对不起，用户名已存在（在前端页面以红色字体展示）</li></ul></li><li>如果用户名不存在<ul><li>后端响应消息：用户名可以使用（在前端页面以绿色字体展示）</li></ul></li></ul></li><li><p>实现一个案例：用户点击按钮之后，发送AJAX请求，显示学生列表。</p><ul><li>在后端java程序中拼接HTML代码，然后将HTML代码直接响应到浏览器客户端。这种方式不好，不应该在java代码中编写HTML代码，能否在java程序中直接向前端响应数据？可以，可以在后端拼接JSON格式的字符串，或者XML格式的字符串，将这个字符串发送给前端，前端解析即可。</li></ul></li></ul><h2 id="基于JSON的数据交换"><a href="#基于JSON的数据交换" class="headerlink" title="基于JSON的数据交换"></a>基于JSON的数据交换</h2><ul><li><p>在WEB前端中，如何将一个json格式的字符串转换成json对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;username\&quot; : \&quot;zhangsan\&quot;, \&quot;password\&quot; : \&quot;1233344\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">username</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonObj.<span class="property">password</span>)</span><br></pre></td></tr></table></figure></li><li><p>在后端拼接JSON格式的字符串，响应给前端的浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">json.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 获取每个学生的信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 拼接json格式的字符串</span></span><br><span class="line">    <span class="comment">// &#123;&quot;name&quot;:&quot;   王五    &quot;,&quot;age&quot;:    20      ,&quot;addr&quot;:&quot;      北京大兴区     &quot;&#125;,</span></span><br><span class="line">    json.append(<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(name);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;,\&quot;age\&quot;:&quot;</span>);</span><br><span class="line">    json.append(age);</span><br><span class="line">    json.append(<span class="string">&quot;,\&quot;addr\&quot;:\&quot;&quot;</span>);</span><br><span class="line">    json.append(addr);</span><br><span class="line">    json.append(<span class="string">&quot;\&quot;&#125;,&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonStr = json.substring(<span class="number">0</span>, json.length() - <span class="number">1</span>) + <span class="string">&quot;]&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>拼接JSON格式的字符串太痛苦，可以使用阿里巴巴的fastjson组件，它可以将java对象转换成json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">    <span class="comment">// 取出数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;addr&quot;</span>);</span><br><span class="line">    <span class="comment">// 将以上数据封装成Student对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(name, age, addr);</span><br><span class="line">    <span class="comment">// 将Student对象放到List集合</span></span><br><span class="line">    studentList.add(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将List集合转换成json字符串</span></span><br><span class="line">jsonStr = JSON.toJSONString(studentList);</span><br></pre></td></tr></table></figure><p>注意：使用fastjson需要引入fastjson-1.2.2.jar</p></li></ul><h2 id="基于XML的数据交换"><a href="#基于XML的数据交换" class="headerlink" title="基于XML的数据交换"></a>基于XML的数据交换</h2><ul><li><p>注意：如果服务器端响应XML的话，响应的内容类型需要写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>xml和JSON都是常用的数据交换格式</p><ul><li>XML体积大，解析麻烦。较少用。</li><li>JSON体积小，解析简单，较常用。</li></ul></li><li><p>基于XML的数据交换，前端代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用XML完成数据交换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.创建XMLHTTPRequest对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 服务器端响应了一个XML字符串，这里怎么接收呢？</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 使用XMLHTTPRequest对象的responseXML属性，接收返回之后，可以自动封装成document对象（文档对象）</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> xmlDoc = <span class="variable language_">this</span>.<span class="property">responseXML</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(xmlDoc)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 获取所有的&lt;student&gt;元素，返回了多个对象，应该是数组。</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> students = xmlDoc.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;student&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//console.log(students[0].nodeName)</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; students.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> student = students[i]</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// 获取&lt;student&gt;元素下的所有子元素</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;td&gt;&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">var</span> nameOrAge = student.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; nameOrAge.<span class="property">length</span>; j++) &#123;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">var</span> node = nameOrAge[j]</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;name&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;name = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">if</span> (node.<span class="property">nodeName</span> == <span class="string">&quot;age&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">//console.log(&quot;age = &quot; + node.textContent)</span></span></span><br><span class="line"><span class="language-javascript">                                    html += <span class="string">&quot;&lt;td&gt;&quot;</span>+node.<span class="property">textContent</span>+<span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                                &#125;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                            html += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;stutbody&quot;</span>).<span class="property">innerHTML</span> = html</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">status</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3.开启通道</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ajax/ajaxrequest6?t=&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(), <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>显示学生列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;stutbody&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;zhangsan&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;20&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;</span></span><br><span class="line"><span class="comment">    &lt;tr&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;lisi&lt;/td&gt;</span></span><br><span class="line"><span class="comment">        &lt;td&gt;22&lt;/td&gt;</span></span><br><span class="line"><span class="comment">    &lt;/tr&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于XML的数据交换，后端java程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.ajax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AjaxRequest6Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 服务器端返回XML字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: bjpowernode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2022-05-15 11:48</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajaxrequest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxRequest6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意：响应的内容类型是XML。</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/xml;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        &lt;students&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;zhangsan&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;20&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">            &lt;student&gt;</span></span><br><span class="line"><span class="comment">                &lt;name&gt;lisi&lt;/name&gt;</span></span><br><span class="line"><span class="comment">                &lt;age&gt;22&lt;/age&gt;</span></span><br><span class="line"><span class="comment">            &lt;/student&gt;</span></span><br><span class="line"><span class="comment">        &lt;/students&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;students&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;zhangsan&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;20&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;name&gt;lisi&lt;/name&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;age&gt;22&lt;/age&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/student&gt;&quot;</span>);</span><br><span class="line">        xml.append(<span class="string">&quot;&lt;/students&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.print(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="AJAX乱码问题"><a href="#AJAX乱码问题" class="headerlink" title="AJAX乱码问题"></a>AJAX乱码问题</h2><ul><li><p>测试内容：</p><ul><li>发送ajax get请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li><li>发送ajax post请求<ul><li>发送数据到服务器，服务器获取的数据是否乱码？</li><li>服务器响应给前端的中文，会不会乱码？</li></ul></li></ul></li><li><p>包括还要测试tomcat服务器的版本：</p><ul><li>tomcat10和tomcat9都要进行测试。</li></ul></li><li><p>测试结果：</p><ul><li><p>对于tomcat10来说，关于字符集，我们程序员不需要干涉，不会出现乱码。</p></li><li><p>对于tomcat9来说呢？</p><ul><li><p>响应中文的时候，会出现乱码，怎么解决？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>发送ajax post请求的时候，发送给服务器的数据，服务器接收之后乱码，怎么解决？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="AJAX的异步与同步"><a href="#AJAX的异步与同步" class="headerlink" title="AJAX的异步与同步"></a>AJAX的异步与同步</h2><ul><li><p>什么是异步？什么是同步？</p><ul><li>ajax请求1和ajax请求2，同时并发，谁也不用等谁，这就是异步。（a不等b，b也不等a）</li><li>如果ajax请求1在发送的时候需要等待ajax请求2结束之后才能发送，那么这就是同步。（a等待b，或者b等待a，只要发生等待，就是同步。）</li></ul></li><li><p>异步和同步在代码上如何实现？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这个是ajax请求1</span></span><br><span class="line"><span class="comment">// 如果第三个参数是false：这个就表示“ajax请求1”不支持异步，也就是说ajax请求1发送之后，会影响其他ajax请求的发送，只有当我这个请求结束之后，你们其他的ajax请求才能发送。</span></span><br><span class="line"><span class="comment">// false表示，不支持异步。我这个请求发了之后，你们其他的请求都要靠边站。都等着。你们别动呢，等我结束了你们再说。</span></span><br><span class="line">xhr1.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">xhr1.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设这个是ajax请求2</span></span><br><span class="line"><span class="comment">// 如果第三个参数是true：这个就表示“ajax请求2”支持异步请求，也就是说ajax请求2发送之后，不影响其他ajax请求的发送。</span></span><br><span class="line">xhr2.<span class="title function_">open</span>(<span class="string">&quot;请求方式&quot;</span>, <span class="string">&quot;URL&quot;</span>, <span class="literal">true</span>) </span><br><span class="line">xhr2.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure></li><li><p>什么情况下用同步？（大部分情况下我们都是使用ajax异步方式，同步很少用。）</p><ul><li>举一个例子<ul><li>用户注册<ul><li>用户名需要发送ajax请求进行校验</li><li>邮箱地址也需要发送ajax请求校验</li><li>其他的也可能需要发送ajax请求。。。</li><li>并且最终注册按钮的时候，也是发送ajax请求进行注册。</li><li>那么显然，注册的Ajax请求和校验的ajax请求不能异步，必须等待所有的校验ajax请求结束之后，注册的ajax请求才能发。</li></ul></li></ul></li></ul></li></ul><h2 id="AJAX代码封装"><a href="#AJAX代码封装" class="headerlink" title="AJAX代码封装"></a>AJAX代码封装</h2><ul><li><p>AJAX请求相关的代码都是类似的，有很多重复的代码，这些重复的代码能不能不写，能不能封装一个工具类。要发送ajax请求的话，就直接调用这个工具类中的相关函数即可。</p></li><li><p>接下来，手动封装一个工具类，这个工具类我们可以把它看做是一个JS的库。我们把这个JS库起一个名字，叫做jQuery。（我这里封装的jQuery只是一个前端的库，和后端的java没有关系，只是为了方便web前端代码的编写，提高WEB前端的开发效率）</p></li><li><p>手动开发jQuery，源代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jQuery</span>(<span class="params">selector</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selector.<span class="title function_">charAt</span>(<span class="number">0</span>) == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">            domObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector.<span class="title function_">substring</span>(<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = selector</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = <span class="keyword">function</span>(<span class="params">htmlStr</span>)&#123;</span><br><span class="line">        domObj.<span class="property">innerHTML</span> = htmlStr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">click</span> = <span class="keyword">function</span>(<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onclick</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focus</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onfocus</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">blur</span> = <span class="keyword">function</span>(<span class="params">fun</span>) &#123;</span><br><span class="line">        domObj.<span class="property">onblur</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">change</span> = <span class="keyword">function</span> (<span class="params">fun</span>)&#123;</span><br><span class="line">        domObj.<span class="property">onchange</span> = fun</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> domObj.<span class="property">value</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            domObj.<span class="property">value</span> = v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的方法，发送ajax请求</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分析：使用ajax函数发送ajax请求的时候，需要程序员给我们传过来什么？</span></span><br><span class="line"><span class="comment">     *      请求的方式(type)：GET/POST</span></span><br><span class="line"><span class="comment">     *      请求的URL(url)：url</span></span><br><span class="line"><span class="comment">     *      请求时提交的数据(data)：data</span></span><br><span class="line"><span class="comment">     *      请求时发送异步请求还是同步请求(async)：true表示异步，false表示同步。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jQuery.<span class="property">ajax</span> = <span class="keyword">function</span>(<span class="params">jsonArgs</span>)&#123;</span><br><span class="line">        <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="comment">// 我们这个工具类在封装的时候，先不考虑那么多，假设服务器返回的都是json格式的字符串。</span></span><br><span class="line">                    <span class="keyword">var</span> jsonObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">responseText</span>)</span><br><span class="line">                    <span class="comment">// 调用函数</span></span><br><span class="line">                    jsonArgs.<span class="title function_">success</span>(jsonObj)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, jsonArgs.<span class="property">url</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            <span class="comment">// 4.</span></span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>(jsonArgs.<span class="property">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsonArgs.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, jsonArgs.<span class="property">url</span> + <span class="string">&quot;?&quot;</span> + jsonArgs.<span class="property">data</span>, jsonArgs.<span class="property">async</span>)</span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里有个细节，执行这个目的是为了让静态方法ajax生效。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">jQuery</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用以上库，怎么用？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/ajax/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#btn1&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                type : <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                url : <span class="string">&quot;/ajax/ajaxrequest11&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                data : <span class="string">&quot;username=&quot;</span> + $(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">async</span> : <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                success : <span class="keyword">function</span>(<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#div1&quot;</span>).<span class="title function_">html</span>(json.<span class="property">uname</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="AJAX实现省市联动"><a href="#AJAX实现省市联动" class="headerlink" title="AJAX实现省市联动"></a>AJAX实现省市联动</h2><ul><li><p>什么是省市联动？</p><ul><li>在网页上，选择对应的省份之后，动态的关联出该省份对应的市。选择对应的市之后，动态的关联出该市对应的区。（首先要清楚需求）</li></ul></li><li><p>进行数据库表的设计</p><ul><li><pre><code>t_area （区域表）id(PK-自增)  codenamepcode---------------------------------------------1001 河北省null2002 河南省null3003 石家庄    0014004 邯郸 0015005 郑州 0026006 洛阳 0027007 丛台区    004  将全国所有的省、市、区、县等信息都存储到一张表当中。采用的存储方式实际上是code pcode形势。</code></pre></li></ul></li><li><p>建表t_area，模拟好数据。</p></li><li><p>首先实现第一个功能：</p><ul><li>页面加载完毕之后，先把省份全部展现出来。</li></ul></li></ul><h2 id="AJAX跨域问题"><a href="#AJAX跨域问题" class="headerlink" title="AJAX跨域问题"></a>AJAX跨域问题</h2><h2 id="AJAX实现搜索联想-自动补全"><a href="#AJAX实现搜索联想-自动补全" class="headerlink" title="AJAX实现搜索联想 自动补全"></a>AJAX实现搜索联想 自动补全</h2><h2 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h2><h3 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td></tr></tbody></table><h3 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">200 OK</td><td align="left">请求成功（其后是对GET和POST请求的应答文档。）</td></tr><tr><td align="left">201 Created</td><td align="left">请求被创建完成，同时新的资源被创建。</td></tr><tr><td align="left">202 Accepted</td><td align="left">供处理的请求已被接受，但是处理未完成。</td></tr><tr><td align="left">203 Non-authoritative Information</td><td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。</td></tr><tr><td align="left">204 No Content</td><td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td align="left">205 Reset Content</td><td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td></tr><tr><td align="left">206 Partial Content</td><td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它。</td></tr></tbody></table><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">300 Multiple Choices</td><td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">所请求的页面已经转移至新的url。</td></tr><tr><td align="left">302 Found</td><td align="left">所请求的页面已经临时转移至新的url。</td></tr><tr><td align="left">303 See Other</td><td align="left">所请求的页面可在别的url下被找到。</td></tr><tr><td align="left">304 Not Modified</td><td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td align="left">305 Use Proxy</td><td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取。</td></tr><tr><td align="left">306 <em>Unused</em></td><td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留。</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">被请求的页面已经临时移至新的url。</td></tr></tbody></table><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">400 Bad Request</td><td align="left">服务器未能理解请求。</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">被请求的页面需要用户名和密码。</td></tr><tr><td align="left">402 Payment Required</td><td align="left">此代码尚无法使用。</td></tr><tr><td align="left">403 Forbidden</td><td align="left">对被请求页面的访问被禁止。</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器无法找到被请求的页面。</td></tr><tr><td align="left">405 Method Not Allowed</td><td align="left">请求中指定的方法不被允许。</td></tr><tr><td align="left">406 Not Acceptable</td><td align="left">服务器生成的响应无法被客户端所接受。</td></tr><tr><td align="left">407 Proxy Authentication Required</td><td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td></tr><tr><td align="left">408 Request Timeout</td><td align="left">请求超出了服务器的等待时间。</td></tr><tr><td align="left">409 Conflict</td><td align="left">由于冲突，请求无法被完成。</td></tr><tr><td align="left">410 Gone</td><td align="left">被请求的页面不可用。</td></tr><tr><td align="left">411 Length Required</td><td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求。</td></tr><tr><td align="left">412 Precondition Failed</td><td align="left">请求中的前提条件被服务器评估为失败。</td></tr><tr><td align="left">413 Request Entity Too Large</td><td align="left">由于所请求的实体的太大，服务器不会接受请求。</td></tr><tr><td align="left">414 Request-url Too Long</td><td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。</td></tr><tr><td align="left">415 Unsupported Media Type</td><td align="left">由于媒介类型不被支持，服务器不会接受请求。</td></tr><tr><td align="left">416</td><td align="left">服务器不能满足客户在请求中指定的Range头。</td></tr><tr><td align="left">417 Expectation Failed</td><td align="left"></td></tr></tbody></table><h3 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h3><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">500 Internal Server Error</td><td align="left">请求未完成。服务器遇到不可预知的情况。</td></tr><tr><td align="left">501 Not Implemented</td><td align="left">请求未完成。服务器不支持所请求的功能。</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">请求未完成。服务器从上游服务器收到一个无效的响应。</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">请求未完成。服务器临时过载或当机。</td></tr><tr><td align="left">504 Gateway Timeout</td><td align="left">网关超时。</td></tr><tr><td align="left">505 HTTP Version Not Supported</td><td align="left">服务器不支持请求中指明的HTTP协议版本。</td></tr></tbody></table><h2 id="axios快速入门"><a href="#axios快速入门" class="headerlink" title="axios快速入门"></a>axios快速入门</h2><p><img src="image-20230120163756256.png" alt="image-20230120163756256"></p><p><img src="image-20230120164529734.png" alt="image-20230120164529734"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Filter</title>
      <link href="/2023/01/19/Filter/"/>
      <url>/2023/01/19/Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p><img src="image-20230119125824192.png" alt="我tm加载不出来啊"></p><h2 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h2><p><img src="image-20230120122244978.png" alt="image-20230120122244978"></p><h3 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h3><p>在@webFilter(“”)上面操作</p><p><img src="image-20230120123021934.png" alt="image-20230120123021934"></p><h3 id="过滤链"><a href="#过滤链" class="headerlink" title="过滤链"></a>过滤链</h3><p><img src="image-20230120123317560.png" alt="image-20230120123317560"></p><p><img src="image-20230120124058516.png" alt="image-20230120124058516"></p><h2 id="Filter案例：登陆验证"><a href="#Filter案例：登陆验证" class="headerlink" title="Filter案例：登陆验证"></a>Filter案例：登陆验证</h2><p><img src="image-20230120125138161.png" alt="image-20230120125138161"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于搭建博客的坑</title>
      <link href="/2023/01/10/%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9D%91/"/>
      <url>/2023/01/10/%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="关于博客搭建的坑"><a href="#关于博客搭建的坑" class="headerlink" title="关于博客搭建的坑"></a>关于博客搭建的坑</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客的搭建很快乐，但是也充满挑战，一个不仔细就会导致整个博客的重来所以我这里整理了我搭建博客以来踩过的坑，可能问题会有的比较杂乱，大家根据自己的问题来看，以此让大家少走弯路争取一次性搭出来。</p><h2 id="初始博客的搭建"><a href="#初始博客的搭建" class="headerlink" title="初始博客的搭建"></a>初始博客的搭建</h2><p>详细教程可以去看水哥教程的几乎讲的很详细了—-&gt;<a href="https://sanshui.vip/jc/">https://sanshui.vip/jc/</a></p><h2 id="node-js的配置"><a href="#node-js的配置" class="headerlink" title="node.js的配置"></a>node.js的配置</h2><p>当你看完node.js配置的时候</p><p><a href="https://www.cnblogs.com/liuqiyun/p/8133904.html%EF%BC%88%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%89">https://www.cnblogs.com/liuqiyun/p/8133904.html（这篇文章）</a></p><p>发现执行<strong>npm install express -g</strong>,报了如下图的错误的时候</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/ngdukd-2.png" alt="image-20221129141821839"></p><p>就将cmd以管理的身份运行即可</p><p>还有一种情况就是当你进入某个文件中使用cmd，执行npm命令的时候还是报错，那么就找到你的node.js文件夹，右键属性—&gt;</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/uhlpfg-2.png" alt="image-20221129142422369"></p><p>高级—-&gt;选中他修改它的权限</p><p><img src="http://8.137.11.22/i/2022/11/29/nl0fjz-2.png" alt="image-20221129142545181"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/nkr8uq-2.png" alt="image-20221129142521888"></p><p>就能执行后续的命令。</p><h2 id="webstorm的启动"><a href="#webstorm的启动" class="headerlink" title="webstorm的启动"></a>webstorm的启动</h2><p>当在webstorm调用<strong>hexo s</strong>的命令报错的话，你就需要到开发者选项中找到powershell</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/nu3x94-2.png" alt="image-20221129144128444"></p><p>把这个 √  给勾上点击应用，就能在webstorm上启动博客了</p><h2 id="魔改博客的坑"><a href="#魔改博客的坑" class="headerlink" title="魔改博客的坑"></a>魔改博客的坑</h2><p>毕竟如果只是光搭建好了这个博客，效果就只是如下图而已，</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/nxn731-2.png" alt="image-20220801234836437"></p><p>肯定是不能满足广大博主那颗爱美的心</p><p>所以<strong>魔改</strong>就应运而生了，当然要魔改之前肯定是要装上一个新的主题的</p><p>这个主题就是广大博主喜爱的并且好用的butterfly了。</p><p>这是他的官方文档<a href="https://butterfly.js.org/posts/21cfbf15/%EF%BC%88%E6%9C%80%E5%A5%BD%E6%98%AF%E6%A0%B9%E6%8D%AE%E6%96%87%E6%A1%A3%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E6%9D%A5,%E4%B8%8D%E8%A6%81%E8%B7%B3%E7%9D%80%E7%9C%8B,%E6%8C%89%E9%9C%80%E6%9B%B4%E6%94%B9%EF%BC%89">https://butterfly.js.org/posts/21cfbf15/（最好是根据文档一步一步来,不要跳着看,按需更改）</a></p><p>建议安装的时候用Git安装因为他会直接在你的Hexo 根目录里themes 生成主题文件。这样你找的时候或者魔改的时候也比较方便。不建议用npm安装，通过 npm 安装并不会在 themes 里生成主题文件夹，而是在 node_modules 里生成。</p><h4 id="关于CV别人css样式后有的地方爆红的问题"><a href="#关于CV别人css样式后有的地方爆红的问题" class="headerlink" title="关于CV别人css样式后有的地方爆红的问题"></a><strong>关于CV别人css样式后有的地方爆红的问题</strong></h4><p>爆红可以不用管因为，你可能没有别人的那种样式，但是博客是可以正常打开的，同时后期也可以自己更改</p><h4 id="关于魔改要注意的事情"><a href="#关于魔改要注意的事情" class="headerlink" title="关于魔改要注意的事情"></a><strong>关于魔改要注意的事情</strong></h4><p>首先魔改是有风险的，建议每次在改动后就马上去试试看看有没有效果，如果报错或者没有效果，那么就赶紧还原上一步，并且要记得做好备份，不然你改着改着突然想试试发现报错，这个时候估计你自己可能都不知道是改的那里出了问题，并且在改的时候有的功能是需要装依赖的，不然你开启之后也是会报错的。如下图</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/ulqduj-2.png" alt="image-20221129185047942"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/um3udp-2.png" alt="image-20221129185110990"></p><p><strong>最后切记切记一定要备份</strong>。</p><h4 id="关于aplayer换歌单的坑"><a href="#关于aplayer换歌单的坑" class="headerlink" title="关于aplayer换歌单的坑"></a>关于aplayer换歌单的坑</h4><p>如果你把别人歌单的id粘过来后发现没有生效，<strong>那么就看看你是不是用的是别人的喜欢的歌，而不是歌单</strong>，因为只有歌单这个插件才能生效</p><p>如下图就是不会生效的</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/upuc8m-2.png" alt="image-20221129185737177"></p><h2 id="关于上传博客的坑"><a href="#关于上传博客的坑" class="headerlink" title="关于上传博客的坑"></a>关于上传博客的坑</h2><p>在魔改完后，相信大家都把博客弄成了自己喜欢的样式，肯定都迫不及待的要上传了，我们就看看上传可能遇到的问题</p><p>当我们装好 hexo-deployer-git 自动部署发布工具    &#x3D;&#x3D;&gt;（npm install hexo-deployer-git –save）安装命令</p><p>当我们执行  git config –global user.name “你GitHub账号的名字”，或者  git config –global user.email “你GitHub账号的邮箱”。</p><p>可能会出现下图的如下情况</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/vq9zfg-2.png" alt="image-20221129191742543"></p><p>这个时候可以找到git的安装目录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/13704/w3vo47-2.png" alt="image-20221129194130944">打开git-cmd，在输入以上命令，注意要先输入邮箱在输入名字，然后在进行后续的步骤</p><p>注意命令中git config –global user.email 的–global是 <strong>“- -“</strong> 而不是  <strong>—</strong> ,这是两条杠不是一条杠</p><p>不然也会报错</p><h2 id="关于上传到github博客没有改动样式没有生效的原因"><a href="#关于上传到github博客没有改动样式没有生效的原因" class="headerlink" title="关于上传到github博客没有改动样式没有生效的原因"></a>关于上传到github博客没有改动样式没有生效的原因</h2><p>先检查一下hexo的配置文件中，GitHub地址是否正确，并且branch中填入的是<strong>main</strong>而不是master</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">你的github地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>这样做，意思是将hexo部署到了master分支。前段时间GitHub已经将仓库的默认分支改为了main，所以这样仓库里有两个分支，一个main一个master，而main才是“active”分支，博客页面所在的分支还是main分支。两个分支的内容截然不同，修改之后的博客代码文件更新在了master分支，而main分支保留的仍然是最开始未修改的文件。</p><p>以上就是我遇到的所以的坑了，希望可以帮助到大家</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进击科目二</title>
      <link href="/2023/01/04/%E8%BF%9B%E5%87%BB%E7%A7%91%E7%9B%AE%E4%BA%8C/"/>
      <url>/2023/01/04/%E8%BF%9B%E5%87%BB%E7%A7%91%E7%9B%AE%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="科目二的感受："><a href="#科目二的感受：" class="headerlink" title="科目二的感受："></a>科目二的感受：</h1><h4 id="今天学科目二（第二节课），是我第二次上车，但还是有点紧张，与其说是紧张不如说是菜哈哈，不过上车我至少记得了先弄座位啥的，但是忘记安全带了，所以下次一定要做的更好。以下是总结："><a href="#今天学科目二（第二节课），是我第二次上车，但还是有点紧张，与其说是紧张不如说是菜哈哈，不过上车我至少记得了先弄座位啥的，但是忘记安全带了，所以下次一定要做的更好。以下是总结：" class="headerlink" title="今天学科目二（第二节课），是我第二次上车，但还是有点紧张，与其说是紧张不如说是菜哈哈，不过上车我至少记得了先弄座位啥的，但是忘记安全带了，所以下次一定要做的更好。以下是总结："></a>今天学科目二（第二节课），是我第二次上车，但还是有点紧张，与其说是紧张不如说是菜哈哈，不过上车我至少记得了先弄座位啥的，但是忘记安全带了，所以下次一定要做的更好。以下是总结：</h4><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><h4 id="1-上车后先系安全带，以防被教练叼。"><a href="#1-上车后先系安全带，以防被教练叼。" class="headerlink" title="1.上车后先系安全带，以防被教练叼。"></a>1.上车后先系安全带，以防被教练叼。</h4><h4 id="2-系好安全带后，调节座位前后，让脚能够很舒服的踩在离合上。"><a href="#2-系好安全带后，调节座位前后，让脚能够很舒服的踩在离合上。" class="headerlink" title="2.系好安全带后，调节座位前后，让脚能够很舒服的踩在离合上。"></a>2.系好安全带后，调节座位前后，让脚能够很舒服的踩在离合上。</h4><h4 id="3-调节座位高度，使头部与车顶只有一拳头之差。"><a href="#3-调节座位高度，使头部与车顶只有一拳头之差。" class="headerlink" title="3.调节座位高度，使头部与车顶只有一拳头之差。"></a>3.调节座位高度，使头部与车顶只有一拳头之差。</h4><h4 id="4-调节座位角度，让双手放在方向盘上，让方向盘能够正好够到手腕。"><a href="#4-调节座位角度，让双手放在方向盘上，让方向盘能够正好够到手腕。" class="headerlink" title="4.调节座位角度，让双手放在方向盘上，让方向盘能够正好够到手腕。"></a>4.调节座位角度，让双手放在方向盘上，让方向盘能够正好够到手腕。</h4><h4 id="5-（今天的重点）调节俩个后视镜，很重要，左边的后视镜要路和车都占1-x2F-2，车把手对着后视镜角，要微微能够看到车轮（车轮边也行），右边的后视镜要路面占2-x2F-3，车把手对着后视镜角，要把车屁股遮住一个角。"><a href="#5-（今天的重点）调节俩个后视镜，很重要，左边的后视镜要路和车都占1-x2F-2，车把手对着后视镜角，要微微能够看到车轮（车轮边也行），右边的后视镜要路面占2-x2F-3，车把手对着后视镜角，要把车屁股遮住一个角。" class="headerlink" title="5.（今天的重点）调节俩个后视镜，很重要，左边的后视镜要路和车都占1&#x2F;2，车把手对着后视镜角，要微微能够看到车轮（车轮边也行），右边的后视镜要路面占2&#x2F;3，车把手对着后视镜角，要把车屁股遮住一个角。"></a>5.（今天的重点）调节俩个后视镜，很重要，左边的后视镜要路和车都占1&#x2F;2，车把手对着后视镜角，要微微能够看到车轮（车轮边也行），右边的后视镜要路面占2&#x2F;3，车把手对着后视镜角，要把车屁股遮住一个角。</h4><h4 id="6-双脚分别踩死离合，刹车，然后扭动发动机钥匙，拉手刹，挂挡（离合别松）。"><a href="#6-双脚分别踩死离合，刹车，然后扭动发动机钥匙，拉手刹，挂挡（离合别松）。" class="headerlink" title="6.双脚分别踩死离合，刹车，然后扭动发动机钥匙，拉手刹，挂挡（离合别松）。"></a>6.双脚分别踩死离合，刹车，然后扭动发动机钥匙，拉手刹，挂挡（离合别松）。</h4><h4 id="7-然后上路，记住离合一定要把握在车刚刚好震动往前的感觉，我就老是控制不好，导致弹射起步。"><a href="#7-然后上路，记住离合一定要把握在车刚刚好震动往前的感觉，我就老是控制不好，导致弹射起步。" class="headerlink" title="7.然后上路，记住离合一定要把握在车刚刚好震动往前的感觉，我就老是控制不好，导致弹射起步。"></a>7.然后上路，记住离合一定要把握在车刚刚好震动往前的感觉，我就老是控制不好，导致弹射起步。</h4><h4 id="8-（今天的重点）车头左边的角要是压线了，说明真快压线了。。。。车头右边的压线则是看雨刷器（教练说的），保持线尽量在雨刷器的中间或靠右边，如果过了雨刷器往左边，说明要压线了，这样会扣完分的。。。开车的时候就要尽量这样看着，同时也要多培养看俩个后视镜（不过会调后视镜后就感觉舒服了很多）重点还是要踩好刹车和离合。。"><a href="#8-（今天的重点）车头左边的角要是压线了，说明真快压线了。。。。车头右边的压线则是看雨刷器（教练说的），保持线尽量在雨刷器的中间或靠右边，如果过了雨刷器往左边，说明要压线了，这样会扣完分的。。。开车的时候就要尽量这样看着，同时也要多培养看俩个后视镜（不过会调后视镜后就感觉舒服了很多）重点还是要踩好刹车和离合。。" class="headerlink" title="8.（今天的重点）车头左边的角要是压线了，说明真快压线了。。。。车头右边的压线则是看雨刷器（教练说的），保持线尽量在雨刷器的中间或靠右边，如果过了雨刷器往左边，说明要压线了，这样会扣完分的。。。开车的时候就要尽量这样看着，同时也要多培养看俩个后视镜（不过会调后视镜后就感觉舒服了很多）重点还是要踩好刹车和离合。。"></a>8.（今天的重点）车头左边的角要是压线了，说明真快压线了。。。。车头右边的压线则是看雨刷器（教练说的），保持线尽量在雨刷器的中间或靠右边，如果过了雨刷器往左边，说明要压线了，这样会扣完分的。。。开车的时候就要尽量这样看着，同时也要多培养看俩个后视镜（不过会调后视镜后就感觉舒服了很多）重点还是要踩好刹车和离合。。</h4><p>​    #### 1.7科目二：</p><h5 id="感觉今天踩的离合和刹车没有上次这么离谱，而且遇到了个和我说话的人。教了我一点东西，他说他也是学十二节课就考试。我寻思着我好像也是啊哈哈。这是我的第三节课，这次主要学了曲线弯路和上斜坡还有直角转弯。希望下次能够解决这些问题。"><a href="#感觉今天踩的离合和刹车没有上次这么离谱，而且遇到了个和我说话的人。教了我一点东西，他说他也是学十二节课就考试。我寻思着我好像也是啊哈哈。这是我的第三节课，这次主要学了曲线弯路和上斜坡还有直角转弯。希望下次能够解决这些问题。" class="headerlink" title="感觉今天踩的离合和刹车没有上次这么离谱，而且遇到了个和我说话的人。教了我一点东西，他说他也是学十二节课就考试。我寻思着我好像也是啊哈哈。这是我的第三节课，这次主要学了曲线弯路和上斜坡还有直角转弯。希望下次能够解决这些问题。"></a>感觉今天踩的离合和刹车没有上次这么离谱，而且遇到了个和我说话的人。教了我一点东西，他说他也是学十二节课就考试。我寻思着我好像也是啊哈哈。这是我的第三节课，这次主要学了曲线弯路和上斜坡还有直角转弯。希望下次能够解决这些问题。</h5><h2 id="曲线弯路：（我今天最大的问题就是转弯的时候离合速度不太好，加上打方向盘老是打太多（我怕转不过来主要是，明天直接打少一点））"><a href="#曲线弯路：（我今天最大的问题就是转弯的时候离合速度不太好，加上打方向盘老是打太多（我怕转不过来主要是，明天直接打少一点））" class="headerlink" title="曲线弯路：（我今天最大的问题就是转弯的时候离合速度不太好，加上打方向盘老是打太多（我怕转不过来主要是，明天直接打少一点））"></a>曲线弯路：（我今天最大的问题就是转弯的时候离合速度不太好，加上打方向盘老是打太多（我怕转不过来主要是，明天直接打少一点））</h2><p>​                          1.在开进去弯道前，先往左打一点点，等车头没入线了之后迅速打右大概一圈多一点点。</p><p>​                          2.然后等左边车头线压住<strong>黄线</strong>了就<strong>回正</strong>。然后看<strong>左边的蓝点（多看也许下次就没了）</strong>压在黄线上时迅速<strong>打左一圈</strong>先，然后 看看情况，如果点偏出就打多一点，不偏就不动甚至打少一点，</p><p>​                         3.然后还是等蓝点压在黄线上时迅速<strong>回正</strong>然后<strong>看右边的绿点</strong>等绿点压在黄色线上时往右边打一圈，然后看情况，看看压不压线。如果没啥问题就大概可以过曲线弯路了。</p><hr><h3 id="上斜坡："><a href="#上斜坡：" class="headerlink" title="上斜坡："></a>上斜坡：</h3><p>​                         上斜坡我的<strong>最大问题就是停不准地方，而且老是导致死火</strong>，别的都还一般（起码上节课的下坡刹车能够踩好了）。下次我上坡的时候就应该<strong>在右边快到右边雨刷器后一点点的地方</strong>时就<strong>先踩死离合</strong>，然后在<strong>踩死刹车</strong>，然后<strong>拉手刹（等三秒）</strong>后先<strong>松开离合（慢慢松开）</strong>等到动力够了就松开刹车，往前开。然后控制好离合和刹车就好了</p><h3 id="直角转弯："><a href="#直角转弯：" class="headerlink" title="直角转弯："></a>直角转弯：</h3><p>​                           直角转弯没啥好说的，感觉还行，就是要<strong>在黄线与左边车门把手的扣扣对齐时</strong>向转弯的方向打满就好（离合控慢车速，打方向要快）就可以了。</p><h3 id="侧方停车：（1-8）"><a href="#侧方停车：（1-8）" class="headerlink" title="侧方停车：（1.8）"></a>侧方停车：（1.8）</h3><p>​          侧方停车，先看<strong>右边雨刷器，对齐右边黄线</strong>，然后等到开到<strong>左边的俩线空格在左门把手后面</strong>的时候，停车，<strong>踩死离合，挂倒挡</strong>向后倒车，然后<strong>看右边的镜子</strong>等到淹没右边的直角线的时候，<strong>向右打满</strong>，等看到<strong>左边进入库角的时候回正</strong>然后看左边车轮，<strong>压黄色虚线的时候，向左打满</strong>然后等到入库，右边镜子的车门与线平行的时候就停车。</p><p>​    停车后，<strong>先打左转向灯</strong>然后在<strong>踩死离合，挂挡</strong>，<strong>等车开出库角时，回正</strong>，，等到车头淹没那个俩线空格的时候，向右边转弯。就好了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java web</title>
      <link href="/2023/01/03/Java%20Web/"/>
      <url>/2023/01/03/Java%20Web/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaWeb介绍"><a href="#JavaWeb介绍" class="headerlink" title="JavaWeb介绍"></a>JavaWeb介绍</h2><h3 id="什么是JavaWeb"><a href="#什么是JavaWeb" class="headerlink" title="什么是JavaWeb?"></a>什么是JavaWeb?</h3><ul><li>Web:全球广域网，也称为万维网(www),能够通过浏览器访问的<strong>网站</strong></li><li>JavaWeb:是用Java技术来解决相关web互联网领域的技术栈</li></ul><p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002214228510.png" alt="image-20221002214228510"></p><p>1.网页：展现数据<br>2.数据库：存储和管理数据<br>3.JavaWeb程序：逻辑处理</p><h3 id="Javaweb整体框架"><a href="#Javaweb整体框架" class="headerlink" title="Javaweb整体框架"></a>Javaweb整体框架</h3><p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/JavaWeb.png" alt="JavaWeb"></p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="一-Maven作用"><a href="#一-Maven作用" class="headerlink" title="一.Maven作用"></a>一.Maven作用</h4><p>Maven是专门用于管理和构建ava项目的工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程(编译，测试，打包，发布)</li><li>提供了一套依赖管理机制</li></ul><h5 id="1-标准化的项目结构"><a href="#1-标准化的项目结构" class="headerlink" title="1.标准化的项目结构"></a>1.标准化的项目结构</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002215725794.png" alt="image-20221002215725794"></p><p><strong>不同的ide之间,项目结构不一样,不通用</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002215956893.png" alt="image-20221002215956893"></p><p><strong>Maven提供了一套标准化的项目结构，所有lDE使用Maven构建的项目结构完全一样，所有IDE创建的Maven.项目可以通用</strong></p><h5 id="2-标准化构建流程"><a href="#2-标准化构建流程" class="headerlink" title="2.标准化构建流程"></a>2.标准化构建流程</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002220154661.png" alt="image-20221002220154661"></p><p>Maven提供了一套简单的命令来完成项目构建</p><h5 id="3-依赖管理机制"><a href="#3-依赖管理机制" class="headerlink" title="3.依赖管理机制"></a>3.依赖管理机制</h5><p>依赖管理其实就是管理你项目所依赖的第三方资源(G包、插件.…)</p><p>以前的导入依赖</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002220416091.png" alt="image-20221002220416091"></p><p>通过Maven导入依赖</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002220535056.png" alt="image-20221002220535056"></p><p>1.Maven使用标准的坐标配置来管理各种依赖<br>2.只需要简单的配置就可以完成依赖管理</p><h4 id="二-Maven简介"><a href="#二-Maven简介" class="headerlink" title="二.Maven简介"></a>二.Maven简介</h4><p><strong>Apache Maven</strong>是一个项目管理和构建<strong>工具</strong>，它基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档</p><p>官网：http:&#x2F;maven.apache.org</p><h5 id="1-Maven模型"><a href="#1-Maven模型" class="headerlink" title="1.Maven模型"></a>1.Maven模型</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002221331353.png" alt="image-20221002221331353"></p><ul><li>项目对象模型(Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>插件Plugin)</li></ul><h5 id="2-Maven仓库"><a href="#2-Maven仓库" class="headerlink" title="2.Maven仓库"></a>2.Maven仓库</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002221849751.png" alt="image-20221002221849751"></p><ul><li><p>本地仓库：自己计算机上的一个目录</p></li><li><p>中央仓库：由Maven团队维护的全球唯一的仓库</p><p>​地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></p></li><li><p>远程仓库（私服）：一般由公司团队搭建的私有仓库</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002222701718.png" alt="image-20221002222701718"></p><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包：<br>如果有，则在项目直接引用；<br>如果没有，则去中央仓库中下载对应的jar包到本地仓库。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002223351311.png" alt="image-20221002223351311"></p><p>还可以搭建远程仓库，将来jar包的查找顺序则变为：<br>本地仓库→远程仓库→中央仓库</p><h4 id="三-Maven的安装-amp-配置及基本使用"><a href="#三-Maven的安装-amp-配置及基本使用" class="headerlink" title="三.Maven的安装&amp;配置及基本使用"></a>三.Maven的安装&amp;配置及基本使用</h4><h5 id="1-安装及配置"><a href="#1-安装及配置" class="headerlink" title="1.安装及配置"></a>1.安装及配置</h5><p>1.解压apache-maven-3.6.1.rar既安装完成<br>2.配置环境变量MAVEN HOME为安装路径的bin目录<br>3.配置本地仓库：修改conf&#x2F;settings.xml中的<localRepository>为一个指定目录<br>4.配置阿里云私服：修改conf&#x2F;settings.Xml中的<mirrors>标签，为其添加如下子标签：</mirrors></localRepository></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-Maven基本使用"><a href="#2-Maven基本使用" class="headerlink" title="2.Maven基本使用"></a>2.Maven基本使用</h5><h6 id="2-1常用命令"><a href="#2-1常用命令" class="headerlink" title="2.1常用命令"></a>2.1常用命令</h6><ul><li>compile：编译</li><li>clean:清理</li><li>test:测试</li><li>package:打包</li><li>install:安装</li></ul><h6 id="2-2Maven生命周期"><a href="#2-2Maven生命周期" class="headerlink" title="2.2Maven生命周期"></a>2.2Maven生命周期</h6><p>Maven构建项目生命周期描述的是一次构建过程经历经历了多少个事件</p><p>Maven对项目构建的生命周期划分为3套</p><ul><li>clean:清理工作</li><li>default:核心工作，例如编译，测试，打包，安装等</li><li>site产生报告，发布站点等</li></ul><p><strong>同一生命周期内，执行后边的命令，前边的所有命令会自动执行</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003143311665.png" alt="image-20221003143311665"></p><h4 id="四-IDEA配置Maven"><a href="#四-IDEA配置Maven" class="headerlink" title="四.IDEA配置Maven"></a>四.IDEA配置Maven</h4><h5 id="1-IDEA配置Maven环境"><a href="#1-IDEA配置Maven环境" class="headerlink" title="1.IDEA配置Maven环境"></a>1.IDEA配置Maven环境</h5><ol><li>选择IDEA中File-&gt;Settings</li><li>搜索maven</li><li>设置IDEA使用本地安装的Maven,并修改配置文件路径</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003144630939.png" alt="image-20221003144630939"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003145156489.png" alt="image-20221003145156489"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003145133214.png" alt="image-20221003145133214"></p><h5 id="2-Maven坐标详解"><a href="#2-Maven坐标详解" class="headerlink" title="2.Maven坐标详解"></a>2.Maven坐标详解</h5><h6 id="2-1坐标"><a href="#2-1坐标" class="headerlink" title="2.1坐标:"></a>2.1坐标:</h6><ul><li>Maven中的坐标是资源的唯一标识I</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><h6 id="2-2Maven坐标主要组成"><a href="#2-2Maven坐标主要组成" class="headerlink" title="2.2Maven坐标主要组成"></a>2.2Maven坐标主要组成</h6><ul><li>groupld:定义当前Maven.项目隶属组织名称（通常是域名反写，例如：com.itheima)</li><li>artifactld:定义当前Maven项目名称（通常是模块名称，例如order–service、goods-service)</li><li>version:定义当前项目版本号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-IDEA创建Maven项目"><a href="#3-IDEA创建Maven项目" class="headerlink" title="3.IDEA创建Maven项目"></a>3.IDEA创建Maven项目</h5><p>1.创建模块，选择Maven,点击Next<br>2.填写模块名称，坐标信息，点击finish,创建完成<br>3.编写HelloWorld,并运行</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003153426773.png" alt="image-20221003153426773"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003153604046.png" alt="image-20221003153604046"></p><h5 id="4-IDEA导入Maven项目"><a href="#4-IDEA导入Maven项目" class="headerlink" title="4.IDEA导入Maven项目"></a>4.IDEA导入Maven项目</h5><h6 id="4-1-导入"><a href="#4-1-导入" class="headerlink" title="4.1.导入"></a>4.1.导入</h6><p>1.选择右侧Maveni面板，点击+号<br>2.选中对应项目的pom.xml文件，双击即可<br>3.如果没有Maven面板，选择View→Appearance→Tool Window Bars</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/uTools_1664783221554.png" alt="uTools_1664783221554"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/uTools_1664783259299.png" alt="uTools_1664783259299"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003154825413.png" alt="image-20221003154825413"></p><h4 id="五-依赖管理"><a href="#五-依赖管理" class="headerlink" title="五.依赖管理"></a>五.依赖管理</h4><h5 id="1-使用坐标导入jar包"><a href="#1-使用坐标导入jar包" class="headerlink" title="1.使用坐标导入jar包"></a>1.使用坐标导入jar包</h5><p>1.在pom.xml中编写<dependencies>:标签<br>2.在<dependencies>标签中使用<dependency>引入坐标<br>3.定义坐标的groupld,artifactld,version<br>4.点击刷新按钮，使坐标生效</dependency></dependencies></dependencies></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003211227798.png" alt="image-20221003211227798"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003211245410.png" alt="image-20221003211245410"></p><h5 id="2-依赖范围"><a href="#2-依赖范围" class="headerlink" title="2.依赖范围"></a>2.依赖范围</h5><p>通过设置坐标的依赖范围(scope),可以设置对应jar包的作用范围：编译环境、测试环境、运行环境</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221003211354689.png" alt="image-20221003211354689"></p><table><thead><tr><th>依赖范围</th><th align="center">编译classpath</th><th align="center">测试classpath</th><th align="center">运行classpath</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td>logback</td></tr><tr><td>test</td><td align="center">-</td><td align="center">Y</td><td align="center">-</td><td>Junit</td></tr><tr><td>provided</td><td align="center">Y</td><td align="center">Y</td><td align="center">-</td><td>servlet-api</td></tr><tr><td>runtime</td><td align="center">-</td><td align="center">Y</td><td align="center">Y</td><td>jdbc驱动</td></tr><tr><td>system</td><td align="center">Y</td><td align="center">Y</td><td align="center">-</td><td>存储在本地的jar包</td></tr><tr><td>import</td><td align="center">引入</td><td align="center">Dependency</td><td align="center">Manage</td><td>ment</td></tr></tbody></table><p><scope>:默认值：compile</scope></p><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><h4 id="一-MyBatis简介"><a href="#一-MyBatis简介" class="headerlink" title="一.MyBatis简介"></a>一.MyBatis简介</h4><h5 id="1-什么是MyBatis"><a href="#1-什么是MyBatis" class="headerlink" title="1.什么是MyBatis"></a>1.什么是MyBatis</h5><ul><li>MyBatis是一款优秀的<strong>持久层框架</strong>，用于简化 JDBC 开发</li><li>MyBatis本是Apache的一个开源项目iBatis,2010年这个项目由apache software<br>foundation迁移到了google code,并且改名为MyBatis。2013年11月迁移到Github</li><li>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul><h5 id="2-持久层"><a href="#2-持久层" class="headerlink" title="2.持久层"></a>2.持久层</h5><ul><li>负责将数据到保存到数据的那一层代码</li><li>JavaEE三层架构：表现层、业务层、持久层</li></ul><h5 id="3-框架"><a href="#3-框架" class="headerlink" title="3.框架"></a>3.框架</h5><ul><li>框架就是一个半成品软件，是一套可重用的、通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><h4 id="二-MyBatis简化"><a href="#二-MyBatis简化" class="headerlink" title="二.MyBatis简化"></a>二.MyBatis简化</h4><h5 id="1-JDBC缺点"><a href="#1-JDBC缺点" class="headerlink" title="1.JDBC缺点"></a>1.JDBC缺点</h5><p>1.硬编码</p><blockquote><p>注册驱动，获取连接<br>SQL语句</p></blockquote><p>2.操作繁琐</p><blockquote><p>手动设置参数<br>手动封装结果集</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取Connection.连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql:///db1?useSSL=false&quot;</span>;</span><br><span class="line">String uname <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span><span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,uname,pwd);</span><br><span class="line">∥接收输入的查询条件</span><br><span class="line">String gender=<span class="string">&quot;男&quot;</span>；</span><br><span class="line">∥定义sql</span><br><span class="line">String sql <span class="string">&quot;select from tb_user where gender = ?&quot;</span>;</span><br><span class="line">∥获取pstmt对象</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span>  conn.prepareStatement(sql);</span><br><span class="line">∥设置?的值</span><br><span class="line">pstmt.setString(<span class="number">1</span>,gender);</span><br><span class="line">∥执行sql</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br><span class="line">∥遍历Result,获取数据</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ArrayList&lt;User&gt;users <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()&#123;</span><br><span class="line">∥获取数据</span><br><span class="line">    <span class="type">int</span> id rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    ∥创建对象，设置属性值</span><br><span class="line">    user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setld(id);</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line">    user.setGender(gender);</span><br><span class="line">    ∥装入集合</span><br><span class="line">    users.add(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>MyBatis免除了几乎所有的JDBC代码</strong><br>​<strong>以及设置参数和获取结果集的工作</strong></p><h4 id="三-MyBatis快速入门"><a href="#三-MyBatis快速入门" class="headerlink" title="三.MyBatis快速入门"></a>三.MyBatis快速入门</h4><h5 id="1-查询user表中所有数据"><a href="#1-查询user表中所有数据" class="headerlink" title="1.查询user表中所有数据"></a>1.查询user表中所有数据</h5><p>1.创建user表，添加数据</p><p>2.创建模块，导入坐标</p><p>3.编写小yBatis核心配置文件-&gt;替换连接信息解决硬编码问题</p><p>4.编写SQL映射文件-&gt;统一管理sq语句，解决硬编码问题</p><p>5.编码</p><pre><code>        1.定义P0J0类        2.加载核心配置文件，获取SqlSessionFactory对象        3.获取SqlSession对象，执行SQL语句        4.释放资源</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">drop table if exists tb_user;</span><br><span class="line"></span><br><span class="line">create table tb_user(</span><br><span class="line">id int PRIMARY key auto_increment,</span><br><span class="line">username varchar(20),</span><br><span class="line">password varchar(20),</span><br><span class="line">gender char(1),</span><br><span class="line">addr varchar(30)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into tb_user values(1,&#x27;张三&#x27;,&#x27;123&#x27;,&#x27;男&#x27;,&#x27;北京&#x27;);</span><br><span class="line">insert into tb_user values(2,&#x27;李四&#x27;,&#x27;345&#x27;,&#x27;女&#x27;,&#x27;上海&#x27;);</span><br><span class="line">insert into tb_user values(3,&#x27;王五&#x27;,&#x27;567&#x27;,&#x27;男&#x27;,&#x27;成都&#x27;);</span><br></pre></td></tr></table></figure><h5 id="2-解决SQL映射文件的警告提示"><a href="#2-解决SQL映射文件的警告提示" class="headerlink" title="2.解决SQL映射文件的警告提示"></a>2.解决SQL映射文件的警告提示</h5><ul><li>产生原因：Idea和数据库没有建立连接，不识别表信息</li><li>解决方式：在ldea中配置MySQL数据库连接</li></ul><h4 id="四-Mapper代理开发"><a href="#四-Mapper代理开发" class="headerlink" title="四.Mapper代理开发"></a>四.Mapper代理开发</h4><h5 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h5><blockquote><p>​解决原生方式中的硬编码</p><p>​简化后期执行SQL</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = sqlSession.  selectList(<span class="string">&quot;test.selectAll&quot;</span>);</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.获取接口代理对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//4.执行方法，其实就是执行sgL语句</span></span><br><span class="line">List&lt;User&gt;users = userMapper.selectAll();</span><br></pre></td></tr></table></figure><h5 id="2-使用Mapper代理方式完成入门案例"><a href="#2-使用Mapper代理方式完成入门案例" class="headerlink" title="2.使用Mapper代理方式完成入门案例"></a>2.使用Mapper代理方式完成入门案例</h5><blockquote><p>1.定义与SQL映射文件同名的Mapper接口，并且将Mapper接口和SQL映射文件放置在同一目录下</p><p>2.设置SQL映射文件的namespace)属性为Mapper接口全限定名</p><p>3.在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id,并保持参数类型和返回值类型一致<br>4.编码</p><p>​4.1.通过SqlSession的getMapper方法获取Mapper接口的代理对象<br>​4.2.调用对应方法完成sq的执行</p></blockquote><p><strong>细节：如果Mapper接口名称和SQL映射文件名称相同，并在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载</strong></p><h4 id="五-MyBatis核心配置文件"><a href="#五-MyBatis核心配置文件" class="headerlink" title="五.MyBatis核心配置文件"></a>五.MyBatis核心配置文件</h4><h5 id="1-environments"><a href="#1-environments" class="headerlink" title="1.environments"></a>1.environments</h5><p>配置数据库连接环境信息.可以配置多个environment,通过不同的default属性切换不同的environment</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis?useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-mappers"><a href="#2-mappers" class="headerlink" title="2.mappers"></a>2.mappers</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载sql映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/gbx/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mapper代理方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gbx.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-typeAliases"><a href="#3-typeAliases" class="headerlink" title="3.typeAliases"></a>3.typeAliases</h5><p>类型别名可为Java类型设置一个缩写名字。它仅用于XML配置，意在降低冗余的全限定类名书写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.gbx.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="六-MyBatis完成CURD"><a href="#六-MyBatis完成CURD" class="headerlink" title="六.MyBatis完成CURD"></a>六.MyBatis完成CURD</h4><p>查询</p><ul><li>查询所有数据</li><li>查看条件</li><li>条件查询</li></ul><p>添加</p><p>修改</p><ul><li>修改全部字段</li><li>修改动态字段</li></ul><p>删除</p><ul><li>删除一个</li><li>批量删除</li></ul><h5 id="1-通过配置xml文件"><a href="#1-通过配置xml文件" class="headerlink" title="1.通过配置xml文件"></a>1.通过配置xml文件</h5><h6 id="1-1准备环境"><a href="#1-1准备环境" class="headerlink" title="1.1准备环境"></a>1.1准备环境</h6><p>​数据库表tb_ brand<br>​实体类Brand<br>​测试用例<br>​安装MyBatisX:插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#删除tb_brand表</span><br><span class="line">drop table if exists tb_brand;</span><br><span class="line">#创建tb_brand表</span><br><span class="line">create table tb_brand</span><br><span class="line">(</span><br><span class="line">    #id  主键</span><br><span class="line">    id  int primary key auto_increment,</span><br><span class="line">    # 品牌名称</span><br><span class="line">    brand_name  varchar(20),</span><br><span class="line">    # 企业名称</span><br><span class="line">    company_name  varchar(20),</span><br><span class="line">    #排序字段</span><br><span class="line">    ordered  int,</span><br><span class="line">    # 描述信息</span><br><span class="line">    description  varchar(100),</span><br><span class="line">    #状态: 0 :禁用  1: 启动</span><br><span class="line">    status int</span><br><span class="line">);</span><br><span class="line">insert into tb_brand(brand_name,company_name,ordered,description,status)</span><br><span class="line">values(&#x27;三只松鼠&#x27;,&#x27;三只松鼠股份有限公司&#x27;,5,&#x27;好吃不上火&#x27;,0),</span><br><span class="line">      (&#x27;华为&#x27;,&#x27;华为技术有限公司&#x27;,100,&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;,1),</span><br><span class="line">      (&#x27;小米&#x27;,&#x27;小米科技有限公司&#x27;,50,&#x27;are you ok&#x27;,1);</span><br><span class="line">select * from tb_brand;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="comment">//id 主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="comment">//企业名称</span></span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="comment">//排序字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer ordered;</span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//状态：0：禁用1：启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2MyBatisX"><a href="#1-2MyBatisX" class="headerlink" title="1.2MyBatisX"></a>1.2MyBatisX</h6><blockquote><p>MyBatisX是一款基于IDEA的快速开发插件，为效率而生。</p></blockquote><p>主要功能：</p><ul><li>XML和接口方法相互跳转</li><li>根据接口方法生成statement</li></ul><h6 id="1-3查询"><a href="#1-3查询" class="headerlink" title="1.3查询"></a>1.3查询</h6><p><strong>查询所有</strong></p><p>1.编写接口方法：Mapper接口</p><ul><li>参数：无</li><li>结果：List<Brand></Brand></li></ul><p>2.编写SQL语句：SQL映射文件：<br>3.执行方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">namespace:名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.gbx.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        select * from</span><br><span class="line">        tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">        <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">        <span class="comment">//4.执行方法</span></span><br><span class="line">        List&lt;Brand&gt; brands = brandMapper.selectAll();</span><br><span class="line">        System.out.println(brands);</span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis完成操作需要几步？<br>三步：编写接口方法&gt;&gt;编写&gt;&gt;执行方法</p><p>实体类属性名和数据库表列名不一致，不能自动封装数据<br>1)起别名：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样<br>        可以定义<sql>片段，提升复用性<br>2)resultMap:定义<resultMap>完成不一致的属性名和列名的映射</resultMap></sql></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    数据库表的字段名称  和  实体类的属性名称不一样,则不能自动封装数据</span></span><br><span class="line"><span class="comment">       *起别名: 对不一样的列名起别名,让别名和实体类的属性名一样</span></span><br><span class="line"><span class="comment">            *缺点:每次查询都要定义一次别名</span></span><br><span class="line"><span class="comment">*解决办法:sql 片段</span></span><br><span class="line"><span class="comment">缺点:不灵活</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gbx.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select id,brand_name as brandName,company_name as companyName,ordered,description,status</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  sql 片段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand_column&quot;</span>&gt;</span></span><br><span class="line">    id,brand_name as brandName,company_name as companyName,ordered,description,status</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.gbx.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;brand_column&quot;</span>/&gt;</span></span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    数据库表的字段名称  和  实体类的属性名称不一样,则不能自动封装数据</span></span><br><span class="line"><span class="comment">    *resultMap:</span></span><br><span class="line"><span class="comment">        1.定义&lt;resultMap&gt;标签</span></span><br><span class="line"><span class="comment">        2.使用resultMap属性替换 resultType属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id:唯一标识</span></span><br><span class="line"><span class="comment">    type:映射的类型,支持别名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id:完成主键的映射</span></span><br><span class="line"><span class="comment">            column:表的列名</span></span><br><span class="line"><span class="comment">            property:实体类的属性名</span></span><br><span class="line"><span class="comment">        result:完成一般字符的映射</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>查看详情</strong></p><p>1.编写接口方法：Mapper接口<br>参数：id<br>结果：Brand<br>2.编写SQL语句：SQL映射文件<br>3.执行方法，测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> *参数占位符:</span></span><br><span class="line"><span class="comment">            1.#&#123;&#125;:会将其替换成 ? .为了防止sql注入</span></span><br><span class="line"><span class="comment">            2.$&#123;&#125;:拼sql 会存在sql注入问题</span></span><br><span class="line"><span class="comment">            3.使用时机:</span></span><br><span class="line"><span class="comment">                    *在参数传递的时候: #&#123;&#125;</span></span><br><span class="line"><span class="comment">                    *表明或者列名不固定的情况下:$&#123;&#125;会存在sql注入问题</span></span><br><span class="line"><span class="comment">            *参数类型:parameterType:可以省略</span></span><br><span class="line"><span class="comment">            *特殊字符处理:</span></span><br><span class="line"><span class="comment">                    1.转义字符:</span></span><br><span class="line"><span class="comment">                    2.CDATA区</span></span><br><span class="line"><span class="comment">                    &lt;I[CDATA[内容]&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>条件查询</strong></p><p>1.多条件查询</p><p>1.编写接口方法：Mapper接口</p><p>​参数：所有查询条件<br>​结果：List<Brand></Brand></p><p>2.编写SQL语句：SQL映射文件<br>3.执行方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;status&quot;)</span><span class="type">int</span> status,<span class="meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="meta">@Param(&quot;brandName&quot;)</span>String brandName)</span>;</span><br><span class="line"></span><br><span class="line">   &lt;select id=<span class="string">&quot;selectByCondition&quot;</span> resultType=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">       select * from tb_brand</span><br><span class="line">       <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125; and company_name like #&#123;companyName&#125;</span><br><span class="line">       and brand_name like #&#123;brandName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">       </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//接收参数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//处理参数</span></span><br><span class="line">       companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">       brandName=<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">       <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">       <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">       <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">       <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">       <span class="comment">//4.执行方法</span></span><br><span class="line">       List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span><br><span class="line">       System.out.println(brands);</span><br><span class="line">       <span class="comment">//5.释放资源</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   List &lt;Brand&gt; selectByCondition(Brand brand);</span><br><span class="line"></span><br><span class="line">   &lt;select id=<span class="string">&quot;selectByCondition&quot;</span> resultType=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">       select * from tb_brand</span><br><span class="line">       <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125; and company_name like #&#123;companyName&#125;</span><br><span class="line">       and brand_name like #&#123;brandName&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//接收参数</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//处理参数</span></span><br><span class="line">       companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">       brandName=<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象</span></span><br><span class="line">       <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">       brand.setStatus(status);</span><br><span class="line">       brand.setCompanyName(companyName);</span><br><span class="line">       brand.setBrandName(brandName);</span><br><span class="line">       <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">       <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">       <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">       <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">       <span class="comment">//4.执行方法</span></span><br><span class="line">       List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span><br><span class="line">       System.out.println(brands);</span><br><span class="line">       <span class="comment">//5.释放资源</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">List &lt;Brand&gt; selectByCondition(Map map);</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectByCondition&quot;</span> resultType=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">    select * from tb_brand</span><br><span class="line">    <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125; and company_name like #&#123;companyName&#125;</span><br><span class="line">    and brand_name like #&#123;brandName&#125;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理参数</span></span><br><span class="line">    companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">    brandName=<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Map集合</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;status&quot;</span>,status);</span><br><span class="line">    map.put(<span class="string">&quot;companyName&quot;</span>,companyName);</span><br><span class="line">    map.put(<span class="string">&quot;brandName&quot;</span>,brandName);</span><br><span class="line">    <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4.执行方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectByCondition(map);</span><br><span class="line">    System.out.println(brands);</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-动态查询"><a href="#2-动态查询" class="headerlink" title="2.动态查询"></a>2.动态查询</h5><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为动态SQL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span><span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select  *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    if(status!=null)</span><br><span class="line">         status =#status)</span><br><span class="line">    and company name like #&#123;companyName&#125;</span><br><span class="line">    and brand name like #&#123;brandName)</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyBatis对动态SQL有很强大的支撑：</p><ul><li>if</li><li>choose (when,otherwise)</li><li>trim (where,set)</li><li>foreach</li></ul><h6 id="2-1if查询"><a href="#2-1if查询" class="headerlink" title="2.1if查询"></a>2.1if查询</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  动态条件查询</span></span><br><span class="line"><span class="comment">*if:条件判断</span></span><br><span class="line"><span class="comment">*test:逻辑表达式</span></span><br><span class="line"><span class="comment">*问题:第一个条件不需要逻辑运算符</span></span><br><span class="line"><span class="comment">*恒等式</span></span><br><span class="line"><span class="comment">*&lt;where&gt;替换where关键字</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">      select * from tb_brand</span><br><span class="line">      where</span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status!=null&quot;</span>&gt;</span></span><br><span class="line">          status = #&#123;status&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">          and company_name like #&#123;companyName&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!=null and brandName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">          and brand_name like #&#123;brandName&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-2choose-when-otherwise-查询"><a href="#2-2choose-when-otherwise-查询" class="headerlink" title="2.2choose(when,otherwise)查询"></a>2.2choose(when,otherwise)查询</h6><p>从多个条件中选择个.</p><p>类似于Java中的switch语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span><span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span>&lt;!-类似于switch-&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">:</span>&quot;<span class="attr">status</span>=<span class="string">nul</span>&quot;&gt;</span>&lt;!-类似于case-&gt;</span><br><span class="line">        status =#&#123;status)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName!=null and companyName !=&quot;</span>&quot;&gt;</span></span><br><span class="line">            company_name like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName !null and brandName !=&quot;</span>&quot;</span></span><br><span class="line"><span class="tag">            <span class="attr">brand_name</span> <span class="attr">like</span> #&#123;<span class="attr">brandName</span>&#125;</span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="tag">&lt;<span class="name">I-类似于default-</span>&gt;</span></span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-添加"><a href="#3-添加" class="headerlink" title="3.添加"></a>3.添加</h5><p>1.编写接口方法：Mapper接口</p><ul><li>参数：除了id之外的所有数据</li><li>结果：void</li></ul><p>2.编写SQL语句：SQL映射文件</p><p>3.执行方法，测试</p><p>MyBatis事务：</p><ul><li>openSession0:默认开启事务，进行增删改操作后需要使用sqlSession.commit0;手动提交事务</li><li>openSession(true):可以设置为自动提交事务（关闭事务）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">insert into tb_brand (brand_name,company_name,ordered,description,status)</span><br><span class="line">values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name,company_name,ordered,description,status)    </span><br><span class="line">    values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//接收参数</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;菠萝手机&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;菠萝&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;菠萝手机,手机中的战斗机&quot;</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装对象</span></span><br><span class="line"><span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">brand.setStatus(status);</span><br><span class="line">brand.setCompanyName(companyName);</span><br><span class="line">brand.setBrandName(brandName);</span><br><span class="line">brand.setDescription(description);</span><br><span class="line">brand.setOrdered(ordered);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">      <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">      <span class="comment">//方式一</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">//方式二  自动提交事务</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">      <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">      <span class="comment">//4.执行方法</span></span><br><span class="line">      brandMapper.add(brand);</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line">      <span class="comment">//5.释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="3-1主键返回"><a href="#3-1主键返回" class="headerlink" title="3.1主键返回"></a>3.1主键返回</h6><p>在数据添加成功后，需要获取插入数据库数据的主键的值</p><ul><li>比如：添加订单和订单项</li></ul><p>1.添加订单</p><p>2.添加订单项，订单项中需要设置所属订单的id</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKey</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name,company_name,ordered,description,status)    </span><br><span class="line">    values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//接收参数</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;菠萝手机&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;菠萝&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;菠萝手机,手机中的战斗机&quot;</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装对象</span></span><br><span class="line"><span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">brand.setStatus(status);</span><br><span class="line">brand.setCompanyName(companyName);</span><br><span class="line">brand.setBrandName(brandName);</span><br><span class="line">brand.setDescription(description);</span><br><span class="line">brand.setOrdered(ordered);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">      <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">      <span class="comment">//方式一</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">//方式二  自动提交事务</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">      <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">      <span class="comment">//4.执行方法</span></span><br><span class="line">      brandMapper.add(brand);</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> brand.getId();</span><br><span class="line">      System.out.println(id);</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line">      <span class="comment">//5.释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>返回添加数据的主键<br>&lt;insert useGeneratedKeys&#x3D;”true”keyProperty&#x3D;”id”&gt;</p><h5 id="4-修改"><a href="#4-修改" class="headerlink" title="4.修改"></a>4.修改</h5><h6 id="4-1修改全部字段"><a href="#4-1修改全部字段" class="headerlink" title="4.1修改全部字段"></a>4.1修改全部字段</h6><p>1.编写接口方法：Mapper接口</p><ul><li>参数：所有数据</li><li>结果：void</li></ul><p>2.编写SQL语句：SQL映射文件<br>3.执行方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">update tb_brand</span><br><span class="line">    set </span><br><span class="line">    brand_name=#&#123;brandName&#125;,</span><br><span class="line">    company_name=#&#123;companyName&#125;,</span><br><span class="line">    ordered=#&#123;brandName&#125;,</span><br><span class="line">    description=#&#123;description&#125;,</span><br><span class="line">    status=#&#123;status&#125;</span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//接收参数</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;菠萝手机&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;菠萝&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装对象</span></span><br><span class="line"><span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">brand.setStatus(status);</span><br><span class="line">brand.setCompanyName(companyName);</span><br><span class="line">brand.setBrandName(brandName);</span><br><span class="line">brand.setDescription(description);</span><br><span class="line">brand.setOrdered(ordered);</span><br><span class="line">      brand.setId(id);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">      <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">      <span class="comment">//方式一</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      <span class="comment">//方式二  自动提交事务</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">      <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">      <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">      <span class="comment">//4.执行方法</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> brandMapper.update(brand);</span><br><span class="line">      System.out.println(count);</span><br><span class="line">      <span class="comment">//提交事务</span></span><br><span class="line">      sqlSession.commit();</span><br><span class="line">      <span class="comment">//5.释放资源</span></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="4-2修改动态字段"><a href="#4-2修改动态字段" class="headerlink" title="4.2修改动态字段"></a>4.2修改动态字段</h6><p>1.编写接口方法：Mapper接口</p><ul><li>参数：部分数据，封装到对象中</li><li>结果：void</li></ul><p>2.编写SQL语句：SQL映射文件<br>3.执行方法，测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName !=null and brandName !=&#x27;&#x27;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">            brand_name=#&#123;brandName&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;/if&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;if test=&quot;</span><span class="attr">companyName</span> !=<span class="string">null</span> <span class="attr">and</span> <span class="attr">companyName</span> !=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line">            company_name=#&#123;companyName,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered !=null&quot;</span>&gt;</span></span><br><span class="line">            ordered=#&#123;fordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description !=null and description !=&#x27;&#x27;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">            description=#&#123;description&#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;/if&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">        &lt;if test=&quot;</span><span class="attr">status</span> !=<span class="string">null</span>&gt;</span></span><br><span class="line">            status=#&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-删除"><a href="#5-删除" class="headerlink" title="5.删除"></a>5.删除</h5><h6 id="5-1删除一个"><a href="#5-1删除一个" class="headerlink" title="5.1删除一个"></a>5.1删除一个</h6><p>1.编写接口方法：Mapper接口</p><ul><li>参数：id</li><li>结果：void</li></ul><p>2.编写SQL语句：SQL映射文件</p><p>3.执行方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">delete from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//方式二  自动提交事务</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4.执行方法</span></span><br><span class="line">    brandMapper.deleteById(id);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-2批量删除"><a href="#5-2批量删除" class="headerlink" title="5.2批量删除"></a>5.2批量删除</h6><p>1.编写接口方法：Mapper接口</p><ul><li>参数：id数组</li><li>结果：void</li></ul><p>2.编写SQL语句：SQL映射文件</p><p>3.执行方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span><span class="type">int</span>[]ids)</span>;</span><br></pre></td></tr></table></figure><p>mybatis会将数组参数，封装为一个Map集合。<br>                *默认：array&#x3D;数组</p><p>​*使用@Param注解改变map集合的默认key的名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">delete from tb_brand where id </span><br><span class="line">in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ids</span> <span class="operator">=</span> &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2.获取SqlSession对象</span></span><br><span class="line">    <span class="comment">//方式一</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//方式二  自动提交事务</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//3.获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4.执行方法</span></span><br><span class="line">    brandMapper.deleteByIds(ids);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5.释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-MyBatis参数传递"><a href="#6-MyBatis参数传递" class="headerlink" title="6.MyBatis参数传递"></a>6.MyBatis参数传递</h5><p>MyBatis接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式</p><ul><li><p>单个参数：</p><p>1.POO类型：直接使用，属性名和参数占位符名称一致<br>2.Map集合：直接使用，键名和参数占位符名称一到<br>3.Collection:封装为Map集合</p><p>​map.put(“arg0”,collection集合)；<br>​map.put(“collection”,collection集合)；</p><p>4.List:封装为Map集合</p><p>​map.put(“arg0”,List集合)：<br>​map.put(“collection”,List集合)；<br>​map.put(“List”,List集合)；</p><p>5.Array:封装为Map集合</p><p>​map.put(“argo”,数组)；<br>​map.put(“array”,数组)；</p><p>6.其他类型：直接使用</p></li><li><p>多个参数：封装为Map集合</p><p>map.put(“arg0”,参数值1)</p><p>map.put(“param1”,参数值1)</p><p>map.put(“param2”,参数值2)</p><p>map.put(“arg1”,参数值2)</p></li></ul><blockquote><p>MyBatisj提供了ParamNameResolver类来进行参数封装</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span><span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where</span><br><span class="line">    username = #&#123;arg0&#125;</span><br><span class="line">    and password = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-通过注解开发"><a href="#7-通过注解开发" class="headerlink" title="7.通过注解开发"></a>7.通过注解开发</h5><p>使用注解开发会比配置文件开发更加方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select from tb_user where id =#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">seectByld</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><ul><li>查询：@Select</li><li>添加：@Insert</li><li>修改：@Update</li><li>删除：@Delete</li></ul><p>提示：<br>        注解完成简单功能<br>        配置文件完成复杂功能</p><blockquote><p>​使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java注解不仅力不从心，还会让你本就复杂的SQL语句更加混乱不堪。因此，如果你需要做一些很复杂的操作，最好用XML来映射语句<br>​选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和XML的语句映射方式间自由移植和切换</p></blockquote><h3 id="HTML和CSS"><a href="#HTML和CSS" class="headerlink" title="HTML和CSS"></a>HTML和CSS</h3><h4 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML?"></a>什么是HTML?</h4><ul><li>HTML是一门语言，所有的网页都是用HTML这门语言编写出来的</li><li>HTML(HyperText Markup Language):超文本标记语言</li></ul><blockquote><p>​超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容<br>​标记语言：由标签构成的语言</p></blockquote><ul><li><p>HTML运行在浏览器上，HTML标签由浏览器来解析</p></li><li><p>HTML标签都是预定义好的。例如：使用<img>展示图片</p></li><li><p>W3C标准：网页主要由三部分组成</p><blockquote><p>结构：<strong>HTML</strong><br>表现：<strong>CSS</strong><br>行为：<strong>JavaScript</strong></p></blockquote></li></ul><h4 id="一-HTML"><a href="#一-HTML" class="headerlink" title="一.HTML"></a>一.HTML</h4><h5 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h5><p>1.新建文本文件，后缀名改为.html<br>2.编写HTML结构标签<br>3.在<body>中定义文字</body></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">&quot;red&quot;</span>&gt;</span>乾坤未定,你我皆是黑马<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-基础标签"><a href="#2-基础标签" class="headerlink" title="2.基础标签"></a>2.基础标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><h1>~<h6></h6></h1></td><td>定义标题，h1最大，h6最小</td></tr><tr><td><font></font></td><td>定义文本的字体、字体尺寸、字体颜色</td></tr><tr><td><b></b></td><td>定义粗体文本</td></tr><tr><td><i></i></td><td>定义斜体文本</td></tr><tr><td><u></u></td><td>定义文本下划线</td></tr><tr><td><center></center></td><td>定义文本居中</td></tr><tr><td><p></p></td><td>定义段落</td></tr><tr><td><br></td><td>定义折行</td></tr><tr><td><hr></td><td>定义水平线</td></tr></tbody></table><p>html表示颜色：<br>1.英文单词：red,pink,blue…<br>2.rgb(值1，值2，值3)：值的取值范围：0<del>255rgb(255,0,0)<br>3.#值1值2值了：值的范围：00</del>FF</p><h6 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h6><table><thead><tr><th>HTML原代码</th><th>现实结果</th><th>描述</th></tr></thead><tbody><tr><td>&amp;lt</td><td>&lt;</td><td>小于号或显示标记</td></tr><tr><td>&amp;gt</td><td>&gt;</td><td>大于号或显示标记</td></tr><tr><td>&amp;amp</td><td>&amp;</td><td>可用于显示其它特殊字符</td></tr><tr><td>&amp;quot</td><td>“</td><td>引号</td></tr><tr><td>&amp;reg</td><td>®</td><td>已注册</td></tr><tr><td>&amp;copy</td><td>©</td><td>版权</td></tr><tr><td>&amp;trade</td><td>™</td><td>商标</td></tr><tr><td>&amp;nbsp</td><td></td><td>不断行的空白</td></tr></tbody></table><h5 id="3-图片、音频、视频标签"><a href="#3-图片、音频、视频标签" class="headerlink" title="3.图片、音频、视频标签"></a>3.图片、音频、视频标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><img></td><td>定义图片</td></tr><tr><td><audio></audio></td><td>定义音频</td></tr><tr><td><video></video></td><td>定义视频</td></tr></tbody></table><ul><li><p>img:定义图片</p><blockquote><p>src:规定显示图像的URL(统一资源定位符)</p><p>height:定义图像的高度<br>width:定义图像的宽度</p></blockquote></li><li><p>audio:定义音频。支持的音频格式：MP3、WAV、OGG</p><blockquote><p>src:规定音频的URL<br>controls:显示播放控件</p></blockquote></li><li><p>video:定义视频。支持的音频格式：MP4,WebM、OGG</p><blockquote><p>src:规定视频的URL<br>controls:显示播放控件</p></blockquote></li></ul><h5 id="4-超链接标签"><a href="#4-超链接标签" class="headerlink" title="4.超链接标签"></a>4.超链接标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><a></a></td><td>定义超链接，用于链接到另一个资源</td></tr></tbody></table><ul><li><p>href:指定访问资源的URL</p></li><li><p>target:指定打开资源的方式</p><blockquote><p>_seIf:默认值，在当前页面打开<br>_blank:在空白页面打开</p></blockquote></li></ul><h5 id="5-列表标签"><a href="#5-列表标签" class="headerlink" title="5.列表标签"></a>5.列表标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><ol></ol></td><td>定义有序列表</td></tr><tr><td><ul></ul></td><td>定义无序列表</td></tr><tr><td><li></li></td><td>定义列表项</td></tr></tbody></table><p><strong>有序列表</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221008142020977.png" alt="image-20221008142020977"></p><p><strong>无序列表</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221008142043292.png" alt="image-20221008142043292"></p><p>type:设置项目符号</p><h5 id="6-表格标签"><a href="#6-表格标签" class="headerlink" title="6.表格标签"></a>6.表格标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><table></table></td><td>定义表格</td></tr><tr><td></td></tr><tr><td>定义行</td></tr><tr><td></td><td></td><td>定义单元格</td></tr><tr><td><th></th></td><td>定义表头单元格</td></tr></tbody></table><ul><li><p>table:定义表格</p><blockquote><p>border:规定表格边框的宽度<br>width:规定表格的宽度<br>cellspacing:规定单元格之间的空白</p></blockquote></li><li><p>tr:定义行</p><blockquote><p>align:定义表格行的内容对齐方式</p></blockquote></li><li><p>td:定义单元格</p><blockquote><p>rowspan:规定单元格可横跨的行数</p><p>colspan:规定单元格可横跨的列数</p></blockquote></li></ul><h5 id="7-表格标签"><a href="#7-表格标签" class="headerlink" title="7.表格标签"></a>7.表格标签</h5><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><div></div></td><td>定义HTML文档中的一个区域部分，经常与CSS一起使用，用来布局网页</td></tr><tr><td><span></span></td><td>用于组合行内元素。</td></tr></tbody></table><h5 id="8-表单标签"><a href="#8-表单标签" class="headerlink" title="8.表单标签"></a>8.表单标签</h5><ul><li><p>表单：在网页中主要负责数据采集功能，使用<fom>标签定义表单</fom></p></li><li><p>表单项（元素）：不同类型的input元素、下拉列表、文本域等</p></li><li><p>form:定义表单</p><blockquote><p>action：规定当提交表单时向何处发送表单数据，UL<br>method：规定用于发送表单数据的方式</p></blockquote><ul><li>get:浏览器会将数据直接附在表单的action URL<br>之后。大小有限制</li><li>post:浏览器会将数据放到http请求消息体中。大<br>小无限制</li></ul></li></ul><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><form></form></td><td>定义表单</td></tr><tr><td><input></td><td>定义表单项，通过type属性控制输入形式</td></tr><tr><td><label></label></td><td>为表单项定义标注</td></tr><tr><td><select></select></td><td>定义下拉列表</td></tr><tr><td><option></option></td><td>定义下拉列表的列表项</td></tr><tr><td><textarea></textarea></td><td>定义文本域</td></tr></tbody></table><h5 id="9-表单项标签"><a href="#9-表单项标签" class="headerlink" title="9.表单项标签"></a>9.表单项标签</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221008225456705.png" alt="image-20221008225456705"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221008223511359.png" alt="image-20221008223511359"></p><h4 id="二-CSS"><a href="#二-CSS" class="headerlink" title="二.CSS"></a>二.CSS</h4><h5 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS?"></a>什么是CSS?</h5><ul><li>CSS是一门语言，用于控制网页表现</li></ul><p>​   CSS(Cascading Style Sheet):层叠样式表</p><ul><li>W3C标准：网页主要由三部分组成</li></ul><blockquote><p>结构：HTML<br>表现：CSS<br>行为：JavaScript</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello CSS~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-CSS导入方式"><a href="#1-CSS导入方式" class="headerlink" title="1.CSS导入方式"></a>1.CSS导入方式</h5><p>CSS导入HTML有三种方式：</p><blockquote><p>1.内联样式：在标签内部使用style属性，属性值是css属性键值对</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>Hello CSS~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.内部样式：定义<style>标签，在标签内部定义css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.外部样式：定义ink标签，引入外部的css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span><span class="attr">href</span>=<span class="string">&quot;demo.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>demo.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="2-CSS选择器"><a href="#2-CSS选择器" class="headerlink" title="2.CSS选择器"></a>2.CSS选择器</h5><h6 id="2-1概念：选择器是选取需设置样式的元素（标签）"><a href="#2-1概念：选择器是选取需设置样式的元素（标签）" class="headerlink" title="2.1概念：选择器是选取需设置样式的元素（标签）"></a>2.1概念：选择器是选取需设置样式的元素（标签）</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2分类"><a href="#2-2分类" class="headerlink" title="2.2分类"></a>2.2分类</h6><p>2.2.1元素选择器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素名称&#123;color:red;&#125;</span><br><span class="line"> div&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><p>2.2.2id选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#id属性值&#123;color:red;&#125;</span><br><span class="line"></span><br><span class="line">#name&#123;color:red;)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>hello css2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2.3类选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.class属性值&#123;color:red;&#125;</span><br><span class="line"></span><br><span class="line">.cls&#123;color:red;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>hello css3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><h4 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript?"></a>什么是JavaScript?</h4><ul><li><p>JavaScript是一门跨平台、面向对象的脚本语言，来控制网页行为的，它能使网页可交互</p></li><li><p>W3C标准：网页主要由三部分组成</p><blockquote><p>结构：<strong>HTML</strong><br>表现：<strong>CSS</strong><br>行为：<strong>JavaScript</strong></p></blockquote></li><li><p>JavaScript和Java是完全不同的语言，不论是概念还是设计。但是基础语法类似。</p></li><li><p>JavaScript(简称：JS)在1995年由Brendan Eich发明，并于1997年成为一部ECMA标准</p></li><li><p>ECMAScript6(ES6)是最新的JavaScript版本（发布于2015年）：</p></li></ul><h4 id="一-JS引入"><a href="#一-JS引入" class="headerlink" title="一.JS引入"></a>一.JS引入</h4><h5 id="1-两种引入"><a href="#1-两种引入" class="headerlink" title="1.两种引入"></a>1.两种引入</h5><p>1.1内部脚本：将JS代码定义在HTML页面中</p><p>在HTML中，JavaScript代码必须位<script>与</script>标签之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;hello,JS~&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>在HTML文档中可以在任意地方，放置任意数量的<script>。</li><li>一般把脚本置于<body>元素的底部，可改善显示速度，因为脚本执行会拖慢显示</li></ul><p>1.2外部脚本：将JS代码定义在外部S文件种，然后引入到HTML页面中</p><ul><li>外部文件：demo.js alert("hello,JS~");</li><li>引入外部js文件            <script src="../js/demo.js></script></li></ul><p>注意：<br>1.外部脚本不能包含<script>标签<br>2.<script>标签不能自闭合</p><h4 id="二-JS基础语法"><a href="#二-JS基础语法" class="headerlink" title="二.JS基础语法"></a>二.JS基础语法</h4><h5 id="1-书写语法"><a href="#1-书写语法" class="headerlink" title="1.书写语法"></a>1.书写语法</h5><ol><li>区分大小写：与va一样，变量名、函数名以及其他一切东西都是区分大小写的</li><li>每行结尾的分号可有可无</li><li>注释：<ul><li>单行注释：//注释内容</li><li>多行注释：/*     */注释内容</li></ul></li><li>大括号表示代码块</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (count =<span class="number">3</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-输出语句"><a href="#2-输出语句" class="headerlink" title="2.输出语句"></a>2.输出语句</h5><ul><li>使用window.alert()写入警告框</li><li>使用document.write()写入HTML输出</li><li>使用console.1og()写入浏览器控制台</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello JS~&quot;</span>);<span class="comment">//弹出警告框</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;hello JS~&quot;</span>);<span class="comment">//写入HTML</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello JS~&quot;</span>);<span class="comment">//写入控制台</span></span><br></pre></td></tr></table></figure><h5 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h5><ul><li>JavaScript中用var关键字(varable的缩写)来声明变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="number">20</span>;</span><br><span class="line">test = <span class="string">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure><p>var:</p><p>​1.作用域:全局变量</p><p>​2.变量可重复定义</p><ul><li>JavaScript是一门弱类型语言，变量可以存放不同类型的值</li><li>变量名需要遵循如下规则</li></ul><blockquote><p>组成字符可以是任何字母、数字、下划线（_)或美元符号($)<br>数字不能开头<br>建议使用驼峰命名</p></blockquote><ul><li><p>ECMAScript6新增了<strong>Iet</strong>关键字来定义变量。它的用法类似于<strong>var</strong>,但是所声明的变量，只在<strong>Iet</strong>关键字所在的代码块内有效，且不允许重复声明</p></li><li><p>ECMAScript6新增了<strong>const</strong>关键字，用来声明一个只读的常量。一旦声明，常量的值就不能改变。</p></li></ul><h5 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4.数据类型"></a>4.数据类型</h5><p>JavaScript中分为：原始类型和引用类型</p><blockquote><p>5种原始类型：<br><strong>number</strong>:数字（整数、小数、NaN(Not a Number)<br><strong>string</strong>:字符、字符串，单双引皆可<br><strong>boolean</strong>:布尔。true,false<br><strong>null</strong>:对象为空<br><strong>undefined</strong>:当声明的变量未初始化时，该变量的默认值是undefined</p></blockquote><p>使用typeof运算符可以获取数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alter</span>(<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure><h5 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h5><ul><li>一元运算符：++，--</li><li>算术运算符：+，-，*，/，%</li><li>赋值运算符：=,+=,-=…</li><li>关系运算符：>，<，>=，<=，!=，==,===</li><li>逻辑运算符：&&，||，！</li><li>三元运算符：条件表达式？true_value:false_value</li></ul><blockquote><p>== :</p><p>1.判断类型是否一样，如果不一样，则进行类型转换<br>2.再去比较其值</p><p>===:全等于</p><p>1.判断类型是否一样，如果不一样，直接返回faLs<br>2.再去比较其值</p></blockquote><blockquote><p>类型转换:</p><p>​*其他类型转为number:</p><p>​1.string:按照字符串的字面值，转为数字,如果字面值不是数字，则转为NaN。一般使用parseInt<br>​2.boolean:true转为1，false转为0</p><p>​*其他类型转boolean:</p><p>​1.number:0和NaN转为false,其他的数字转为trUe</p><p>​2.string:空字符串转为false,其他的字符串转为true</p><p>​3.null:false</p><p>​4.undefined:false</p></blockquote><h4 id="三-流程控制语句-函数"><a href="#三-流程控制语句-函数" class="headerlink" title="三.流程控制语句&函数"></a>三.流程控制语句&函数</h4><h5 id="1-流程控制语句"><a href="#1-流程控制语句" class="headerlink" title="1.流程控制语句"></a>1.流程控制语句</h5><h6 id="1-1if"><a href="#1-1if" class="headerlink" title="1.1if:"></a>1.1if:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (count ==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-2switch"><a href="#1-2switch" class="headerlink" title="1.2switch:"></a>1.2switch:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span> (num)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期一&quot;</span>)；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;星期二&quot;</span>)；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期三&quot;</span>)；</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期四&quot;</span>)；</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期五&quot;</span>)；</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期六&quot;</span>)；</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期日&quot;</span>)；</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>:&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;输入星期有误&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-3for"><a href="#1-3for" class="headerlink" title="1.3for:"></a>1.3for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">       sum +=i;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><h6 id="1-4while"><a href="#1-4while" class="headerlink" title="1.4while:"></a>1.4while:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    sum +i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><h6 id="1-5do-while"><a href="#1-5do-while" class="headerlink" title="1.5do...while:"></a>1.5do...while:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">sum +i;</span><br><span class="line">  i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i&lt;=<span class="number">100</span>);</span><br><span class="line">  <span class="title function_">alert</span>(sum);</span><br></pre></td></tr></table></figure><h5 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h5><p>函数（方法）是被设计为执行特定任务的代码块</p><p>定义一:JavaScript函数通过function关键词进行定义，语法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">参数<span class="number">1</span>，参数<span class="number">2.</span>...</span>)&#123;</span><br><span class="line">要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>形式参数不需要类型。因为JavaScript是弱类型语言<br>返回值也不需要定义类型，可以在函数内部直接使用return:返回即可</p><p>定义方式一:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：函数名称（实际参数列表）；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let result = add(1,2);</span><br></pre></td></tr></table></figure><p>定义二:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName=<span class="keyword">function</span>(<span class="params">参数列表</span>)&#123;</span><br><span class="line">要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add <span class="keyword">function</span> (<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用:JS中，函数调用可以传递任意个数参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="四-JS对象"><a href="#四-JS对象" class="headerlink" title="四.JS对象"></a>四.JS对象</h4><h5 id="1-Array数组对象"><a href="#1-Array数组对象" class="headerlink" title="1.Array数组对象"></a>1.Array数组对象</h5><p>JavaScript Array对象用于定义数组</p><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素列表);<span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = [元素列表];<span class="comment">//方式二 </span></span><br></pre></td></tr></table></figure><ul><li>访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[索引] = 值;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：Js数组类似于Java集合，长度，类型都可变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//变长</span></span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr3[<span class="number">10</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//alert(arr3[10]);</span></span><br><span class="line"><span class="title function_">alert</span>(arr3[<span class="number">9</span>]);</span><br><span class="line"><span class="comment">//变类型</span></span><br><span class="line">arr3[<span class="number">5</span>]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//alert(arr3[5]);</span></span><br><span class="line"><span class="title function_">alert</span>(arr3);</span><br></pre></td></tr></table></figure><ul><li>属性</li></ul><p>属性：Length:数组中元素的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr4.<span class="property">Length</span>;i++)&#123;</span><br><span class="line"><span class="title function_">alert</span>(arr4[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法</li></ul><p>push方法:添加方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr5=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr5.<span class="title function_">push</span>(<span class="number">10</span>);</span><br><span class="line"><span class="title function_">alert</span>(arr5);</span><br></pre></td></tr></table></figure><p>splice:删除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr5.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//这里的方法重载,能传3个参数</span></span><br><span class="line"><span class="title function_">alert</span>(arr5);</span><br></pre></td></tr></table></figure><h5 id="2-String"><a href="#2-String" class="headerlink" title="2.String"></a>2.String</h5><ul><li>定义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>变量名=<span class="keyword">new</span> <span class="title class_">String</span>(s);<span class="comment">//方式-</span></span><br><span class="line"><span class="keyword">var</span>变量名=s; <span class="comment">//方式二</span></span><br></pre></td></tr></table></figure><ul><li>属性</li></ul><p>length字符串的长度</p><ul><li>方法</li></ul><p>charAt() 返回在指定位置的字符。<br>indexof()   检索字符串。<br>trim() 去除字符串前后两端的空白字符</p><h5 id="3-自定义对象"><a href="#3-自定义对象" class="headerlink" title="3.自定义对象"></a>3.自定义对象</h5><ul><li>格式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var对象名称=&#123;</span><br><span class="line">    属性名称1：属性值1，</span><br><span class="line">    属性名称2：属性值2，</span><br><span class="line">    ......</span><br><span class="line">    函数名称：function(形参列表)&#123;&#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var person =&#123;</span><br><span class="line">    name:&quot;zhangsan&quot;,</span><br><span class="line">    age:23,</span><br><span class="line">    eat:function &#123;</span><br><span class="line">    alert(&quot;干饭~&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五-BOM"><a href="#五-BOM" class="headerlink" title="五.BOM"></a>五.BOM</h4><ul><li><p><strong>B</strong>rowser <strong>O</strong>bject Model浏览器对象模型</p></li><li><p>JavaScript将浏览器的各个组成部分封装为对象</p></li><li><p>组成Window:浏览器窗口对象</p></li><li><p>组成</p><blockquote><ul><li>Window:浏览器窗口对象</li><li>Navigator:浏览器对象</li><li>Screen:屏幕对象</li><li>History:历史记录对象</li><li>Location:地址栏对象</li></ul></blockquote></li></ul><h5 id="1-Window"><a href="#1-Window" class="headerlink" title="1.Window"></a>1.Window</h5><ul><li>Vindow:刘览器窗口对象</li><li>获取：直接使用window,其中window.可以省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>属性：获取其他BOM对象</li></ul><table><thead><tr><th>history</th><th>对History对象的只读引用。请参数History对象。</th></tr></thead><tbody><tr><td>Navigator</td><td>对Navigator对象的只读引用。请参数Navigator对象。</td></tr><tr><td>Screen</td><td>对Screen对象的只读l用。请参数Screen对象：</td></tr><tr><td>location</td><td>用于窗口或框架的Location对象。请参阅Location对象。</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th>alert()</th><th>显示带有一段消息和一个确认按钮的警告框。</th></tr></thead><tbody><tr><td>confirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对括框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><h5 id="2-History"><a href="#2-History" class="headerlink" title="2.History"></a>2.History</h5><ul><li>History:历史记录</li><li>获取:使用window.history获取,其中window可以省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.方法();</span><br><span class="line">history.方法();</span><br></pre></td></tr></table></figure><ul><li>方法</li></ul><table><thead><tr><th>back()</th><th>加载history列表中的前一个URL。</th></tr></thead><tbody><tr><td>forward()</td><td>加载history列表中的下一个URL。</td></tr></tbody></table><h4 id="六-DOM"><a href="#六-DOM" class="headerlink" title="六.DOM"></a>六.DOM</h4><ul><li><p><strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel文档对象模型</p></li><li><p>将标记语言的各个组成部分封装为对象</p><blockquote><ul><li>Document:整个文档对象</li><li>Element:元素对象</li><li>Attribute:属性对象</li><li>Text:文本对象</li><li>Comment:注释对象</li></ul></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title:</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的标题<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href仁</span>&quot;#&quot;&gt;</span>我的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221011211644458.png" alt="image-20221011211644458"></p><ul><li><p>JavaScript通过DOM,就能够对HTML进行操作了</p><blockquote><ul><li>改变HTML元素的内容</li><li>改变HTML元素的样式(CSS)</li><li>对HTML DOM事件作出反应</li><li>添加和删除HTML元素</li></ul></blockquote></li><li><p>DOM是W3C(万维网联盟)的标准</p></li><li><p>DOM定义了访问HTML和ML文档的标准：</p></li><li><p>W3CDOM标准被分为3个不同的部分：</p><blockquote><p>1.核心DOM:针对任何结构化文档的标准模型</p><blockquote><ul><li>Document:整个文档对象</li><li>Element:元素对象</li><li>Attribute:属性对象</li><li>Text:文本对象</li><li>Comment:注释对象</li></ul></blockquote><p>2.XML DOM:针对XML文档的标准模型</p><p>3.HTML DOM:针对HTML文档的标准模型</p><blockquote><ul><li>Image:<img></li><li>Button <input type='button'></li></ul></blockquote></blockquote></li></ul><h5 id="1-获取Element"><a href="#1-获取Element" class="headerlink" title="1.获取Element"></a>1.获取Element</h5><ul><li>获取：使用Document)对象的方法来获取</li></ul><p>1.getElementByld:根据id属性值获取，返回一个Element对象<br>2.etElementsByTagName:根据标签名称获取，返回Element对象数组</p><blockquote><p>style:设置元素css样式<br>innerHTML:设置元素内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;divs[i].<span class="property">innerHTML</span>=<span class="string">&quot;呵呵&quot;</span>；</span><br></pre></td></tr></table></figure></blockquote><p>3.getElementsByName:根据name属性值获取，返回Element>对象数组<br>4.getElementsByClassName:根据class/属性值获取，返回Element对象数组</p><h4 id="七-事件监听"><a href="#七-事件监听" class="headerlink" title="七.事件监听"></a>七.事件监听</h4><ul><li><p>事件：HTML事件是发生在HTML元素上的"事情”。比如：</p><blockquote><ul><li>按钮被点击</li><li>鼠标移动到元素之上</li><li>按下键盘按键</li></ul></blockquote></li><li><p>事件监听:JavaScript可以在事件被侦测到时执行代码</p></li></ul><h5 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1.事件绑定"></a>1.事件绑定</h5><ul><li>两种方式</li></ul><p>方式一：通过HTML标签中的事件属性进行绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;button&quot;onclick=&#x27;on()&#x27;&gt;</span><br><span class="line">function on&#123;</span><br><span class="line">alert(&quot;我被点了&quot;)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二:通过DOM元素属性绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span>id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByld</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我被点了&quot;</span>)：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-常见事件"><a href="#2-常见事件" class="headerlink" title="2.常见事件"></a>2.常见事件</h5><table><thead><tr><th>事件名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onkeydown</td><td>某个键盘的键被按下</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><p>Event代表事件对象</p><h4 id="八-RE表达式"><a href="#八-RE表达式" class="headerlink" title="八.RE表达式"></a>八.RE表达式</h4><ul><li><p>概念:正则表达式定义了字符串组成的规则</p></li><li><p>定义</p><blockquote><p>1.直接量：注意不要加引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;var reg = /^\w&#123;6,12&#125;$/;</span><br></pre></td></tr></table></figure><p>2.创建RegExp对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;var reg = new RegExp&#123;&quot;Aw6,12)$&quot;&#125;;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法</p><blockquote><ul><li>test(str):判断指定字符串是否符合规侧，返回true或false</li></ul></blockquote></li><li><p>语法</p><blockquote><ul><li>^:表示开始</li><li>$:表示结束</li><li>[]:代表某个范围内的单个字符，比如：[0-9]单个数字字符</li><li>.:代表任意单个字符，除了换行和行结束符</li><li>\w:代表单词字符：字母、数字、下划线(<em>)，相当于[A-Za-z0-9</em>]</li><li>\d:代表数字字符：相当于[0-9]</li><li>量词：</li><li>+:至少一个  var reg = /^\w+$/;</li><li>*:零个或多个</li><li>?:零个或一个</li><li>{x}:x个</li><li>{m,}:至少m个</li><li>{m,n}:至少m个，最多n个</li></ul></blockquote></li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Java技术栈"><a href="#Java技术栈" class="headerlink" title="Java技术栈"></a>Java技术栈</h3><ul><li><p>B/S架构：Browser/Server,浏览器/服务器架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Wb资源，服务器把Wb资源发送给浏览器即可</p><blockquote><ul><li>好处：易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本</li></ul></blockquote></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013094052473.png" alt="image-20221013094052473"></p><ul><li><p>静态资源：HTML、CSS、JavaScript、图片等。负责页面展现</p></li><li><p>动态资源：Servlet、JSP等。负责逻辑处理</p></li><li><p>数据库:负责存储数据</p></li><li><p>HTTP协议:定义通信规则</p></li><li><p>Web服务器:负责解析HTTP协议,解析请求数据,并发送响应数据</p></li></ul><h4 id="一-HTTP"><a href="#一-HTTP" class="headerlink" title="一.HTTP"></a>一.HTTP</h4><ul><li>概念:HyperText Transfer Protocol,超文本传输协议，规定了浏览器和服务器之间数据传输的规则</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013095242136.png" alt="image-20221013095242136"></p><ul><li>HTTP协议特点</li></ul><ol><li><p>基于TCP协议：面向连接，安全</p></li><li><p>基于请求-响应模型的：一次请求对应一次响应</p></li><li><p>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。</p><p>缺点：多次请求间不能共享数据。Java中使用会话技术(Cookie、Session)来解决这个问题<br>优点：速度快</p></li></ol><h5 id="1-请求数据的格式"><a href="#1-请求数据的格式" class="headerlink" title="1.请求数据的格式"></a>1.请求数据的格式</h5><ul><li><p>请求数据分为3部分：</p><ol><li><strong>请求行</strong>：请求数据的第一行。其中GET表示请求方式，/表示请求资源路径，HTTP/1.1表示协议版本</li><li><strong>请求头</strong>：第二行开始，格式为key:value形式。</li><li><strong>请求体</strong>：POST请求的最后一部分，存放请求参数</li></ol></li><li><p>常见的HTTP请求头：</p><blockquote><ul><li>Host:表示请求的主机名</li><li>User-Agent:.浏览器版本，例如Chrome浏览器的标识类似Mozilla/5.0 Chrome/79,IE浏览器的标识类似Mozilla/5.0(Windows NT)like Gecko;</li><li>Accept:表示浏览器能接收的资源类型，如text/*,image/<em>或者</em>/*表示所有；</li><li>Accept-Language:表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</li><li>Accept-Encoding:表示浏览器可以支持的压缩类型，例如gzip,deflate等。</li></ul></blockquote></li><li><p>GET请求和POST请求区别：<br>1.GET请求请求参数在请求行中，没有请求体。<br>   POST请求请求参数在请求体中<br>2.GET请求请求参数大小有限制，POST没有</p></li></ul><h5 id="2-响应数据格式"><a href="#2-响应数据格式" class="headerlink" title="2.响应数据格式"></a>2.响应数据格式</h5><ul><li><p>响应数据分为3部分：</p><blockquote><p>1.<strong>响应行</strong>：响应数据的第一行。其中HTTP/1.1表示议版<br>本，200表示响应状态码，OK表示状态码描述<br>2.<strong>响应头</strong>：第二行开始，格式为key:value形式<br>3.<strong>响应体</strong>：最后一部分。存放响应数据</p></blockquote></li><li><p>常见的HTTP响应头：</p><blockquote><ul><li>Content-Type:表示该响应内容的类型，例如text/html,image/jpeg;</li><li>Content-Length:表示该响应内容的长度（字节数）：</li><li>Content-Encoding:表示该响应压缩算法，例如gzip;</li><li>Cache-Control:指示客户端应如何缓存，例如max-age=300</li><li>表示可以最多缓存300秒</li></ul></blockquote></li></ul><h6 id="2-1状态码大类"><a href="#2-1状态码大类" class="headerlink" title="2.1状态码大类"></a>2.1状态码大类</h6><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1XX</td><td><strong>响应中</strong>一一临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2XX</td><td><strong>成功</strong>一一表示请求已经被成功接收，处理已完成</td></tr><tr><td>3XX</td><td><strong>重定向</strong>一一重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4XX</td><td>客户端错误一一处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5XX</td><td>服务器端错误一一处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><h6 id="2-2常见的响应状态码"><a href="#2-2常见的响应状态码" class="headerlink" title="2.2常见的响应状态码"></a>2.2常见的响应状态码</h6><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td><strong>200</strong></td><td><strong>OK</strong></td><td>客户瑞请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong>Found</strong></td><td>指示所请求的资源已移动到由Location响应头给定的URL,浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong>Not Modified</strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong>Bad Request</strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong>Forbidden</strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td><strong>404</strong></td><td><strong>Not Found</strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td><strong>Precondition Required</strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong>Too Many Requests</strong></td><td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong>Request Header Fields Too Large</strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>405</td><td><strong>Method Not Allowed</strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td><strong>500</strong></td><td><strong>Internal Server Error</strong></td><td><strong>服务器发生不可预期的错误。</strong>服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong>Service Unavaiable</strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td><strong>Network Authentication Required</strong></td><td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td></tr></tbody></table><h4 id="二-Web服务器"><a href="#二-Web服务器" class="headerlink" title="二.Web服务器"></a>二.Web服务器</h4><ul><li>Web服务器是一个应该程序（软件），对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Wb开发更加便捷。主要功能是“提供网上信息浏览服务”</li></ul><blockquote><p>1.Web服务器作用？<br>封装HTTP协议操作，简化开发<br>可以将web项目部署到服务器中，对外提供网上浏览服务<br>2.Tomcat是一个轻量级的Web服务器，支持Servlet/小SP少量<br>JavaEE规范，也称为Web容器，Servlet容器</p></blockquote><h5 id="1-Tomcat简介"><a href="#1-Tomcat简介" class="headerlink" title="1.Tomcat简介"></a>1.Tomcat简介</h5><ul><li>概念:Tomcat是Apache软件基金会一个核心项目，是一个开源免费的轻量级Web服务器，支持Servlet/JSP少量JavaEE规范。</li><li>JavaEE:Java Enterprise Edition,Java企业版。指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDl、EJB、RMl、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</li><li>Tomcat也被称为Web容器、Servlet容器。Servlet需要依赖于Tomcat才能运行</li><li>官网:<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li></ul><h5 id="2-Tomcat基本使用"><a href="#2-Tomcat基本使用" class="headerlink" title="2.Tomcat基本使用"></a>2.Tomcat基本使用</h5><ul><li>下载：官网下载</li><li>安装：绿色版，直接解压即可</li><li>卸载：直接删除目录即可</li><li>启动：双击：bin\startup.bat</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013111255834.png" alt="image-20221013111255834"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013111233595.png" alt="image-20221013111233595"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013111323271.png" alt="image-20221013111323271"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013111343084.png" alt="image-20221013111343084"></p><ul><li><p>关闭：</p><blockquote><p>1.直接×掉运行窗口：强制关闭</p></blockquote><blockquote><p>2.bin\shutdown.bat:正常关闭</p></blockquote><blockquote><p>3.Ctrl+C:正常关闭</p></blockquote></li></ul><h5 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h5><ul><li>配置</li></ul><blockquote><p>1.修改启动端口号:config/server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span><span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注：HTTP协议默认端口号为80，如果将Tomcati端口号改为80，则将来访问Tomcat时，将不用输入端口号</p></blockquote><ul><li>启动时可能出现的问题：</li></ul><blockquote><p>1.端口号冲突：找到对应程序，将其关闭掉</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013154044325.png" alt="image-20221013154044325"></p><p>2.启动窗口一闪而过：检查JAVA_HOME环境变量是否正确配置</p></blockquote><h5 id="4-部署项目"><a href="#4-部署项目" class="headerlink" title="4.部署项目"></a>4.部署项目</h5><ul><li><p>Tomcat部署项目：<br>将项目放置到webapps目录下，即部署完成</p></li><li><p>一般JavaWeb项目会被打成<strong>war</strong>包，然后将war包放到webapps目录下，Tomcats会自动解压缩war文件</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013154451881.png" alt="image-20221013154451881"></p><h5 id="5-Web项目结构"><a href="#5-Web项目结构" class="headerlink" title="5.Web项目结构"></a>5.Web项目结构</h5><h6 id="5-1IDEA创建Maven-Web项目"><a href="#5-1IDEA创建Maven-Web项目" class="headerlink" title="5.1IDEA创建Maven Web项目"></a>5.1IDEA创建Maven Web项目</h6><ul><li>Web项目结构:</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013155223638.png" alt="image-20221013155223638"></p><ul><li><p>编译后的ava字节码文件和resources的资源文件，放到WEB-lNF下的classes目录下</p></li><li><p>pom.xml中依赖坐标对应的jar包，放入WEB-NF下的Iib目录下</p></li><li><p>使用骨架</p></li></ul><blockquote><ul><li>骨架:项目模板</li></ul></blockquote><p>1.选择web项目骨架，创建项目</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185233785.png" alt="image-20221013185233785"></p><p>2.删除pom.xml中多余的坐标</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185312804.png" alt="image-20221013185312804"></p><p>3.补齐缺失的目录结构</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185553883.png" alt="image-20221013185553883"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185609664.png" alt="image-20221013185609664"></p><ul><li>不使用骨架</li></ul><p>1.选择web项目骨架，创建项目</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185740554.png" alt="image-20221013185740554"></p><p>此处不勾选</p><p>2.pom.xml中添加打包方式为war</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185834181.png" alt="image-20221013185834181"></p><p>3.补齐缺失的目录结构：webapp</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185420694.png" alt="image-20221013185420694"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185441540.png" alt="image-20221013185441540"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185459360.png" alt="image-20221013185459360"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013185512853.png" alt="image-20221013185512853"></p><h5 id="6-IDEA中使用Tomcat"><a href="#6-IDEA中使用Tomcat" class="headerlink" title="6.IDEA中使用Tomcat"></a>6.IDEA中使用Tomcat</h5><h6 id="6-1集成本地Tomcat"><a href="#6-1集成本地Tomcat" class="headerlink" title="6.1集成本地Tomcat"></a>6.1集成本地Tomcat</h6><ul><li>将本地Tomcat集成到ldea中，然后进行项目部署即可</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013191303224.png" alt="image-20221013191303224"></p><h6 id="6-2Tomcat-Maven插件"><a href="#6-2Tomcat-Maven插件" class="headerlink" title="6.2Tomcat Maven插件"></a>6.2Tomcat Maven插件</h6><ul><li>pom.xml添加Tomcat插件</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013194438231.png" alt="image-20221013194438231"></p><ul><li>使用Maven Helper插件快速启动项目，选中项目，右键->Run Maven->tomcat7:run</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221013194504837.png" alt="image-20221013194504837"></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li>Servlet是Java提供的一门动态web资源开发技术</li><li>Servlet是avaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet</li></ul><h3 id="一-入门"><a href="#一-入门" class="headerlink" title="一.入门"></a>一.入门</h3><h4 id="1-快速入门-1"><a href="#1-快速入门-1" class="headerlink" title="1.快速入门"></a>1.快速入门</h4><ul><li>创建web项目，导入Servlet依赖坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建：定义一个类，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置：在类上使用@WebServlet注解，配置该Servlet的访问路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletDemo1</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>访问：启动Tomcat,浏览器输入URL访问该Servlet</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/web-demo/demo1</span><br></pre></td></tr></table></figure><h4 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.执行流程"></a>2.执行流程</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221014113508871.png" alt="image-20221014113508871"></p><h5 id="2-1Servlet由谁创建？Servlet方法由谁调用？"><a href="#2-1Servlet由谁创建？Servlet方法由谁调用？" class="headerlink" title="2.1Servlet由谁创建？Servlet方法由谁调用？"></a>2.1Servlet由谁创建？Servlet方法由谁调用？</h5><p>Servlet由web服务器创建，Servlet方法由web服务器调用。</p><h5 id="2-2服务器怎么知道Servlet中一定有service方法？"><a href="#2-2服务器怎么知道Servlet中一定有service方法？" class="headerlink" title="2.2服务器怎么知道Servlet中一定有service方法？"></a>2.2服务器怎么知道Servlet中一定有service方法？</h5><p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法</p><h3 id="二-流程"><a href="#二-流程" class="headerlink" title="二.流程"></a>二.流程</h3><h4 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h4><ul><li>对象的生命周期指一个对象从被创建到被销毁的整个过程</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221014113914318.png" alt="image-20221014113914318"></p><ul><li><p>Servleti运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：</p><blockquote><p>1.<strong>加载和实例化</strong>：默认情况下，当Servlet?第一次被访问时，由容器创建Servlet对象</p><p>2**.初始化<strong>：在Servlet实例化之后，容器将调用Servlet的</strong>init()<strong>方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只</strong>调用一次**</p><p>3.<strong>请求处理</strong>：<strong>每次</strong>请求Servlet时，Servlet容器都会调用Servlet的**service()**方法对请求进行处理。</p><p>4.<strong>服务终止</strong>：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/demo&quot;,loadOnStartup =1)</span></span><br></pre></td></tr></table></figure><ul><li>负整数：第一次被访问时创建Servlet对象</li><li>0或正整数：服务器启动时创建Servlet对象数字越小优先级越高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *初始化方法</span></span><br><span class="line"><span class="comment"> *1.调用时机：默认情况下，Servlet被第一次访问时，调用</span></span><br><span class="line"><span class="comment"> **loadOnStartUp:</span></span><br><span class="line"><span class="comment"> *2.调用次数：1次</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span><span class="keyword">throws</span> ServletException&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *提供服务</span></span><br><span class="line"><span class="comment"> *1.调用时机：每一次ServLet被访问时，调用</span></span><br><span class="line"><span class="comment"> *2.调用次数：多次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> reg</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> res</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req,ServletResponse res)</span><span class="keyword">throws</span> ServletException,IOException&#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;servlet hello world~&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *销毁方法</span><br><span class="line"> *1.调用时机：内存释放或者服务器关闭的时候，Servlet对象会被销毁，调用</span><br><span class="line"> *2.调用次数：1次</span><br><span class="line"> */</span><br><span class="line"> @override</span><br><span class="line"> public void destroy()&#123;</span><br><span class="line"> System.out.println(&quot;destroy...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-方法介绍"><a href="#2-方法介绍" class="headerlink" title="2.方法介绍"></a>2.方法介绍</h4><ul><li><p>初始化方法，在Servleti被创建时执行，只执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span></span><br></pre></td></tr></table></figure></li><li><p>提供服务方法，每次Servleti被访问，都会调用该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req,ServletResponse res)</span></span><br></pre></td></tr></table></figure></li><li><p>销毁方法，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void destroy()</span><br></pre></td></tr></table></figure></li><li><p>获取ServletConfig对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li><li><p>获取Servlet信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-体系结构"><a href="#4-体系结构" class="headerlink" title="4.体系结构"></a>4.体系结构</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221014171415209.png" alt="image-20221014171415209"></p><p>我们将来开发B/S架构的web项目，都是针对HTTP协议,所以我们自定义Servlet,会继承<strong>HttpServlet</strong></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221014171514348.png" alt="image-20221014171514348"></p><h4 id="5-urlPattern配置"><a href="#5-urlPattern配置" class="headerlink" title="5.urlPattern配置"></a>5.urlPattern配置</h4><ul><li><p>Servlet要想被访问，必须配置其访问路径(urlPattern)</p><blockquote><p>1.一个Servlet,可以配置多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;urlPattern<span class="meta">@Webservlet(urlPatterns =&#123;&quot;/demo1&quot;,&quot;/demo2&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>2.urlPattern配置规则<br>①精确匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;配置路径：<span class="meta">@WebServlet(&quot;/user/select&quot;)</span></span><br><span class="line">&gt;访问路径：localhost:8080web-demo/user/select</span><br></pre></td></tr></table></figure><p>②目录匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;配置路径：WebServlet(<span class="string">&quot;/user/*&quot;</span>)</span><br><span class="line">localhost:<span class="number">8080</span>/web-demd/user/aaa</span><br><span class="line">&gt;访问路径：</span><br><span class="line">localhost:<span class="number">8080</span>/web-demo/user/bbb </span><br></pre></td></tr></table></figure><p>③扩展名匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &gt;配置路径：<span class="meta">@WebServlet(&quot;*.do&quot;)</span></span><br><span class="line">localhost:<span class="number">8080</span>/web-demd/aaa.<span class="keyword">do</span></span><br><span class="line"> &gt;访问路径:</span><br><span class="line">localhost:<span class="number">8080</span>/web-demo/bbb.<span class="keyword">do</span></span><br></pre></td></tr></table></figure><p>④任意匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/&quot;)</span></span><br><span class="line">&gt;配置路径：</span><br><span class="line"><span class="meta">@WebServlet(&quot;/*&quot;)</span></span><br><span class="line"></span><br><span class="line">localhost:<span class="number">8080</span>/web-demd/hehe</span><br><span class="line">&gt;访问路径：</span><br><span class="line">localhost:<span class="number">8080</span>/web-demo/haha</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>/和/*区别：<br>当我们的项目中的Servleti配置了"/”，会覆盖掉tomcat中的<br>DefaultServlet,当其他的url-pattern都匹配不上时都会走这<br>个Servlet</p><p>当我们的项目中配置了“/*”，意味着匹配任意访问路径</p></blockquote><h4 id="6-XML配置方式编写Servlet"><a href="#6-XML配置方式编写Servlet" class="headerlink" title="6.XML配置方式编写Servlet"></a>6.XML配置方式编写Servlet</h4><ul><li><p>Servlet从3.0版本后开始支持使用注解配置，3.0版本前只支持XML配置文件的配置方式</p></li><li><p>步骤</p><blockquote><p>1.编写Servlet类<br>2.在web.xml中配置该Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.itheima.web.servlet.ServletDemo5<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="Request-Response"><a href="#Request-Response" class="headerlink" title="Request&Response"></a>Request&Response</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015084537789.png" alt="image-20221015084537789"></p><ul><li>Request:获取请求数据</li><li>Response:设置响应数据</li></ul><h3 id="一-Request对象"><a href="#一-Request对象" class="headerlink" title="一.Request对象"></a>一.Request对象</h3><h4 id="1-Request继承体系"><a href="#1-Request继承体系" class="headerlink" title="1.Request继承体系"></a>1.Request继承体系</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015095402692.png" alt="image-20221015095402692"></p><ul><li>Tomcat需要解析请求数据，封装为requestx对象并且创建requestx对象传递到service方法中</li><li>使用request对象，查阅JavaEE API文档的HttpServletRequest接口</li></ul><h4 id="2-Request获取请求数据"><a href="#2-Request获取请求数据" class="headerlink" title="2.Request获取请求数据"></a>2.Request获取请求数据</h4><h5 id="2-1获取请求数据"><a href="#2-1获取请求数据" class="headerlink" title="2.1获取请求数据"></a>2.1获取请求数据</h5><ul><li><p>请求数据分为3部分:</p><blockquote><p>1.请求行:</p><p>GET /request-demo/req1?username=zhangsan HTTP/1.1</p><ul><li>String getMethod():获取请求方式：GET</li><li>String getContextPath():获取虚拟目录（项目访问路径）：/request-demo</li><li>StringBuffer getRequestURL0:获取URL(统一资源定位符)：http:/localhost:8080/request-demo/req1</li><li>String getRequestURI():获取URI(统一资源标识符)：/request-demo/req1</li><li>String getQueryString() :获取请求参数(GET方式)：username=zhangsan&password=123</li></ul><p>2.请求头</p><p>User-Agent:Mozilla/5.0 Chrome/91.0.4472.106</p><ul><li><p>String getHeader(String name):根据请求头名称，获取值</p></li><li></li></ul><p>3.请求体</p><p>username=superbaby&password=123</p><ul><li>ServletInputStream getlnputStream():获取字节输入流</li><li>BufferedReader getReader(():获取字符输入流</li></ul></blockquote></li></ul><h5 id="2-2通用方式获取请求参数"><a href="#2-2通用方式获取请求参数" class="headerlink" title="2.2通用方式获取请求参数"></a>2.2通用方式获取请求参数</h5><ul><li><p>请求参数获取方式</p><blockquote><p>get方式:</p><p>String getQueryString()</p><p>post方式:</p><p>BufferedReader getReader()</p></blockquote></li></ul><h5 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h5><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种<strong>统一</strong>获取请求参数的方式，从而<strong>统一</strong>doGet和doPost方法内的代码？</p><h4 id="3-Request通用方式获取请求参数"><a href="#3-Request通用方式获取请求参数" class="headerlink" title="3.Request通用方式获取请求参数"></a>3.Request通用方式获取请求参数</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015104523429.png" alt="image-20221015104523429"></p><ul><li><p>Map<String,String[]>getParameterMap():获取所有参数Map集合</p></li><li><p>String[]getParameterValues(String name):根据名称获取参教值（数组）</p></li><li><p>String getParameter(String name):根据名称获取参数值（单个值）</p></li><li><p>使用通用方式获取请求参数后，屏蔽了GET和POST的请求方式代码的不同，则代码可以定义为如下格式：</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &gt;<span class="meta">@WebServlet(&quot;/reqDemo3&quot;)</span></span><br><span class="line"> &gt;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req,HttpServletResponse resp)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req,HttpServletResponse resp)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.doGet(req,resp);</span><br><span class="line">&#125;</span><br><span class="line"> &gt;&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>可以使用Servlet模板创建Servlet更高效</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015111250096.png" alt="image-20221015111250096"></p><h5 id="若是没有new-Servlet选项"><a href="#若是没有new-Servlet选项" class="headerlink" title="若是没有new Servlet选项"></a>若是没有new Servlet选项</h5><ol><li>在pom.xml文里导入servlet得依赖<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015132441685.png" alt="image-20221015132441685"></li><li>在File里的Project Structure找到Modules<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015132704638.png" alt="image-20221015132704638"></li><li>点击Dependencies勾选servlet-api的选项<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015132818874.png" alt="image-20221015132818874"></li></ol><ul><li>若想改变模板的格式</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015133518929.png" alt="image-20221015133518929"></p><h4 id="4-Request请求参数中文乱码"><a href="#4-Request请求参数中文乱码" class="headerlink" title="4.Request请求参数中文乱码"></a>4.Request请求参数中文乱码</h4><ul><li>请求参数如果存在中文数据，则会乱码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POST的乱码</span></span><br><span class="line"><span class="comment">//1.解决乱码：PoST的底层实现是getReader</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//设置字符输入流的编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要先设置编码格式,否则后续仍然会中文乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取username</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">System.out.println(username);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GET的乱码</span></span><br><span class="line"><span class="comment">//1.GET,获取参数的方式：getQuerystring</span></span><br><span class="line"><span class="comment">//乱码原因：tomcat进行URL解码，默认的字符集IS0-8859-1</span></span><br><span class="line"><span class="comment">//1.1先对乱码数据进行编码：转为字节数组</span></span><br><span class="line">username.getByte(StandardCharsets.IS0_8859_1);</span><br><span class="line"><span class="comment">//1.2字节数组解码</span></span><br><span class="line">username = <span class="keyword">new</span> <span class="title class_">String</span>(bytes,StandardCharsets.ISO_8859_1)</span><br><span class="line"><span class="comment">//1.1和1.2可合为一行</span></span><br><span class="line">username = <span class="keyword">new</span> <span class="title class_">String</span>(username.getBytes((StandardCharsets.ISO_8859_1),StandardCharsets.ISO_8859_1);</span><br></pre></td></tr></table></figure><ul><li>get的乱码原因</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015135515956.png" alt="image-20221015135515956"></p><ul><li><p>URL编码</p><blockquote><p>1.将字符串按照编码方式转为二进制<br>2.每个字节转为2个16进制数并在前边加上%</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015135803178.png" alt="image-20221015135803178"></p></blockquote></li><li><p>解决方案:</p><blockquote><p>POST:设置输入流的编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>通用方式(GET/POST):先编码，再解码</p><p>new String(username.getBytes("ISO-8859-1"),"UTF-8");</p></blockquote></li></ul><p><strong>Tomcat8.0之后，已将GET请求乱码问题解决，设</strong><br><strong>置默认的解码方式为UTF-8</strong></p><h4 id="5-Request请求转发"><a href="#5-Request请求转发" class="headerlink" title="5.Request请求转发"></a>5.Request请求转发</h4><ul><li>请求转发(forward):一种在服务器内部的资源跳转方式</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015141804163.png" alt="image-20221015141804163"></p><ul><li>实现方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestDispatcher((<span class="string">&quot;资源B路径&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><ul><li><p>请求转发资源间共享数据：使用Request对象</p><blockquote><ul><li>void setAttribute(String name,Object o):存储数据到request域中</li><li>Object getAttribute(String name):根据key,获取值</li><li>void removeAttribute(String name):根据key,<br> 删除该键值对</li></ul></blockquote></li><li><p>请求转发特点：</p><blockquote><p>浏览器地址栏路径不发生变化<br>只能转发到当前服务器的内部资源<br>一次请求，可以在转发的资源间使用request共享数据</p></blockquote></li></ul><h3 id="二-Response对象"><a href="#二-Response对象" class="headerlink" title="二.Response对象"></a>二.Response对象</h3><h4 id="1-Response设置响应数据功能介绍"><a href="#1-Response设置响应数据功能介绍" class="headerlink" title="1.Response设置响应数据功能介绍"></a>1.Response设置响应数据功能介绍</h4><ul><li><p>响应数据分为3部分</p><blockquote><p>1.响应行：</p><p>HTTP/1.1 200 OK</p><ul><li>void setStatus(int sc):设置响应状态码</li></ul><p>2.响应头：</p><p>Content-Type:text/html</p><ul><li>void setHeader((String name,String value):设置响应头键值对</li></ul><p>3.响应体：</p><html><head>head><body></body></html><ul><li>PrintWriter getWriter():获取字符输出流</li><li>ServletOutputStream getQutputStream():获取字节输出流</li></ul></blockquote></li></ul><h4 id="2-Response完成重定向"><a href="#2-Response完成重定向" class="headerlink" title="2.Response完成重定向"></a>2.Response完成重定向</h4><ul><li>重定向(Redirect):一种资源跳转方式</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221015143524237.png" alt="image-20221015143524237"></p><ul><li>实现方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line">resp.setHeader(<span class="string">&quot;location&quot;</span>,“资源B的路径<span class="string">&quot;)；</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;资源B的路径&quot;</span>)；</span><br></pre></td></tr></table></figure><ul><li><p>重定向的特点</p><blockquote><p>浏览器地址栏路径发生变化<br>可以重定向到任意位置的资源（服务器内部、外部均可）<br>两次请求，不能在多个资源使用request共享数据</p></blockquote></li><li><p>路径问题</p></li></ul><p>是否要加虚拟目录</p><p>明确路径谁使用？<br><strong>浏览器使用：需要加虚拟目录（项目访问路径）</strong><br><strong>服务端使用：不需要加虚拟目录</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化方式完成重定向</span></span><br><span class="line"><span class="comment">//动态获取虚拟目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextPath</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">response.sendRedirect(contextPath+<span class="string">&quot;/resp2&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-Response响应字符数据"><a href="#3-Response响应字符数据" class="headerlink" title="3.Response响应字符数据"></a>3.Response响应字符数据</h4><ul><li><p>使用<br>1.通过Response对象获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter()</span><br></pre></td></tr></table></figure><p>2.写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.write(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><p>正常写入数据就调用write方法即可,如想要写入html文本语言,则要设置ContentType</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">//1.获取字符输出流</span><br><span class="line">PrintWriter writer response.getWriter();</span><br><span class="line">//content-type</span><br><span class="line">//response.setHeader(&quot;content-type&quot;,&quot;text/html&quot;);</span><br><span class="line">writer.write(s:&quot;你好&quot;)；</span><br><span class="line">writer.write(s:&quot;&lt;h1&gt;aaa&lt;/h1&gt;&quot;);</span><br><span class="line">//细节：流不需要关闭</span><br></pre></td></tr></table></figure><ul><li><p>注意<br>该流<strong>不需要关闭</strong>，随着响应结束，response对象销毁，由服务器关闭<br>中文数据乱码：原因通过Response获取的字符输出流默认编码：ISO-8859-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-Response响应字节数据"><a href="#4-Response响应字节数据" class="headerlink" title="4.Response响应字节数据"></a>4.Response响应字节数据</h4><ul><li><p>使用<br>1.通过Responsel对象获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br></pre></td></tr></table></figure><p>2.写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputStream,write(字节数据)：</span><br></pre></td></tr></table></figure></li><li><p>IOUtils工具类使用<br>1.导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOUtils.copy(输入流，输出流)；</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-SqlSession工具类抽取"><a href="#5-SqlSession工具类抽取" class="headerlink" title="5.SqlSession工具类抽取"></a>5.SqlSession工具类抽取</h4><ul><li><p>创建SqlSessionFactory代码优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取SqlSessionFactory对象</span></span><br><span class="line">String resource <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">Inputstream</span> <span class="variable">inputstream</span> <span class="operator">=</span> Resources.getResourceAsstream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputstream);</span><br></pre></td></tr></table></figure></li><li><p>问题<br>1.代码重复:工具类<br>2.SqlSessionFactory工厂只创建一次,不要重复创建:静态代码块</p></li></ul><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="一-入门-1"><a href="#一-入门-1" class="headerlink" title="一.入门"></a>一.入门</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><ul><li>Java Server Pages,Java服务端页面</li><li>一种动态的网页技术，其中既可以定义HTML、JS、CSS等静态内容，还可以定义Java代码的动态内容</li><li>JSP = HTML+Java</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016082337865.png" alt="image-20221016082337865"></p><h4 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><ul><li><p>导入JSP坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建JSP文件<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016084526668.png" alt="image-20221016084526668"></p></li><li><p>编写HTML标签和Java代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello jsp~&lt;h1&gt;</span><br><span class="line">&lt;%System.out.printf(<span class="string">&quot;jsp,hello~&quot;</span>);%&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-原理"><a href="#3-原理" class="headerlink" title="3.原理"></a>3.原理</h4><ul><li>概念：Java Server Pages,Java服务端页面</li><li>JSP=HTML+Java,用于简化开发的</li><li>JSP本质上就是一个Servlet</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016102956490.png" alt="image-20221016102956490"></p><h3 id="二-脚本"><a href="#二-脚本" class="headerlink" title="二.脚本"></a>二.脚本</h3><h4 id="1-JSP脚本"><a href="#1-JSP脚本" class="headerlink" title="1.JSP脚本"></a>1.JSP脚本</h4><ul><li>JSP脚本用于在JSP页面内定义Java代码</li><li>JSP脚本分类：<ol><li><%..%>:内容会直接放到」jspService()方法之中</li><li><%=...%>:内容会放到out.print()中，作为out.print()的参数</li><li><%!...%>:内容会放到jspService()方法之外，被类直接包含<br>成员位置</li></ol></li></ul><h4 id="2-JSP缺点"><a href="#2-JSP缺点" class="headerlink" title="2.JSP缺点"></a>2.JSP缺点</h4><ul><li>由于JSP页面内，既可以定义HTML标签，又可以定义Java代码，造成了以下问题<ol><li>书写麻烦：特别是复杂的页面</li><li>阅读麻烦</li><li>复杂度高：运行需要依赖于各种环境，JRE,JSP容器，JavaEE.</li><li>占内存和磁盘：JSP会自动生成.java和.class文件占磁盘，运行的是.class文件占内存</li><li>调试困难：出错后，需要找到自动生成的java文件进行调试</li><li>不利于团队协作：前端人员不会Java,后端人员不精HTML</li><li>...</li></ol></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016110020331.png" alt="image-20221016110020331"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016110312645.png" alt="image-20221016110312645"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016110342901.png" alt="image-20221016110342901"></p><h4 id="3-EL表达式"><a href="#3-EL表达式" class="headerlink" title="3.EL表达式"></a>3.EL表达式</h4><ul><li><p>Expression Language表达式语言，用于简化JSP页面内的Java代码</p></li><li><p>主要功能:获取数据</p></li><li><p>语法:${expression}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;brands&#125;    :获取域中存储的key为brands的数据</span><br></pre></td></tr></table></figure></li><li><p>JavaWeb中的四大域对象</p><ol><li>page:当前页面有效</li><li>request:当前请求有效</li><li>session:当前会话有效</li><li>application:当前应用有效</li></ol><p><strong>表达式获取数据，会依次从这4个域中寻找，直到找到为止</strong></p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016132220144.png" alt="image-20221016132220144"></p><h4 id="4-JSTL标签"><a href="#4-JSTL标签" class="headerlink" title="4.JSTL标签"></a>4.JSTL标签</h4><ul><li><p>JSP标准标签库(Jsp Standarded Tag Library),使用标签取代JSP页面上的Java代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$(flag==1&#125;&quot;</span>&gt;</span><br><span class="line">男</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$(flag==2)&quot;</span>&gt;</span><br><span class="line">女</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-1快速入门"><a href="#4-1快速入门" class="headerlink" title="4.1快速入门"></a>4.1快速入门</h5><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在JSP页面上引入JSTL标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix = <span class="string">&quot;c&quot;</span> uri = <span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-2-c-if"><a href="#4-2-c-if" class="headerlink" title="4.2 c:if"></a>4.2 c:if</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if&gt;:相当于if判断</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;<span class="literal">true</span>&lt;/h1&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;<span class="literal">false</span>&lt;/h1&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="4-3-c-foreach"><a href="#4-3-c-foreach" class="headerlink" title="4.3 c:foreach"></a>4.3 c:foreach</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:foreach&gt;:相当于for循环</span><br></pre></td></tr></table></figure><ul><li>items:被遍历的容器</li><li>var:遍历产生的临时变量</li><li>varStatus:遍历状态对象</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;brands&#125;&quot;</span><span class="keyword">var</span>=<span class="string">&quot;brand&quot;</span>&gt;</span><br><span class="line">    &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.brandName&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.companyName&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Brandbrand:brands)&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> brand.getld();</span><br><span class="line">    <span class="type">String</span> <span class="variable">imgUrl</span> <span class="operator">=</span> brand.getlmgUrl();</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> brand.getBrandName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> brand.getCompanyName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>begin:开始数</li><li>end:结束数</li><li>step:步长</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">&quot;O&quot;</span>end=<span class="string">&quot;10&quot;</span>step=<span class="string">&quot;1&quot;</span><span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">$&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">System.out.println(i)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="三-MVC模式及三层架构"><a href="#三-MVC模式及三层架构" class="headerlink" title="三.MVC模式及三层架构"></a>三.MVC模式及三层架构</h3><h4 id="1-MVC模式"><a href="#1-MVC模式" class="headerlink" title="1.MVC模式"></a>1.MVC模式</h4><ul><li>MVC是一种分层开发的模式，其中：<ul><li>M:Model,业务模型，处理业务</li><li>V:View,视图，界面展示</li><li>C:Controller,控制器，处理请求，调用模型和视图</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016154849908.png" alt="image-20221016154849908"></p><ul><li>MVC好处<ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重用</li></ul></li></ul><h4 id="2-三层架构"><a href="#2-三层架构" class="headerlink" title="2.三层架构"></a>2.三层架构</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016160023181.png" alt="image-20221016160023181"></p><ul><li>数据访问层：对数据库的CRUD基本操作</li><li>业务逻辑层：对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑功能</li><li>表现层：接收请求，封装数据，调用业务逻辑层，响应数据</li></ul><h4 id="3-MVC模式和三层架构"><a href="#3-MVC模式和三层架构" class="headerlink" title="3.MVC模式和三层架构"></a>3.MVC模式和三层架构</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221016160321419.png" alt="image-20221016160321419"></p><h2 id="会话跟踪技术"><a href="#会话跟踪技术" class="headerlink" title="会话跟踪技术"></a>会话跟踪技术</h2><ul><li>会话:用户打开浏览器，访问wb服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含<strong>多次</strong>请求和响应</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221018184927775.png" alt="image-20221018184927775"></p><ul><li><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间<strong>共享数据</strong></p></li><li><p>HTTP协议是<strong>无状态</strong>的，每次浏览器向服务器请求时，服务器都会将该请求视为新的请求，因此我们需要会话跟踪技术来实现会话内数据共享</p></li><li><p>实现方式：<br>1.客户端会话跟踪技术：<strong>Cookie</strong><br>2.服务端会话跟踪技术：<strong>Session</strong></p></li></ul><h3 id="一-Cookie"><a href="#一-Cookie" class="headerlink" title="一.Cookie"></a>一.Cookie</h3><h4 id="1-Cookie基本使用"><a href="#1-Cookie基本使用" class="headerlink" title="1.Cookie基本使用"></a>1.Cookie基本使用</h4><ul><li><p>Cookie：客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问</p></li><li><p>基本使用</p><p><strong>发送Cookie</strong></p><p>1.创建Cookie对象,设置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">dookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.发送Cookie到客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><strong>获取Cookie</strong></p><p>3.获取客户端携带的所有Cookie,使用request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie[]cookies = request.getCookies();</span><br></pre></td></tr></table></figure><p>4.遍历数组，获取每一个Cookie对象：for</p><p>5.使用Cookie对象方法获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.getName();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.getValue();</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Cookie原理"><a href="#2-Cookie原理" class="headerlink" title="2.Cookie原理"></a>2.Cookie原理</h4><ul><li>Cookie的实现是基于HTTP协议的<ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221018190944866.png" alt="image-20221018190944866"></p><h4 id="3-Cookie使用细节"><a href="#3-Cookie使用细节" class="headerlink" title="3.Cookie使用细节"></a>3.Cookie使用细节</h4><ul><li>Cookie存活时间<ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li><li>setMaxAge(int seconds).:设置Cookie存话时间<br>1.正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除<br>2.负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁<br>3.零：删除对应Cookie</li></ul></li><li>Cookie存储中文<ul><li>Cookie不能直接存储中文</li><li>如需要存储，则需要进行转码：URL编码</li></ul></li></ul><h3 id="二-Session"><a href="#二-Session" class="headerlink" title="二.Session"></a>二.Session</h3><h4 id="1-Session基本使用"><a href="#1-Session基本使用" class="headerlink" title="1.Session基本使用"></a>1.Session基本使用</h4><ul><li><p>服务端会话跟踪技术：将数据保存到服务端</p></li><li><p>JavaEE提供HttpSession接口，来实现一次会话的多次请求间数据共享功能</p></li><li><p>使用:<br>1.获取Session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure><p>2.Session对象功能:</p><ul><li>void setAttribute(String name,Object o):存储数据到session域中</li><li>Object getAttribute(String name:根据key,获取值</li><li>void removeAttribute(String name):根据key,删除该键值对</li></ul></li></ul><h4 id="2-Session原理"><a href="#2-Session原理" class="headerlink" title="2.Session原理"></a>2.Session原理</h4><ul><li>Session是基于Cookie实现的</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221018200541455.png" alt="image-20221018200541455"></p><h4 id="3-Session使用细节"><a href="#3-Session使用细节" class="headerlink" title="3.Session使用细节"></a>3.Session使用细节</h4><ul><li><p>Session钝化、活化:</p><ul><li>服务器重启后，Session中的数据是否还在？</li><li>钝化：在服务器正常关闭后，Tomcat:会自动将Session数据写入硬盘的文件中</li><li>活化：再次启动服务器后，从文件中加载数据到Session中</li></ul></li><li><p>Session销毁:</p><ul><li><p>默认情况下，无操作，30分钟自动销毁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用Session对象的invalidate()方法</p></li></ul></li></ul><h3 id="三-小结"><a href="#三-小结" class="headerlink" title="三.小结"></a>三.小结</h3><ul><li>Cookie和Session都是来完成一次会话内多次请求间数据共享的</li><li>区别<ul><li>存储位置：Cookie是将数据存储在客户端，Session将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>数据大小：Cookie最大3KB,Session无大小限制</li><li>存储时间：Cookie可以长期存储，Session默认30分钟</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul></li></ul><h2 id="Filter和Listener"><a href="#Filter和Listener" class="headerlink" title="Filter和Listener"></a>Filter和Listener</h2><h3 id="一-Filter"><a href="#一-Filter" class="headerlink" title="一.Filter"></a>一.Filter</h3><ul><li>概念：Filter表示过滤器，是JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而实现一些特殊的功能。</li><li>过滤器一般完成一些<strong>通用</strong>的操作，比如：权限控制、统一编码处理、敏感字符处理等等</li></ul><p><img src="C:\Users\24946\AppData\Roaming\Typora\typora-user-images\image-20221020204824927.png" alt="image-20221020204824927"></p><h4 id="1-快速入门-2"><a href="#1-快速入门-2" class="headerlink" title="1.快速入门"></a>1.快速入门</h4><ul><li><p>定义类，实现Filter接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request</span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> <span class="keyword">void</span> destroy()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Filter拦截资源的路径：在类上定义@WebFilter注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>在doFilter方法中输出一句话，并放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request,Ser</span></span><br><span class="line"><span class="params">    System.out.println(<span class="string">&quot;filter被执行了...&quot;</span>)</span>；</span><br><span class="line">    <span class="comment">//放行</span></span><br><span class="line">    chain.doFilter(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Filter执行流程"><a href="#2-Filter执行流程" class="headerlink" title="2.Filter执行流程"></a>2.Filter执行流程</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221020205708487.png" alt="image-20221020205708487"></p><p>1.放行后访问对应资源，资源访问完成后，还会回到Fter中吗？  会</p><p>2.如果回到Filter中，是重头执行还是执行放行后的逻辑呢？放行后逻辑</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221020211035097.png" alt="image-20221020211035097"></p><h4 id="3-使用细节"><a href="#3-使用细节" class="headerlink" title="3.使用细节"></a>3.使用细节</h4><h5 id="3-1Filter拦截路径配置"><a href="#3-1Filter拦截路径配置" class="headerlink" title="3.1Filter拦截路径配置"></a>3.1Filter拦截路径配置</h5><ul><li><p>Filter可以根据需求，配置不同的拦截资源路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span></span><br></pre></td></tr></table></figure><ul><li>拦截具体的资源：/index,jsp:只有访问lindex,jsp时才会被拦截。</li><li>目录拦截：/user/<em>:访问/user下的所有资源，都会被拦截<br>后缀名拦截：</em></li><li>jsp:访问后缀名为jsp的资源，都会被拦截</li><li>拦截所有：*：访问所有资源，都会被拦截</li></ul></li></ul><h5 id="3-2过滤器链"><a href="#3-2过滤器链" class="headerlink" title="3.2过滤器链"></a>3.2过滤器链</h5><ul><li>一个Web应用，可以配置多个过滤器，这多个过滤器称为过滤器链</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221021175505738.png" alt="image-20221021175505738"></p><ul><li>注解配置的Filter,优先级按照过滤器类名（字符串）的自然排序</li></ul><h3 id="二-监听器"><a href="#二-监听器" class="headerlink" title="二.监听器"></a>二.监听器</h3><ul><li>概念：Listener表示监听器，是JavaWeb三大组件(Servlet、Filter、Listener)之一。</li><li>监听器可以监听就是在application,session,request:三个对象创建、销毁或者往其中添加修改删除<br>属性时<strong>自动</strong>执行代码的功能组件</li><li>Listener分类：JavaWeb中提供了8个监听器</li></ul><table><thead><tr><th>监听器分类</th><th>监听器名称</th><th>作用</th></tr></thead><tbody><tr><td>ServletContext监听</td><td>ServletContextListener</td><td>用于对ServletContextx对象进行监听（创建、销毁）</td></tr><tr><td></td><td>ServletContextAttributeListener</td><td>对ServletContext对象中属性的监听（增删改属性）</td></tr><tr><td>Session监听</td><td>HttpSessionListener</td><td>对Session对象的整体状态的监听（创建、销毁）</td></tr><tr><td></td><td>HttpSessionAttributeListener</td><td>对Session对象中的属性监听（增删改属性）</td></tr><tr><td></td><td>HttpSessionBindingListener</td><td>监听对象于Sessionl的绑定和解除</td></tr><tr><td></td><td>HttpSessionActivationListener</td><td>对Session数据的钝化和活化的监听</td></tr><tr><td>Request监听</td><td>ServletRequestListener</td><td>对Request对象进行监听（创建、销毁）</td></tr><tr><td></td><td>ServletRequestAttributeListener</td><td>对Request对象中属性的监听（增删改属性）</td></tr></tbody></table><h2 id="Ajax-Axios-JSON"><a href="#Ajax-Axios-JSON" class="headerlink" title="Ajax&Axios&JSON"></a>Ajax&Axios&JSON</h2><ul><li><p>概念:AJAX(<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML):<strong>异步</strong>的JavaScript和XML</p></li><li><p>AJAX作用:<br>1.与服务器进行数据交换：通过AJAX可以给服务器发送请求，并获取服务器响应的数据</p><ul><li>使用了AJAX和服务器进行通信，就可以使用HTML+AJAX来<strong>替换JSP</strong>页面了<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221022084321376.png" alt="image-20221022084321376"></li></ul><p>2.异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分</strong>网页的技术，如：搜索联想、用户名是否可用校验，等等.</p></li></ul><h3 id="一-AJAX"><a href="#一-AJAX" class="headerlink" title="一.AJAX"></a>一.AJAX</h3><h4 id="1-同步异步"><a href="#1-同步异步" class="headerlink" title="1.同步异步"></a>1.同步异步</h4><h5 id="1-1同步"><a href="#1-1同步" class="headerlink" title="1.1同步"></a>1.1同步</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221022084940902.png" alt="image-20221022084940902"></p><h5 id="1-2异步"><a href="#1-2异步" class="headerlink" title="1.2异步"></a>1.2异步</h5><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221022085234917.png" alt="image-20221022085234917"></p><h4 id="2-快速入门-1"><a href="#2-快速入门-1" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><ul><li><p>编写AjaxServlet,并使用response输出字符串</p></li><li><p>创建XMLHttpRequest对象：用于和服务器交换数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)&#123;</span><br><span class="line"><span class="comment">//code for IE7+,Firefox,Chrome,Opera,Safari</span></span><br><span class="line">xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">)<span class="keyword">else</span>&#123;</span><br><span class="line">∥code <span class="keyword">for</span> <span class="title class_">IE6</span>,<span class="title class_">IE5</span></span><br><span class="line">xmlhttp <span class="keyword">new</span> = <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>向服务器发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;url&quot;</span>);</span><br><span class="line">xmlhttp.<span class="title function_">send</span>(O;∥发送请求</span><br></pre></td></tr></table></figure></li><li><p>获取服务器响应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.<span class="property">onreadystatechange</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(xmlhttp.<span class="property">readyState</span> ==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> ==<span class="number">200</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="二-AXIOS"><a href="#二-AXIOS" class="headerlink" title="二.AXIOS"></a>二.AXIOS</h3><h4 id="1-Axios异步框架"><a href="#1-Axios异步框架" class="headerlink" title="1.Axios异步框架"></a>1.Axios异步框架</h4><ul><li>Axios对原生的AJAX进行封装，简化书写</li><li>官网：<a href="https://www.axios-http.cn/">https://www.axios-http.cn</a></li></ul><h4 id="2-快速入门-2"><a href="#2-快速入门-2" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><h5 id="2-1引入axios的js文件"><a href="#2-1引入axios的js文件" class="headerlink" title="2.1引入axios的js文件"></a>2.1引入axios的js文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-2使用axios发送请求，并获取响应结果"><a href="#2-2使用axios发送请求，并获取响应结果" class="headerlink" title="2.2使用axios发送请求，并获取响应结果"></a>2.2使用axios发送请求，并获取响应结果</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>((</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;:</span><br></pre></td></tr></table></figure><h4 id="3-Axios请求方式别名"><a href="#3-Axios请求方式别名" class="headerlink" title="3.Axios请求方式别名"></a>3.Axios请求方式别名</h4><ul><li><p>为了方便起见，Axos已经为所有支持的请求方法提供了别名，</p><p>axios.get(url[,config])<br>axios.delete(url[,config])<br>axios.head(url[,config])<br>axios.options(url[,config])<br>axios.post(url[,data[,config]])<br>axios.put(url[,data[,config]])<br>axios.patch(url[,data[,config]])</p></li></ul><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>get(url)</td><td>发起GET方式请求</td></tr><tr><td>post(url,请求参数)</td><td>发起POST方式请求</td></tr></tbody></table><ul><li><p>发送get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>发送psot请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;ur&quot;</span>,<span class="string">&quot;参数&quot;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">resp</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三-JSON"><a href="#三-JSON" class="headerlink" title="三.JSON"></a>三.JSON</h3><ul><li>概念：<strong>J</strong>avaScript <strong>O</strong>bject <strong>N</strong>otation。JavaScript对象表示法</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221022105317460.png" alt="image-20221022105317460"></p><h4 id="1-JSON基础语法"><a href="#1-JSON基础语法" class="headerlink" title="1.JSON基础语法"></a>1.JSON基础语法</h4><ul><li><p>定义:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var变量名=<span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span>value1<span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span>value2<span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure><p>value的数据类型为:</p><p>数字（整数或浮点数）<br>字符串（在双引号中）<br>逻辑值(true或false)<br>数组（在方括号中）<br>对象（在花括号中）<br>null</p><ul><li><p>实例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var json <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">23</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;addr&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;北京&quot;</span>，<span class="string">&quot;上海&quot;</span>，<span class="string">&quot;西安]</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名.key</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.name</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-JSON数据和Java对象转换"><a href="#2-JSON数据和Java对象转换" class="headerlink" title="2.JSON数据和Java对象转换"></a>2.JSON数据和Java对象转换</h4><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221022110050344.png" alt="image-20221022110050344"></p><ul><li><p>请求数据：JSON字符串转为Java对象</p></li><li><p>响应数据：Java对象转为JSON字符串</p></li><li><p>Fastjson是阿里巴巴提供的一个Java语言编写的高性能功能完善的JSON库，是目前Java语言中最快的JSON库，可以实现Java对象和SON字符串的相互转换。</p></li><li><p>使用<br>1.导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupld</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.62<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.Java对象转JSON</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(obj);</span><br></pre></td></tr></table></figure><p>3.JSON字符转转Java对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseobject(jsonStr,User.class);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Vue-Element"><a href="#Vue-Element" class="headerlink" title="Vue&Element"></a>Vue&Element</h2><h3 id="一-Vue"><a href="#一-Vue" class="headerlink" title="一.Vue"></a>一.Vue</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul><li><strong>Vue</strong>是一套<strong>前端框架</strong>，免除原生lavaScriptr中的DOM操作，简化书写</li><li>基于<strong>MVWM</strong>(Model--View-ViewModel))思想，实现数据的<strong>双向绑定</strong>，将编程的关注点放在数据上</li><li>官网：<a href="https://cn.vuejs..org/">https://cn.vuejs..org</a><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221025155949797.png" alt="image-20221025155949797"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221025160102518.png" alt="image-20221025160102518"></li></ul><h5 id="1-1快速入门"><a href="#1-1快速入门" class="headerlink" title="1.1快速入门"></a>1.1快速入门</h5><ul><li><p>新建HTML页面，引入Vue.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在JS代码区域，创建Vue核心对象，进行数据绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>编写视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span><span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;username)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-常用指令"><a href="#2-常用指令" class="headerlink" title="2.常用指令"></a>2.常用指令</h4><ul><li><p>指令:HTML标签上带有V-前缀的特殊属性，不同指令具有不同含义。例如：V-if,V-for.</p></li><li><p>常用指令</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置href,css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-else</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-else-if</td><td>条件性的渲染某元素，判定为true时渲染，否则不渲染</td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table></li></ul><h5 id="2-1指令"><a href="#2-1指令" class="headerlink" title="2.1指令"></a>2.1指令</h5><ul><li><p>v-bind:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;百度一下&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">v-bind可以省略</span><br><span class="line">--&gt;</span><br><span class="line">&lt;a:href=&quot;url&quot;&gt;百度一下&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-model:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input name=&quot;username&quot;v-model=&quot;username&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-on:</p><ul><li><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type-</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;一个按钮&quot;</span><span class="attr">v-on:click</span>=<span class="string">&quot;show()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span><span class="attr">value</span>=<span class="string">&quot;一个按钮&quot;</span>@<span class="attr">click</span>=<span class="string">&quot;shoW&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">    show()&#123;</span><br><span class="line">        alert(&quot;我被点了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>v-if</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;count == 3&quot;&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;count == 2&quot;&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;div3&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-show</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=&quot;count == 3&quot;&gt;div4&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>v-for</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;addr in addrs&quot;&gt;</span><br><span class="line">&#123;&#123;addr&#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>加索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(addr,i)in addrs&quot;&gt;</span><br><span class="line">    &lt;!-i表示索引，从0开始-&gt;</span><br><span class="line">    &#123;&#123;i+1&#125;&#125;:&#123;&#123;addr&#125;&#125;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3.生命周期"></a>3.生命周期</h4><ul><li>生命周期的八个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法（钩子）</li></ul><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>载入前</td></tr><tr><td><strong>mounted</strong></td><td><strong>挂载完成</strong></td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><ul><li><p>mounted:挂载完成，Vue初始化成功，HTML页面渲染成功。</p><ul><li>发送异步请求,加载数据</li></ul></li><li><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">    alet(&quot;vue挂载完毕，发送异步请求&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="二-Element"><a href="#二-Element" class="headerlink" title="二.Element"></a>二.Element</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><ul><li>Element:是饿了么公司前端开发团队提供的一套基于Vue的网站组件库，用于快速构建网页</li><li>组件：组成网页的部件，例如超链接、按钮、图片、表格等等~</li><li>自己完成的按钮<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221026084943140.png" alt="image-20221026084943140"></li><li>Element提供的按钮<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221026085049447.png" alt="image-20221026085049447"></li><li>Element官网：<a href="https://element.eleme.cn/#/zh-CNListener">https://element.eleme.cn/#/zh-CNListener</a></li></ul><h5 id="1-1快速入门-1"><a href="#1-1快速入门-1" class="headerlink" title="1.1快速入门"></a>1.1快速入门</h5><ul><li><p>引入Element的css、js文件和Vue.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span><span class="attr">href</span>=<span class="string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建Vue核心对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&quot;#app&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>官网复制Element组件代码</p></li></ul><h4 id="2-Element布局"><a href="#2-Element布局" class="headerlink" title="2.Element布局"></a>2.Element布局</h4><ul><li><p>Element中有两种布局方式:</p><ul><li>Layout布局:通过基础的24分栏，迅速简便地创建布局</li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221026090505447.png" alt="image-20221026090505447"></p><ul><li><p>Container布局容器：用于布局的容器组件，方便快速搭建页面的基本结构</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221026090637459.png" alt="image-20221026090637459"></p></li></ul></li></ul><h4 id="3-Element组件"><a href="#3-Element组件" class="headerlink" title="3.Element组件"></a>3.Element组件</h4><p> <img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221026091658345.png" alt="image-20221026091658345"></p><p>都多余了,上官网上找代码就行</p></style></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客文章</title>
      <link href="/2023/01/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h3 id="1-俩数之和"><a href="#1-俩数之和" class="headerlink" title="1.俩数之和"></a>1.俩数之和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="type">int</span>[] res=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;<span class="comment">//双循环遍历数组，找到目标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(nums[i]+nums[j]==target) &#123;</span><br><span class="line">res[<span class="number">0</span>]=i;</span><br><span class="line">res[<span class="number">1</span>]=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-俩数相加"><a href="#2-俩数相加" class="headerlink" title="2.俩数相加"></a>2.俩数相加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">         <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">         <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span>head;</span><br><span class="line">         ListNode p=l1;</span><br><span class="line">         ListNode q=l2;</span><br><span class="line">         <span class="type">int</span> extra=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(p!=<span class="literal">null</span>&amp;&amp;q!=<span class="literal">null</span>)&#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span>p.val+q.val+extra;</span><br><span class="line">             <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span>r%<span class="number">10</span>;<span class="comment">//取余，求个位数的值</span></span><br><span class="line">             extra=r/<span class="number">10</span>;<span class="comment">//如果r小于10，则int extra算出来是0.若大于10，则算出来为1或以上。//</span></span><br><span class="line">             ListNode node=<span class="keyword">new</span> <span class="title class_">ListNode</span>(bit);</span><br><span class="line">             <span class="comment">//尾插</span></span><br><span class="line">             tail.next=node;</span><br><span class="line">             tail=tail.next;</span><br><span class="line">             p=p.next;</span><br><span class="line">             q=q.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//p和q至少有一个不为空</span></span><br><span class="line">         <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">             <span class="comment">//q为空</span></span><br><span class="line">             <span class="type">int</span> r=p.val+extra;</span><br><span class="line">             <span class="type">int</span> bit=r%<span class="number">10</span>;</span><br><span class="line">             extra=r/<span class="number">10</span>;</span><br><span class="line">             ListNode node=<span class="keyword">new</span> <span class="title class_">ListNode</span>(bit);</span><br><span class="line">             tail.next=node;</span><br><span class="line">             tail=tail.next;</span><br><span class="line">             p=p.next;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span>(q!=<span class="literal">null</span>)&#123;</span><br><span class="line">             <span class="comment">//p为空</span></span><br><span class="line">             <span class="type">int</span> r=q.val+extra;</span><br><span class="line">             <span class="type">int</span> bit=r%<span class="number">10</span>;</span><br><span class="line">             extra=r/<span class="number">10</span>;</span><br><span class="line">             ListNode node=<span class="keyword">new</span> <span class="title class_">ListNode</span>(bit);</span><br><span class="line">             tail.next=node;</span><br><span class="line">             tail=tail.next;</span><br><span class="line">             q=q.next;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(extra!=<span class="number">0</span>)&#123;</span><br><span class="line">             ListNode node=<span class="keyword">new</span> <span class="title class_">ListNode</span>(extra);</span><br><span class="line">             tail.next=node;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-无重复的最长子串"><a href="#3-无重复的最长子串" class="headerlink" title="3.无重复的最长子串"></a>3.无重复的最长子串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;Character,Integer&gt;map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> base=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> maxLen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="type">char</span> ch=s.charAt(i);</span><br><span class="line">            <span class="type">int</span> cnt=map.getOrDefault(ch,<span class="number">0</span>);</span><br><span class="line">            map.put(ch,cnt+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(map.get(ch)&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                base++;</span><br><span class="line">                <span class="type">char</span> baseCh=s.charAt(base);</span><br><span class="line">                map.put(baseCh,map.get(baseCh)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(baseCh)==<span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(baseCh);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> len=map.size();</span><br><span class="line">            maxLen=Math.max(maxLen,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-寻找俩个正序数组的中位数"><a href="#4-寻找俩个正序数组的中位数" class="headerlink" title="4.寻找俩个正序数组的中位数"></a>4.寻找俩个正序数组的中位数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// logn</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid1</span> <span class="operator">=</span> (nums1.length+nums2.length)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid2</span> <span class="operator">=</span> (nums1.length+nums2.length-<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> findKth(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,mid1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">val2</span> <span class="operator">=</span> findKth(nums1,<span class="number">0</span>,nums2,<span class="number">0</span>,mid2);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> (val1 + val2) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKth</span><span class="params">(<span class="type">int</span>[] nums1,<span class="type">int</span> i,<span class="type">int</span>[] nums2,<span class="type">int</span> j,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=nums1.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums2[j+k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=nums2.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[i+k-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.min(nums1[i],nums2[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(i+k/<span class="number">2</span>-<span class="number">1</span>&lt;nums1.length)&#123;</span><br><span class="line">            val1 = nums1[i+k/<span class="number">2</span>-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val2</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(j+k/<span class="number">2</span>-<span class="number">1</span>&lt;nums2.length)&#123;</span><br><span class="line">            val2 = nums2[j+k/<span class="number">2</span>-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(val1&lt;val2)&#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1,i+k/<span class="number">2</span>,nums2,j,k-k/<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> findKth(nums1,i,nums2,j+k/<span class="number">2</span>,k-k/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/03/hello-world/"/>
      <url>/2023/01/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/2767/image-20220805200850843.png" alt="image-20220805200850843"><br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/00325/image-20221002214228510.png" alt="image-20221002214228510"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movie/index.html"/>
      <url>/movie/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
